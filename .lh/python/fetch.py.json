{
    "sourceFile": "python/fetch.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 62,
            "patches": [
                {
                    "date": 1756810437925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756810451510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-import pyd\n\\ No newline at end of file\n+import venv.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756810509459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-import venv.\n\\ No newline at end of file\n+import venv.lib.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756810518904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-import venv.lib.\n\\ No newline at end of file\n+import venv.in\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756810526495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-import venv.in\n\\ No newline at end of file\n+from venv.\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756810532984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-from venv.\n\\ No newline at end of file\n+from venv.include\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756810540554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-from venv.include\n\\ No newline at end of file\n+from venv import \n\\ No newline at end of file\n"
                },
                {
                    "date": 1756810546750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-from venv import \n\\ No newline at end of file\n+import\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756810638936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-import\n\\ No newline at end of file\n+import pyodbc\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756810735805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +0,0 @@\n-import pyodbc\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756810742444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1 @@\n+import pyd\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756810748194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-import pyd\n\\ No newline at end of file\n+import pyod\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756810782780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,14 @@\n-import pyod\n\\ No newline at end of file\n+import pyodbc  \r\n+\r\n+conn = pyodbc.connect(\r\n+    \"DRIVER={ODBC Driver 17 for SQL Server};\"\r\n+    \"SERVER=localhost;\"\r\n+    \"DATABASE=YourDB;\"\r\n+    \"UID=your_user;\"\r\n+    \"PWD=your_password\"\r\n+)\r\n+cursor = conn.cursor()\r\n+cursor.execute(\"SELECT @@VERSION;\")\r\n+\r\n+for row in cursor:\r\n+    print(row)\r\n"
                },
                {
                    "date": 1757056240698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,31 @@\n-import pyodbc  \r\n+from twilio.rest import Client\r\n+import random\r\n \r\n-conn = pyodbc.connect(\r\n-    \"DRIVER={ODBC Driver 17 for SQL Server};\"\r\n-    \"SERVER=localhost;\"\r\n-    \"DATABASE=YourDB;\"\r\n-    \"UID=your_user;\"\r\n-    \"PWD=your_password\"\r\n+# ✅ Generate 5-digit OTP\r\n+def generate_otp():\r\n+    return random.randint(10000, 99999)\r\n+\r\n+# Twilio credentials (from your Twilio Console)\r\n+account_sid = \"ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\r\n+auth_token = \"your_auth_token\"\r\n+twilio_number = \"+1234567890\"  # Your Twilio phone number\r\n+\r\n+client = Client(account_sid, auth_token)\r\n+\r\n+# User phone number (should come from your app / DB)\r\n+user_phone = \"+639123456789\"\r\n+\r\n+# Generate OTP\r\n+otp = generate_otp()\r\n+\r\n+# Save OTP (you can store in database, Redis, or session)\r\n+print(f\"Generated OTP: {otp}\")\r\n+\r\n+# Send SMS\r\n+message = client.messages.create(\r\n+    body=f\"Your OTP code is {otp}\",\r\n+    from_=twilio_number,\r\n+    to=user_phone\r\n )\r\n-cursor = conn.cursor()\r\n-cursor.execute(\"SELECT @@VERSION;\")\r\n \r\n-for row in cursor:\r\n-    print(row)\r\n+print(f\"✅ Sent OTP {otp} to {user_phone}, SID: {message.sid}\")\r\n"
                },
                {
                    "date": 1757056333646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \r\n # Twilio credentials (from your Twilio Console)\r\n account_sid = \"ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\r\n auth_token = \"your_auth_token\"\r\n-twilio_number = \"+1234567890\"  # Your Twilio phone number\r\n+twilio_number = \"0993\"  # Your Twilio phone number\r\n \r\n client = Client(account_sid, auth_token)\r\n \r\n # User phone number (should come from your app / DB)\r\n"
                },
                {
                    "date": 1757056339739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \r\n # Twilio credentials (from your Twilio Console)\r\n account_sid = \"ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\r\n auth_token = \"your_auth_token\"\r\n-twilio_number = \"0993\"  # Your Twilio phone number\r\n+twilio_number = \"09939735215\"  # Your Twilio phone number\r\n \r\n client = Client(account_sid, auth_token)\r\n \r\n # User phone number (should come from your app / DB)\r\n"
                },
                {
                    "date": 1757056637640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n     return random.randint(10000, 99999)\r\n \r\n # Twilio credentials (from your Twilio Console)\r\n account_sid = \"ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\r\n-auth_token = \"your_auth_token\"\r\n+auth_token = \"e30cfc81a9cfcfeec54c233c77b33cfd\"\r\n twilio_number = \"09939735215\"  # Your Twilio phone number\r\n \r\n client = Client(account_sid, auth_token)\r\n \r\n"
                },
                {
                    "date": 1757056644612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n def generate_otp():\r\n     return random.randint(10000, 99999)\r\n \r\n # Twilio credentials (from your Twilio Console)\r\n-account_sid = \"ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\r\n+account_sid = \"ACcbccee70318762d8547319d7217a415d\"\r\n auth_token = \"e30cfc81a9cfcfeec54c233c77b33cfd\"\r\n twilio_number = \"09939735215\"  # Your Twilio phone number\r\n \r\n client = Client(account_sid, auth_token)\r\n"
                },
                {
                    "date": 1757056887292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,31 @@\n+from flask import Flask, request, jsonify\r\n from twilio.rest import Client\r\n import random\r\n \r\n-# ✅ Generate 5-digit OTP\r\n-def generate_otp():\r\n-    return random.randint(10000, 99999)\r\n+app = Flask(__name__)\r\n \r\n-# Twilio credentials (from your Twilio Console)\r\n-account_sid = \"ACcbccee70318762d8547319d7217a415d\"\r\n-auth_token = \"e30cfc81a9cfcfeec54c233c77b33cfd\"\r\n-twilio_number = \"09939735215\"  # Your Twilio phone number\r\n+# Twilio credentials\r\n+account_sid = \"ACxxxxxxxxxxxxxxxxxxxxxxx\"\r\n+auth_token = \"your_auth_token\"\r\n+twilio_number = \"+1xxxxxxxxxx\"  # Your Twilio number (must be in E.164 format)\r\n \r\n client = Client(account_sid, auth_token)\r\n \r\n-# User phone number (should come from your app / DB)\r\n-user_phone = \"+639123456789\"\r\n+@app.route(\"/send_otp\", methods=[\"POST\"])\r\n+def send_otp():\r\n+    data = request.json\r\n+    phone = data.get(\"phone\")\r\n+    otp = data.get(\"otp\")\r\n \r\n-# Generate OTP\r\n-otp = generate_otp()\r\n+    try:\r\n+        message = client.messages.create(\r\n+            body=f\"Your OTP code is {otp}\",\r\n+            from_=twilio_number,\r\n+            to=f\"+63{phone[-10:]}\"  # ensure correct format for PH numbers\r\n+        )\r\n+        return jsonify({\"success\": True, \"sid\": message.sid})\r\n+    except Exception as e:\r\n+        return jsonify({\"success\": False, \"error\": str(e)})\r\n \r\n-# Save OTP (you can store in database, Redis, or session)\r\n-print(f\"Generated OTP: {otp}\")\r\n-\r\n-# Send SMS\r\n-message = client.messages.create(\r\n-    body=f\"Your OTP code is {otp}\",\r\n-    from_=twilio_number,\r\n-    to=user_phone\r\n-)\r\n-\r\n-print(f\"✅ Sent OTP {otp} to {user_phone}, SID: {message.sid}\")\r\n+if __name__ == \"__main__\":\r\n+    app.run(debug=True)\r\n"
                },
                {
                    "date": 1757056906694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,17 @@\n-from flask import Flask, request, jsonify\r\n from twilio.rest import Client\r\n import random\r\n \r\n-app = Flask(__name__)\r\n+# ✅ Generate 5-digit OTP\r\n+def generate_otp():\r\n+    return random.randint(10000, 99999)\r\n \r\n-# Twilio credentials\r\n-account_sid = \"ACxxxxxxxxxxxxxxxxxxxxxxx\"\r\n-auth_token = \"your_auth_token\"\r\n-twilio_number = \"+1xxxxxxxxxx\"  # Your Twilio number (must be in E.164 format)\r\n+# Twilio credentials (from your Twilio Console)\r\n+account_sid = \"ACcbccee70318762d8547319d7217a415d\"\r\n+auth_token = \"e30cfc81a9cfcfeec54c233c77b33cfd\"\r\n+twilio_number = \"09939735215\"  # Your Twilio phone number\r\n \r\n-client = Client(account_sid, auth_token)\r\n+lient = Client(account_sid, auth_token)\r\n \r\n @app.route(\"/send_otp\", methods=[\"POST\"])\r\n def send_otp():\r\n     data = request.json\r\n@@ -27,5 +28,5 @@\n     except Exception as e:\r\n         return jsonify({\"success\": False, \"error\": str(e)})\r\n \r\n if __name__ == \"__main__\":\r\n-    app.run(debug=True)\r\n+    app.run(debug=True)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757056921587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n account_sid = \"ACcbccee70318762d8547319d7217a415d\"\r\n auth_token = \"e30cfc81a9cfcfeec54c233c77b33cfd\"\r\n twilio_number = \"09939735215\"  # Your Twilio phone number\r\n \r\n-lient = Client(account_sid, auth_token)\r\n+client = Client(account_sid, auth_token)\r\n \r\n @app.route(\"/send_otp\", methods=[\"POST\"])\r\n def send_otp():\r\n     data = request.json\r\n"
                },
                {
                    "date": 1757056935672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,10 @@\n from twilio.rest import Client\r\n import random\r\n \r\n+\r\n+\r\n+app = Flask(__name__)\r\n # ✅ Generate 5-digit OTP\r\n def generate_otp():\r\n     return random.randint(10000, 99999)\r\n \r\n"
                },
                {
                    "date": 1757056949312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n from twilio.rest import Client\r\n import random\r\n+from twilio.rest import Client\r\n+import random\r\n \r\n \r\n \r\n app = Flask(__name__)\r\n"
                },
                {
                    "date": 1757056978350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n+from flask import Flask, request, jsonify\r\n from twilio.rest import Client\r\n import random\r\n-from twilio.rest import Client\r\n-import random\r\n \r\n \r\n \r\n app = Flask(__name__)\r\n"
                },
                {
                    "date": 1757057496883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,39 @@\n from flask import Flask, request, jsonify\r\n from twilio.rest import Client\r\n import random\r\n \r\n+app = Flask(__name__)\r\n \r\n-\r\n-app = Flask(__name__)\r\n # ✅ Generate 5-digit OTP\r\n def generate_otp():\r\n     return random.randint(10000, 99999)\r\n \r\n # Twilio credentials (from your Twilio Console)\r\n account_sid = \"ACcbccee70318762d8547319d7217a415d\"\r\n auth_token = \"e30cfc81a9cfcfeec54c233c77b33cfd\"\r\n-twilio_number = \"09939735215\"  # Your Twilio phone number\r\n+twilio_number = \"+1234567890\"  # Replace with your real Twilio phone number\r\n \r\n client = Client(account_sid, auth_token)\r\n \r\n @app.route(\"/send_otp\", methods=[\"POST\"])\r\n def send_otp():\r\n     data = request.json\r\n     phone = data.get(\"phone\")\r\n-    otp = data.get(\"otp\")\r\n \r\n+    if not phone:\r\n+        return jsonify({\"success\": False, \"error\": \"No phone number provided\"}), 400\r\n+\r\n+    otp = generate_otp()\r\n+\r\n     try:\r\n         message = client.messages.create(\r\n             body=f\"Your OTP code is {otp}\",\r\n             from_=twilio_number,\r\n-            to=f\"+63{phone[-10:]}\"  # ensure correct format for PH numbers\r\n\\ No newline at end of file\n+            to=f\"+63{phone[-10:]}\"  # assumes PH number\r\n         )\r\n-        return jsonify({\"success\": True, \"sid\": message.sid})\r\n+        return jsonify({\"success\": True, \"sid\": message.sid, \"otp\": otp})\r\n     except Exception as e:\r\n-        return jsonify({\"success\": False, \"error\": str(e)})\r\n+        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n \r\n if __name__ == \"__main__\":\r\n-    app.run(debug=True)\n+    app.run(debug=True)\r\n"
                },
                {
                    "date": 1757057503198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \r\n # Twilio credentials (from your Twilio Console)\r\n account_sid = \"ACcbccee70318762d8547319d7217a415d\"\r\n auth_token = \"e30cfc81a9cfcfeec54c233c77b33cfd\"\r\n-twilio_number = \"+1234567890\"  # Replace with your real Twilio phone number\r\n+twilio_number = \"+6\"  # Replace with your real Twilio phone number\r\n \r\n client = Client(account_sid, auth_token)\r\n \r\n @app.route(\"/send_otp\", methods=[\"POST\"])\r\n"
                },
                {
                    "date": 1757057510465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \r\n # Twilio credentials (from your Twilio Console)\r\n account_sid = \"ACcbccee70318762d8547319d7217a415d\"\r\n auth_token = \"e30cfc81a9cfcfeec54c233c77b33cfd\"\r\n-twilio_number = \"+6\"  # Replace with your real Twilio phone number\r\n+twilio_number = \"+639939735215\"  # Replace with your real Twilio phone number\r\n \r\n client = Client(account_sid, auth_token)\r\n \r\n @app.route(\"/send_otp\", methods=[\"POST\"])\r\n"
                },
                {
                    "date": 1757057552654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,18 +4,22 @@\n \r\n app = Flask(__name__)\r\n \r\n # ✅ Generate 5-digit OTP\r\n+\r\n+\r\n def generate_otp():\r\n     return random.randint(10000, 99999)\r\n \r\n+\r\n # Twilio credentials (from your Twilio Console)\r\n account_sid = \"ACcbccee70318762d8547319d7217a415d\"\r\n auth_token = \"e30cfc81a9cfcfeec54c233c77b33cfd\"\r\n twilio_number = \"+639939735215\"  # Replace with your real Twilio phone number\r\n \r\n client = Client(account_sid, auth_token)\r\n \r\n+\r\n @app.route(\"/send_otp\", methods=[\"POST\"])\r\n def send_otp():\r\n     data = request.json\r\n     phone = data.get(\"phone\")\r\n@@ -34,6 +38,7 @@\n         return jsonify({\"success\": True, \"sid\": message.sid, \"otp\": otp})\r\n     except Exception as e:\r\n         return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n \r\n+\r\n if __name__ == \"__main__\":\r\n     app.run(debug=True)\r\n"
                },
                {
                    "date": 1757057689585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n from flask import Flask, request, jsonify\r\n from twilio.rest import Client\r\n import random\r\n+from flask_cors import CORS\r\n \r\n app = Flask(__name__)\r\n \r\n # ✅ Generate 5-digit OTP\r\n"
                },
                {
                    "date": 1757057701430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,13 @@\n from twilio.rest import Client\r\n import random\r\n from flask_cors import CORS\r\n \r\n+from flask_cors import CORS\r\n app = Flask(__name__)\r\n+CORS(app)\r\n \r\n+\r\n # ✅ Generate 5-digit OTP\r\n \r\n \r\n def generate_otp():\r\n"
                },
                {
                    "date": 1757063901118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,48 @@\n-from flask import Flask, request, jsonify\r\n-from twilio.rest import Client\r\n-import random\r\n-from flask_cors import CORS\r\n+# from flask import Flask, request, jsonify\r\n+# from twilio.rest import Client\r\n+# import random\r\n+# from flask_cors import CORS\r\n \r\n-from flask_cors import CORS\r\n-app = Flask(__name__)\r\n-CORS(app)\r\n+# from flask_cors import CORS\r\n+# app = Flask(__name__)\r\n+# CORS(app)\r\n \r\n \r\n-# ✅ Generate 5-digit OTP\r\n+# # ✅ Generate 5-digit OTP\r\n \r\n \r\n-def generate_otp():\r\n-    return random.randint(10000, 99999)\r\n+# def generate_otp():\r\n+#     return random.randint(10000, 99999)\r\n \r\n \r\n-# Twilio credentials (from your Twilio Console)\r\n-account_sid = \"ACcbccee70318762d8547319d7217a415d\"\r\n-auth_token = \"e30cfc81a9cfcfeec54c233c77b33cfd\"\r\n-twilio_number = \"+639939735215\"  # Replace with your real Twilio phone number\r\n+# # Twilio credentials (from your Twilio Console)\r\n+# account_sid = \"ACcbccee70318762d8547319d7217a415d\"\r\n+# auth_token = \"e30cfc81a9cfcfeec54c233c77b33cfd\"\r\n+# twilio_number = \"+639939735215\"  # Replace with your real Twilio phone number\r\n \r\n-client = Client(account_sid, auth_token)\r\n+# client = Client(account_sid, auth_token)\r\n \r\n \r\n-@app.route(\"/send_otp\", methods=[\"POST\"])\r\n-def send_otp():\r\n-    data = request.json\r\n-    phone = data.get(\"phone\")\r\n+# @app.route(\"/send_otp\", methods=[\"POST\"])\r\n+# def send_otp():\r\n+#     data = request.json\r\n+#     phone = data.get(\"phone\")\r\n \r\n-    if not phone:\r\n-        return jsonify({\"success\": False, \"error\": \"No phone number provided\"}), 400\r\n+#     if not phone:\r\n+#         return jsonify({\"success\": False, \"error\": \"No phone number provided\"}), 400\r\n \r\n-    otp = generate_otp()\r\n+#     otp = generate_otp()\r\n \r\n-    try:\r\n-        message = client.messages.create(\r\n-            body=f\"Your OTP code is {otp}\",\r\n-            from_=twilio_number,\r\n-            to=f\"+63{phone[-10:]}\"  # assumes PH number\r\n-        )\r\n-        return jsonify({\"success\": True, \"sid\": message.sid, \"otp\": otp})\r\n-    except Exception as e:\r\n-        return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n+#     try:\r\n+#         message = client.messages.create(\r\n+#             body=f\"Your OTP code is {otp}\",\r\n+#             from_=twilio_number,\r\n+#             to=f\"+63{phone[-10:]}\"  # assumes PH number\r\n+#         )\r\n+#         return jsonify({\"success\": True, \"sid\": message.sid, \"otp\": otp})\r\n+#     except Exception as e:\r\n+#         return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n \r\n \r\n-if __name__ == \"__main__\":\r\n-    app.run(debug=True)\r\n+# if __name__ == \"__main__\":\r\n+#     app.run(debug=True)\r\n"
                },
                {
                    "date": 1757237376998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,1 @@\n-# from flask import Flask, request, jsonify\r\n-# from twilio.rest import Client\r\n-# import random\r\n-# from flask_cors import CORS\r\n-\r\n-# from flask_cors import CORS\r\n-# app = Flask(__name__)\r\n-# CORS(app)\r\n-\r\n-\r\n-# # ✅ Generate 5-digit OTP\r\n-\r\n-\r\n-# def generate_otp():\r\n-#     return random.randint(10000, 99999)\r\n-\r\n-\r\n-# # Twilio credentials (from your Twilio Console)\r\n-# account_sid = \"ACcbccee70318762d8547319d7217a415d\"\r\n-# auth_token = \"e30cfc81a9cfcfeec54c233c77b33cfd\"\r\n-# twilio_number = \"+639939735215\"  # Replace with your real Twilio phone number\r\n-\r\n-# client = Client(account_sid, auth_token)\r\n-\r\n-\r\n-# @app.route(\"/send_otp\", methods=[\"POST\"])\r\n-# def send_otp():\r\n-#     data = request.json\r\n-#     phone = data.get(\"phone\")\r\n-\r\n-#     if not phone:\r\n-#         return jsonify({\"success\": False, \"error\": \"No phone number provided\"}), 400\r\n-\r\n-#     otp = generate_otp()\r\n-\r\n-#     try:\r\n-#         message = client.messages.create(\r\n-#             body=f\"Your OTP code is {otp}\",\r\n-#             from_=twilio_number,\r\n-#             to=f\"+63{phone[-10:]}\"  # assumes PH number\r\n-#         )\r\n-#         return jsonify({\"success\": True, \"sid\": message.sid, \"otp\": otp})\r\n-#     except Exception as e:\r\n-#         return jsonify({\"success\": False, \"error\": str(e)}), 500\r\n-\r\n-\r\n-# if __name__ == \"__main__\":\r\n-#     app.run(debug=True)\r\n+import pyod\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757237383547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-import pyod\n\\ No newline at end of file\n+import pyodbc\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757237452616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,19 @@\n-import pyodbc\n\\ No newline at end of file\n+import pyodbc\r\n+\r\n+\r\n+\r\n+# 🔹 Windows Authentication example\r\n+conn = pyodbc.connect(\r\n+    \"Driver={ODBC Driver 17 for SQL Server};\"\r\n+    \"Server=localhost\\\\SQLEXPRESS;\"  # or just localhost\r\n+    \"Database=YourDatabaseName;\"\r\n+    \"Trusted_Connection=yes;\"\r\n+)\r\n+\r\n+cursor = conn.cursor()\r\n+cursor.execute(\"SELECT name FROM sys.databases;\")\r\n+\r\n+for row in cursor.fetchall():\r\n+    print(row)\r\n+\r\n+conn.close()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757237720119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n # 🔹 Windows Authentication example\r\n conn = pyodbc.connect(\r\n     \"Driver={ODBC Driver 17 for SQL Server};\"\r\n     \"Server=localhost\\\\SQLEXPRESS;\"  # or just localhost\r\n-    \"Database=YourDatabaseName;\"\r\n+    \"Database=DBCRUD;\"\r\n     \"Trusted_Connection=yes;\"\r\n )\r\n \r\n cursor = conn.cursor()\r\n"
                },
                {
                    "date": 1757237739142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \r\n # 🔹 Windows Authentication example\r\n conn = pyodbc.connect(\r\n     \"Driver={ODBC Driver 17 for SQL Server};\"\r\n-    \"Server=localhost\\\\SQLEXPRESS;\"  # or just localhost\r\n+    \"Server=\\SQLEXPRESS;\"  # or just localhost\r\n     \"Database=DBCRUD;\"\r\n     \"Trusted_Connection=yes;\"\r\n )\r\n \r\n"
                },
                {
                    "date": 1757237745037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \r\n # 🔹 Windows Authentication example\r\n conn = pyodbc.connect(\r\n     \"Driver={ODBC Driver 17 for SQL Server};\"\r\n-    \"Server=\\SQLEXPRESS;\"  # or just localhost\r\n+    \"Server=.\\SQLEXPRESS;\"  \r\n     \"Database=DBCRUD;\"\r\n     \"Trusted_Connection=yes;\"\r\n )\r\n \r\n"
                },
                {
                    "date": 1757237777211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     \"Trusted_Connection=yes;\"\r\n )\r\n \r\n cursor = conn.cursor()\r\n-cursor.execute(\"SELECT name FROM sys.databases;\")\r\n+cursor.execute(\"SELECT name FROM ;\")\r\n \r\n for row in cursor.fetchall():\r\n     print(row)\r\n \r\n"
                },
                {
                    "date": 1757237803109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,11 @@\n     \"Trusted_Connection=yes;\"\r\n )\r\n \r\n cursor = conn.cursor()\r\n-cursor.execute(\"SELECT name FROM ;\")\r\n+cursor.execute(\"SELECT * FROM Users;\")\r\n \r\n+\r\n for row in cursor.fetchall():\r\n     print(row)\r\n \r\n conn.close()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1757237876841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,17 @@\n import pyodbc\r\n \r\n-\r\n-\r\n-# 🔹 Windows Authentication example\r\n+# Check your installed drivers with pyodbc.drivers() first!\r\n conn = pyodbc.connect(\r\n     \"Driver={ODBC Driver 17 for SQL Server};\"\r\n-    \"Server=.\\SQLEXPRESS;\"  \r\n+    \"Server=.\\\\SQLEXPRESS;\"\r\n     \"Database=DBCRUD;\"\r\n     \"Trusted_Connection=yes;\"\r\n )\r\n \r\n cursor = conn.cursor()\r\n-cursor.execute(\"SELECT * FROM Users;\")\r\n+cursor.execute(\"SELECT UserID, FullName, Email, ContactNum FROM Users;\")\r\n \r\n-\r\n for row in cursor.fetchall():\r\n\\ No newline at end of file\n     print(row)\r\n \r\n-conn.close()\n+conn.close()\r\n"
                },
                {
                    "date": 1757237910262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,17 @@\n import pyodbc\r\n \r\n # Check your installed drivers with pyodbc.drivers() first!\r\n-conn = pyodbc.connect(\r\n-    \"Driver={ODBC Driver 17 for SQL Server};\"\r\n-    \"Server=.\\\\SQLEXPRESS;\"\r\n-    \"Database=DBCRUD;\"\r\n-    \"Trusted_Connection=yes;\"\r\n-)\r\n+# conn = pyodbc.connect(\r\n+#     \"Driver={ODBC Driver 17 for SQL Server};\"\r\n+#     \"Server=.\\\\SQLEXPRESS;\"\r\n+#     \"Database=DBCRUD;\"\r\n+#     \"Trusted_Connection=yes;\"\r\n+# )\r\n \r\n-cursor = conn.cursor()\r\n\\ No newline at end of file\n-cursor.execute(\"SELECT UserID, FullName, Email, ContactNum FROM Users;\")\r\n+# cursor = conn.cursor()\r\n+# cursor.execute(\"SELECT UserID, FullName, Email, ContactNum FROM Users;\")\r\n \r\n-for row in cursor.fetchall():\r\n-    print(row)\r\n+# for row in cursor.fetchall():\r\n+#     print(row)\r\n \r\n-conn.close()\n+# conn.close()\r\n"
                },
                {
                    "date": 1757237933551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,18 @@\n import pyodbc\r\n \r\n-# Check your installed drivers with pyodbc.drivers() first!\r\n-# conn = pyodbc.connect(\r\n-#     \"Driver={ODBC Driver 17 for SQL Server};\"\r\n-#     \"Server=.\\\\SQLEXPRESS;\"\r\n-#     \"Database=DBCRUD;\"\r\n-#     \"Trusted_Connection=yes;\"\r\n-# )\r\n+conn = pyodbc.connect(\r\n+    \"Driver={ODBC Driver 13 for SQL Server};\"\r\n+    \"Server=.\\\\SQLEXPRESS;\"   # your SQL Server 2016 Express instance\r\n+    \"Database=DBCRUD;\"\r\n+    \"Trusted_Connection=yes;\"\r\n+)\r\n \r\n-# cursor = conn.cursor()\r\n-# cursor.execute(\"SELECT UserID, FullName, Email, ContactNum FROM Users;\")\r\n+cursor = conn.cursor()\r\n \r\n-# for row in cursor.fetchall():\r\n-#     print(row)\r\n+# Example query\r\n+cursor.execute(\"SELECT UserID, FullName, Email, ContactNum FROM Users;\")\r\n \r\n-# conn.close()\r\n+for row in cursor.fetchall():\r\n+    print(row)\r\n+\r\n+conn.close()\r\n"
                },
                {
                    "date": 1757238041094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,16 @@\n import pyodbc\r\n \r\n conn = pyodbc.connect(\r\n     \"Driver={ODBC Driver 13 for SQL Server};\"\r\n-    \"Server=.\\\\SQLEXPRESS;\"   # your SQL Server 2016 Express instance\r\n+    \"Server=.\\\\SQLEXPRESS;\"   # or try just 'localhost\\\\SQLEXPRESS'\r\n     \"Database=DBCRUD;\"\r\n     \"Trusted_Connection=yes;\"\r\n )\r\n \r\n cursor = conn.cursor()\r\n \r\n-# Example query\r\n-cursor.execute(\"SELECT UserID, FullName, Email, ContactNum FROM Users;\")\r\n+cursor.execute(\"SELECT name FROM sys.tables;\")  # test: list tables in DBCRUD\r\n \r\n for row in cursor.fetchall():\r\n     print(row)\r\n \r\n"
                },
                {
                    "date": 1757238074635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,21 @@\n import pyodbc\r\n \r\n conn = pyodbc.connect(\r\n     \"Driver={ODBC Driver 13 for SQL Server};\"\r\n-    \"Server=.\\\\SQLEXPRESS;\"   # or try just 'localhost\\\\SQLEXPRESS'\r\n+    \"Server=.\\\\SQLEXPRESS;\"\r\n     \"Database=DBCRUD;\"\r\n     \"Trusted_Connection=yes;\"\r\n )\r\n \r\n cursor = conn.cursor()\r\n \r\n-cursor.execute(\"SELECT name FROM sys.tables;\")  # test: list tables in DBCRUD\r\n+# Fetch all rows from Users\r\n+cursor.execute(\"SELECT * FROM Users;\")\r\n \r\n-for row in cursor.fetchall():\r\n-    print(row)\r\n+rows = cursor.fetchall()\r\n \r\n+# Print nicely\r\n+for row in rows:\r\n+    print(row)  # prints the full row tuple (e.g., (1, 'Vincent James...', 'email', ...))\r\n+\r\n conn.close()\r\n"
                },
                {
                    "date": 1757238141004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,25 @@\n import pyodbc\r\n \r\n conn = pyodbc.connect(\r\n     \"Driver={ODBC Driver 13 for SQL Server};\"\r\n-    \"Server=.\\\\SQLEXPRESS;\"\r\n+    \"Server=.\\\\SQLEXPRESS;\"   # check this carefully!\r\n     \"Database=DBCRUD;\"\r\n     \"Trusted_Connection=yes;\"\r\n )\r\n \r\n cursor = conn.cursor()\r\n \r\n-# Fetch all rows from Users\r\n-cursor.execute(\"SELECT * FROM Users;\")\r\n+# Check which database you are actually connected to\r\n+cursor.execute(\"SELECT DB_NAME() AS CurrentDB\")\r\n+print(\"Connected to:\", cursor.fetchone()[0])\r\n \r\n-rows = cursor.fetchall()\r\n+# Check if Users table has rows\r\n+cursor.execute(\"SELECT COUNT(*) FROM dbo.Users\")\r\n+print(\"Users row count:\", cursor.fetchone()[0])\r\n \r\n-# Print nicely\r\n-for row in rows:\r\n-    print(row)  # prints the full row tuple (e.g., (1, 'Vincent James...', 'email', ...))\r\n+# Fetch some rows\r\n+cursor.execute(\"SELECT TOP 5 * FROM dbo.Users\")\r\n+for row in cursor.fetchall():\r\n+    print(row)\r\n \r\n conn.close()\r\n"
                },
                {
                    "date": 1757238269901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,21 @@\n import pyodbc\r\n \r\n conn = pyodbc.connect(\r\n     \"Driver={ODBC Driver 13 for SQL Server};\"\r\n-    \"Server=.\\\\SQLEXPRESS;\"   # check this carefully!\r\n+    \"Server=DESKTOP-IM9M47U\\\\SQLEXPRESS;\"\r\n     \"Database=DBCRUD;\"\r\n     \"Trusted_Connection=yes;\"\r\n )\r\n \r\n cursor = conn.cursor()\r\n \r\n-# Check which database you are actually connected to\r\n-cursor.execute(\"SELECT DB_NAME() AS CurrentDB\")\r\n-print(\"Connected to:\", cursor.fetchone()[0])\r\n+cursor.execute(\"SELECT * FROM Users;\")\r\n+rows = cursor.fetchall()\r\n \r\n-# Check if Users table has rows\r\n-cursor.execute(\"SELECT COUNT(*) FROM dbo.Users\")\r\n-print(\"Users row count:\", cursor.fetchone()[0])\r\n+if rows:\r\n+    for row in rows:\r\n+        print(row)\r\n+else:\r\n+    print(\"⚠️ No rows found in Users table.\")\r\n \r\n-# Fetch some rows\r\n-cursor.execute(\"SELECT TOP 5 * FROM dbo.Users\")\r\n-for row in cursor.fetchall():\r\n-    print(row)\r\n-\r\n conn.close()\r\n"
                },
                {
                    "date": 1757238303139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import pyodbc\r\n \r\n+# Connect to DBCRUD\r\n conn = pyodbc.connect(\r\n     \"Driver={ODBC Driver 13 for SQL Server};\"\r\n     \"Server=DESKTOP-IM9M47U\\\\SQLEXPRESS;\"\r\n     \"Database=DBCRUD;\"\r\n@@ -8,14 +9,27 @@\n )\r\n \r\n cursor = conn.cursor()\r\n \r\n+# Insert one user\r\n+cursor.execute(\"\"\"\r\n+    INSERT INTO Users (FullName, Email, Password, ContactNum, Cart)\r\n+    VALUES (?, ?, ?, ?, ?)\r\n+\"\"\", (\r\n+    \"VINCENT JAMES GARCIA MANALASTAS\",\r\n+    \"vincentmanalastas827@gmail.com\",\r\n+    \"123Vincent@\",\r\n+    \"09939735215\",\r\n+    \"[]\"\r\n+))\r\n+\r\n+# Save changes\r\n+conn.commit()\r\n+\r\n+print(\"✅ User inserted successfully!\")\r\n+\r\n+# Fetch again to confirm\r\n cursor.execute(\"SELECT * FROM Users;\")\r\n-rows = cursor.fetchall()\r\n+for row in cursor.fetchall():\r\n+    print(row)\r\n \r\n-if rows:\r\n-    for row in rows:\r\n-        print(row)\r\n-else:\r\n-    print(\"⚠️ No rows found in Users table.\")\r\n-\r\n conn.close()\r\n"
                },
                {
                    "date": 1757238311613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import pyodbc\r\n \r\n-# Connect to DBCRUD\r\n conn = pyodbc.connect(\r\n     \"Driver={ODBC Driver 13 for SQL Server};\"\r\n     \"Server=DESKTOP-IM9M47U\\\\SQLEXPRESS;\"\r\n     \"Database=DBCRUD;\"\r\n@@ -9,27 +8,14 @@\n )\r\n \r\n cursor = conn.cursor()\r\n \r\n-# Insert one user\r\n-cursor.execute(\"\"\"\r\n-    INSERT INTO Users (FullName, Email, Password, ContactNum, Cart)\r\n-    VALUES (?, ?, ?, ?, ?)\r\n-\"\"\", (\r\n-    \"VINCENT JAMES GARCIA MANALASTAS\",\r\n-    \"vincentmanalastas827@gmail.com\",\r\n-    \"123Vincent@\",\r\n-    \"09939735215\",\r\n-    \"[]\"\r\n-))\r\n+cursor.execute(\"SELECT * FROM Users;\")\r\n+rows = cursor.fetchall()\r\n \r\n-# Save changes\r\n-conn.commit()\r\n+if rows:\r\n+    for row in rows:\r\n+        print(row)\r\n+else:\r\n+    print(\"⚠️ No rows found in Users table.\")\r\n \r\n-print(\"✅ User inserted successfully!\")\r\n-\r\n-# Fetch again to confirm\r\n-cursor.execute(\"SELECT * FROM Users;\")\r\n-for row in cursor.fetchall():\r\n-    print(row)\r\n-\r\n conn.close()\r\n"
                },
                {
                    "date": 1757238507017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,82 @@\n+# api.py\r\n+from flask import Flask, request, jsonify\r\n import pyodbc\r\n \r\n-conn = pyodbc.connect(\r\n-    \"Driver={ODBC Driver 13 for SQL Server};\"\r\n-    \"Server=DESKTOP-IM9M47U\\\\SQLEXPRESS;\"\r\n-    \"Database=DBCRUD;\"\r\n-    \"Trusted_Connection=yes;\"\r\n-)\r\n+app = Flask(__name__)\r\n \r\n-cursor = conn.cursor()\r\n+# Database connection\r\n+def get_conn():\r\n+    return pyodbc.connect(\r\n+        \"Driver={SQL Server};\"\r\n+        \"Server=localhost\\\\SQLEXPRESS;\"\r\n+        \"Database=DBCRUD;\"\r\n+        \"Trusted_Connection=yes;\"\r\n+    )\r\n \r\n-cursor.execute(\"SELECT * FROM Users;\")\r\n-rows = cursor.fetchall()\r\n+# 🔹 Get all users\r\n+@app.route(\"/users\", methods=[\"GET\"])\r\n+def get_users():\r\n+    conn = get_conn()\r\n+    cursor = conn.cursor()\r\n+    cursor.execute(\"SELECT UserID, FullName, Email, Password, ContactNum, Cart FROM Users\")\r\n+    rows = cursor.fetchall()\r\n+    conn.close()\r\n \r\n-if rows:\r\n-    for row in rows:\r\n-        print(row)\r\n-else:\r\n-    print(\"⚠️ No rows found in Users table.\")\r\n+    users = []\r\n+    for r in rows:\r\n+        users.append({\r\n+            \"userID\": r[0],\r\n+            \"fullName\": r[1],\r\n+            \"email\": r[2],\r\n+            \"password\": r[3],\r\n+            \"contactNum\": r[4],\r\n+            \"cart\": r[5]\r\n+        })\r\n+    return jsonify(users)\r\n \r\n-conn.close()\r\n+# 🔹 Login user\r\n+@app.route(\"/login\", methods=[\"POST\"])\r\n+def login():\r\n+    data = request.json\r\n+    email = data.get(\"email\")\r\n+    password = data.get(\"password\")\r\n+\r\n+    conn = get_conn()\r\n+    cursor = conn.cursor()\r\n+    cursor.execute(\"SELECT UserID, FullName, Email, Password, ContactNum, Cart FROM Users WHERE Email=? AND Password=?\", (email, password))\r\n+    row = cursor.fetchone()\r\n+    conn.close()\r\n+\r\n+    if row:\r\n+        return jsonify({\r\n+            \"userID\": row[0],\r\n+            \"fullName\": row[1],\r\n+            \"email\": row[2],\r\n+            \"contactNum\": row[4],\r\n+            \"cart\": row[5]\r\n+        })\r\n+    else:\r\n+        return jsonify({\"error\": \"Invalid credentials\"}), 401\r\n+\r\n+# 🔹 Add to cart\r\n+@app.route(\"/cart/add\", methods=[\"POST\"])\r\n+def add_to_cart():\r\n+    data = request.json\r\n+    user_id = data.get(\"userID\")\r\n+    book = data.get(\"book\")  # {title, price, image}\r\n+\r\n+    conn = get_conn()\r\n+    cursor = conn.cursor()\r\n+    cursor.execute(\"SELECT Cart FROM Users WHERE UserID=?\", (user_id,))\r\n+    row = cursor.fetchone()\r\n+    if row:\r\n+        import json\r\n+        cart = json.loads(row[0]) if row[0] else []\r\n+        cart.append(book)\r\n+        cursor.execute(\"UPDATE Users SET Cart=? WHERE UserID=?\", (json.dumps(cart), user_id))\r\n+        conn.commit()\r\n+    conn.close()\r\n+    return jsonify({\"success\": True, \"cart\": cart})\r\n+\r\n+if __name__ == \"__main__\":\r\n+    app.run(debug=True)\r\n"
                },
                {
                    "date": 1757238946976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,82 +1,37 @@\n-# api.py\r\n from flask import Flask, request, jsonify\r\n+from flask_cors import CORS\r\n import pyodbc\r\n \r\n app = Flask(__name__)\r\n+CORS(app)  # ✅ Enable CORS for all routes\r\n \r\n-# Database connection\r\n-def get_conn():\r\n-    return pyodbc.connect(\r\n+# Example login route\r\n+@app.route('/login', methods=['POST'])\r\n+def login():\r\n+    data = request.json\r\n+    email = data.get(\"email\")\r\n+    password = data.get(\"password\")\r\n+\r\n+    conn = pyodbc.connect(\r\n         \"Driver={SQL Server};\"\r\n         \"Server=localhost\\\\SQLEXPRESS;\"\r\n         \"Database=DBCRUD;\"\r\n         \"Trusted_Connection=yes;\"\r\n     )\r\n-\r\n-# 🔹 Get all users\r\n-@app.route(\"/users\", methods=[\"GET\"])\r\n-def get_users():\r\n-    conn = get_conn()\r\n     cursor = conn.cursor()\r\n-    cursor.execute(\"SELECT UserID, FullName, Email, Password, ContactNum, Cart FROM Users\")\r\n-    rows = cursor.fetchall()\r\n+    cursor.execute(\"SELECT UserID, FullName, Email FROM Users WHERE Email=? AND Password=?\", (email, password))\r\n+    user = cursor.fetchone()\r\n     conn.close()\r\n \r\n-    users = []\r\n-    for r in rows:\r\n-        users.append({\r\n-            \"userID\": r[0],\r\n-            \"fullName\": r[1],\r\n-            \"email\": r[2],\r\n-            \"password\": r[3],\r\n-            \"contactNum\": r[4],\r\n-            \"cart\": r[5]\r\n-        })\r\n-    return jsonify(users)\r\n-\r\n-# 🔹 Login user\r\n-@app.route(\"/login\", methods=[\"POST\"])\r\n-def login():\r\n-    data = request.json\r\n-    email = data.get(\"email\")\r\n-    password = data.get(\"password\")\r\n-\r\n-    conn = get_conn()\r\n-    cursor = conn.cursor()\r\n-    cursor.execute(\"SELECT UserID, FullName, Email, Password, ContactNum, Cart FROM Users WHERE Email=? AND Password=?\", (email, password))\r\n-    row = cursor.fetchone()\r\n-    conn.close()\r\n-\r\n-    if row:\r\n+    if user:\r\n         return jsonify({\r\n-            \"userID\": row[0],\r\n-            \"fullName\": row[1],\r\n-            \"email\": row[2],\r\n-            \"contactNum\": row[4],\r\n-            \"cart\": row[5]\r\n-        })\r\n+            \"id\": user[0],\r\n+            \"fullName\": user[1],\r\n+            \"email\": user[2]\r\n+        }), 200\r\n     else:\r\n         return jsonify({\"error\": \"Invalid credentials\"}), 401\r\n \r\n-# 🔹 Add to cart\r\n-@app.route(\"/cart/add\", methods=[\"POST\"])\r\n-def add_to_cart():\r\n-    data = request.json\r\n-    user_id = data.get(\"userID\")\r\n-    book = data.get(\"book\")  # {title, price, image}\r\n \r\n-    conn = get_conn()\r\n-    cursor = conn.cursor()\r\n-    cursor.execute(\"SELECT Cart FROM Users WHERE UserID=?\", (user_id,))\r\n-    row = cursor.fetchone()\r\n-    if row:\r\n-        import json\r\n-        cart = json.loads(row[0]) if row[0] else []\r\n-        cart.append(book)\r\n-        cursor.execute(\"UPDATE Users SET Cart=? WHERE UserID=?\", (json.dumps(cart), user_id))\r\n-        conn.commit()\r\n-    conn.close()\r\n-    return jsonify({\"success\": True, \"cart\": cart})\r\n-\r\n if __name__ == \"__main__\":\r\n     app.run(debug=True)\r\n"
                },
                {
                    "date": 1757238964970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     password = data.get(\"password\")\r\n \r\n     conn = pyodbc.connect(\r\n         \"Driver={SQL Server};\"\r\n-        \"Server=localhost\\\\SQLEXPRESS;\"\r\n+        \"Server=\\\\SQLEXPRESS;\"\r\n         \"Database=DBCRUD;\"\r\n         \"Trusted_Connection=yes;\"\r\n     )\r\n     cursor = conn.cursor()\r\n"
                },
                {
                    "date": 1757238990709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     password = data.get(\"password\")\r\n \r\n     conn = pyodbc.connect(\r\n         \"Driver={SQL Server};\"\r\n-        \"Server=\\\\SQLEXPRESS;\"\r\n+        \"Server=.\\\\SQLEXPRESS;\"\r\n         \"Database=DBCRUD;\"\r\n         \"Trusted_Connection=yes;\"\r\n     )\r\n     cursor = conn.cursor()\r\n"
                },
                {
                    "date": 1757239197101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,23 +4,30 @@\n \r\n app = Flask(__name__)\r\n CORS(app)  # ✅ Enable CORS for all routes\r\n \r\n+# Database connection function (reusable)\r\n+def get_db_connection():\r\n+    return pyodbc.connect(\r\n+        \"Driver={SQL Server};\"\r\n+        \"Server=.\\\\SQLEXPRESS;\"\r\n+        \"Database=DBCRUD;\"\r\n+        \"Trusted_Connection=yes;\"\r\n+    )\r\n+\r\n # Example login route\r\n @app.route('/login', methods=['POST'])\r\n def login():\r\n     data = request.json\r\n     email = data.get(\"email\")\r\n     password = data.get(\"password\")\r\n \r\n-    conn = pyodbc.connect(\r\n-        \"Driver={SQL Server};\"\r\n-        \"Server=.\\\\SQLEXPRESS;\"\r\n-        \"Database=DBCRUD;\"\r\n-        \"Trusted_Connection=yes;\"\r\n+    conn = get_db_connection()\r\n+    cursor = conn.cursor()\r\n+    cursor.execute(\r\n+        \"SELECT UserID, FullName, Email FROM Users WHERE Email=? AND Password=?\",\r\n+        (email, password)\r\n     )\r\n-    cursor = conn.cursor()\r\n-    cursor.execute(\"SELECT UserID, FullName, Email FROM Users WHERE Email=? AND Password=?\", (email, password))\r\n     user = cursor.fetchone()\r\n     conn.close()\r\n \r\n     if user:\r\n@@ -32,6 +39,51 @@\n     else:\r\n         return jsonify({\"error\": \"Invalid credentials\"}), 401\r\n \r\n \r\n+# ✅ Add-to-cart route\r\n+@app.route('/add_to_cart', methods=['POST'])\r\n+def add_to_cart():\r\n+    data = request.json\r\n+    email = data.get(\"email\")\r\n+    title = data.get(\"title\")\r\n+    price = data.get(\"price\")\r\n+    image = data.get(\"image\")\r\n+\r\n+    if not email or not title:\r\n+        return jsonify({\"error\": \"Missing required fields\"}), 400\r\n+\r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n+\r\n+        # Get user ID by email\r\n+        cursor.execute(\"SELECT UserID FROM Users WHERE Email=?\", (email,))\r\n+        user = cursor.fetchone()\r\n+        if not user:\r\n+            conn.close()\r\n+            return jsonify({\"error\": \"User not found\"}), 404\r\n+\r\n+        user_id = user[0]\r\n+\r\n+        # Check if item already in cart\r\n+        cursor.execute(\"SELECT * FROM Cart WHERE UserID=? AND Title=?\", (user_id, title))\r\n+        if cursor.fetchone():\r\n+            conn.close()\r\n+            return jsonify({\"error\": \"Book already in cart\"}), 409\r\n+\r\n+        # Insert new cart item\r\n+        cursor.execute(\r\n+            \"INSERT INTO Cart (UserID, Title, Price, Image) VALUES (?, ?, ?, ?)\",\r\n+            (user_id, title, price, image)\r\n+        )\r\n+        conn.commit()\r\n+        conn.close()\r\n+\r\n+        return jsonify({\"message\": f\"'{title}' added to cart successfully\"}), 200\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+\r\n if __name__ == \"__main__\":\r\n     app.run(debug=True)\r\n"
                },
                {
                    "date": 1757239360811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,45 @@\n             \"email\": user[2]\r\n         }), 200\r\n     else:\r\n         return jsonify({\"error\": \"Invalid credentials\"}), 401\r\n+    \r\n+    \r\n+    \r\n+    @app.route('/get_cart', methods=['GET'])\r\n+def get_cart():\r\n+    email = request.args.get(\"email\")\r\n+    if not email:\r\n+        return jsonify({\"error\": \"Email required\"}), 400\r\n \r\n+    try:\r\n+        conn = get_db_connection()\r\n+        cursor = conn.cursor()\r\n \r\n+        cursor.execute(\"SELECT UserID FROM Users WHERE Email=?\", (email,))\r\n+        user = cursor.fetchone()\r\n+        if not user:\r\n+            conn.close()\r\n+            return jsonify({\"error\": \"User not found\"}), 404\r\n+\r\n+        user_id = user[0]\r\n+\r\n+        cursor.execute(\"SELECT CartID, Title, Price, Image FROM Cart WHERE UserID=?\", (user_id,))\r\n+        rows = cursor.fetchall()\r\n+        conn.close()\r\n+\r\n+        cart = [\r\n+            {\"cartId\": row[0], \"title\": row[1], \"price\": float(row[2]), \"image\": row[3]}\r\n+            for row in rows\r\n+        ]\r\n+\r\n+        return jsonify({\"cart\": cart}), 200\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+\r\n+\r\n # ✅ Add-to-cart route\r\n @app.route('/add_to_cart', methods=['POST'])\r\n def add_to_cart():\r\n     data = request.json\r\n"
                },
                {
                    "date": 1757239548518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,10 @@\n         return jsonify({\"error\": \"Invalid credentials\"}), 401\r\n     \r\n     \r\n     \r\n-    @app.route('/get_cart', methods=['GET'])\r\n+    \r\n+@app.route('/get_cart', methods=['GET'])\r\n def get_cart():\r\n     email = request.args.get(\"email\")\r\n     if not email:\r\n         return jsonify({\"error\": \"Email required\"}), 400\r\n@@ -71,11 +72,11 @@\n         return jsonify({\"cart\": cart}), 200\r\n \r\n     except Exception as e:\r\n         return jsonify({\"error\": str(e)}), 500\r\n+    \r\n \r\n \r\n-\r\n # ✅ Add-to-cart route\r\n @app.route('/add_to_cart', methods=['POST'])\r\n def add_to_cart():\r\n     data = request.json\r\n"
                },
                {
                    "date": 1757239555396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,10 @@\n app = Flask(__name__)\r\n CORS(app)  # ✅ Enable CORS for all routes\r\n \r\n # Database connection function (reusable)\r\n+\r\n+\r\n def get_db_connection():\r\n     return pyodbc.connect(\r\n         \"Driver={SQL Server};\"\r\n         \"Server=.\\\\SQLEXPRESS;\"\r\n@@ -14,8 +16,10 @@\n         \"Trusted_Connection=yes;\"\r\n     )\r\n \r\n # Example login route\r\n+\r\n+\r\n @app.route('/login', methods=['POST'])\r\n def login():\r\n     data = request.json\r\n     email = data.get(\"email\")\r\n@@ -37,12 +41,40 @@\n             \"email\": user[2]\r\n         }), 200\r\n     else:\r\n         return jsonify({\"error\": \"Invalid credentials\"}), 401\r\n-    \r\n-    \r\n-    \r\n-    \r\n+\r\n+\r\n+@app.route('/remove_from_cart', methods=['POST'])\r\n+def remove_from_cart():\r\n+    data = request.json\r\n+    email = data.get(\"email\")\r\n+    cart_id = data.get(\"cartId\")\r\n+\r\n+    if not email or not cart_id:\r\n+        return jsonify({\"error\": \"Missing email or cartId\"}), 400\r\n+\r\n+    try:\r\n+        conn = pyodbc.connect(\r\n+            \"Driver={SQL Server};\"\r\n+            \"Server=.\\\\SQLEXPRESS;\"\r\n+            \"Database=DBCRUD;\"\r\n+            \"Trusted_Connection=yes;\"\r\n+        )\r\n+        cursor = conn.cursor()\r\n+\r\n+        # ✅ Remove specific item from user's cart\r\n+        cursor.execute(\r\n+            \"DELETE FROM Cart WHERE CartID = ? AND UserEmail = ?\", (cart_id, email))\r\n+        conn.commit()\r\n+        conn.close()\r\n+\r\n+        return jsonify({\"message\": \"Item removed from cart\"}), 200\r\n+\r\n+    except Exception as e:\r\n+        return jsonify({\"error\": str(e)}), 500\r\n+\r\n+\r\n @app.route('/get_cart', methods=['GET'])\r\n def get_cart():\r\n     email = request.args.get(\"email\")\r\n     if not email:\r\n@@ -59,22 +91,23 @@\n             return jsonify({\"error\": \"User not found\"}), 404\r\n \r\n         user_id = user[0]\r\n \r\n-        cursor.execute(\"SELECT CartID, Title, Price, Image FROM Cart WHERE UserID=?\", (user_id,))\r\n+        cursor.execute(\r\n+            \"SELECT CartID, Title, Price, Image FROM Cart WHERE UserID=?\", (user_id,))\r\n         rows = cursor.fetchall()\r\n         conn.close()\r\n \r\n         cart = [\r\n-            {\"cartId\": row[0], \"title\": row[1], \"price\": float(row[2]), \"image\": row[3]}\r\n+            {\"cartId\": row[0], \"title\": row[1],\r\n+                \"price\": float(row[2]), \"image\": row[3]}\r\n             for row in rows\r\n         ]\r\n \r\n         return jsonify({\"cart\": cart}), 200\r\n \r\n     except Exception as e:\r\n         return jsonify({\"error\": str(e)}), 500\r\n-    \r\n \r\n \r\n # ✅ Add-to-cart route\r\n @app.route('/add_to_cart', methods=['POST'])\r\n@@ -101,9 +134,10 @@\n \r\n         user_id = user[0]\r\n \r\n         # Check if item already in cart\r\n-        cursor.execute(\"SELECT * FROM Cart WHERE UserID=? AND Title=?\", (user_id, title))\r\n+        cursor.execute(\r\n+            \"SELECT * FROM Cart WHERE UserID=? AND Title=?\", (user_id, title))\r\n         if cursor.fetchone():\r\n             conn.close()\r\n             return jsonify({\"error\": \"Book already in cart\"}), 409\r\n \r\n"
                },
                {
                    "date": 1757239671378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,11 +61,19 @@\n             \"Trusted_Connection=yes;\"\r\n         )\r\n         cursor = conn.cursor()\r\n \r\n-        # ✅ Remove specific item from user's cart\r\n-        cursor.execute(\r\n-            \"DELETE FROM Cart WHERE CartID = ? AND UserEmail = ?\", (cart_id, email))\r\n+        # ✅ Find the UserID from email\r\n+        cursor.execute(\"SELECT UserID FROM Users WHERE Email = ?\", (email,))\r\n+        user = cursor.fetchone()\r\n+        if not user:\r\n+            conn.close()\r\n+            return jsonify({\"error\": \"User not found\"}), 404\r\n+\r\n+        user_id = user[0]\r\n+\r\n+        # ✅ Delete item from Cart using UserID + CartID\r\n+        cursor.execute(\"DELETE FROM Cart WHERE CartID = ? AND UserID = ?\", (cart_id, user_id))\r\n         conn.commit()\r\n         conn.close()\r\n \r\n         return jsonify({\"message\": \"Item removed from cart\"}), 200\r\n"
                },
                {
                    "date": 1757240218435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,43 +44,40 @@\n         return jsonify({\"error\": \"Invalid credentials\"}), 401\r\n \r\n \r\n @app.route('/remove_from_cart', methods=['POST'])\r\n+@app.route('/remove_from_cart', methods=['POST'])\r\n def remove_from_cart():\r\n     data = request.json\r\n     email = data.get(\"email\")\r\n-    cart_id = data.get(\"cartId\")\r\n+    title = data.get(\"title\")\r\n \r\n-    if not email or not cart_id:\r\n-        return jsonify({\"error\": \"Missing email or cartId\"}), 400\r\n+    if not email or not title:\r\n+        return jsonify({\"error\": \"Email and title are required\"}), 400\r\n \r\n-    try:\r\n-        conn = pyodbc.connect(\r\n-            \"Driver={SQL Server};\"\r\n-            \"Server=.\\\\SQLEXPRESS;\"\r\n-            \"Database=DBCRUD;\"\r\n-            \"Trusted_Connection=yes;\"\r\n-        )\r\n-        cursor = conn.cursor()\r\n+    conn = get_db_connection()\r\n+    cursor = conn.cursor()\r\n+    cursor.execute(\"SELECT Cart FROM Users WHERE Email = ?\", (email,))\r\n+    row = cursor.fetchone()\r\n \r\n-        # ✅ Find the UserID from email\r\n-        cursor.execute(\"SELECT UserID FROM Users WHERE Email = ?\", (email,))\r\n-        user = cursor.fetchone()\r\n-        if not user:\r\n-            conn.close()\r\n-            return jsonify({\"error\": \"User not found\"}), 404\r\n+    if not row:\r\n+        conn.close()\r\n+        return jsonify({\"error\": \"User not found\"}), 404\r\n \r\n-        user_id = user[0]\r\n+    try:\r\n+        cart = json.loads(row[0]) if row[0] else []\r\n+    except Exception:\r\n+        cart = []\r\n \r\n-        # ✅ Delete item from Cart using UserID + CartID\r\n-        cursor.execute(\"DELETE FROM Cart WHERE CartID = ? AND UserID = ?\", (cart_id, user_id))\r\n-        conn.commit()\r\n-        conn.close()\r\n+    # Filter out the book\r\n+    cart = [item for item in cart if item.get(\"title\") != title]\r\n \r\n-        return jsonify({\"message\": \"Item removed from cart\"}), 200\r\n+    # Save back to DB\r\n+    cursor.execute(\"UPDATE Users SET Cart = ? WHERE Email = ?\", (json.dumps(cart), email))\r\n+    conn.commit()\r\n+    conn.close()\r\n \r\n-    except Exception as e:\r\n-        return jsonify({\"error\": str(e)}), 500\r\n+    return jsonify({\r\n \r\n \r\n @app.route('/get_cart', methods=['GET'])\r\n def get_cart():\r\n"
                },
                {
                    "date": 1757240226592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,8 @@\n         return jsonify({\"error\": \"Invalid credentials\"}), 401\r\n \r\n \r\n @app.route('/remove_from_cart', methods=['POST'])\r\n-@app.route('/remove_from_cart', methods=['POST'])\r\n def remove_from_cart():\r\n     data = request.json\r\n     email = data.get(\"email\")\r\n     title = data.get(\"title\")\r\n@@ -78,8 +77,9 @@\n \r\n     return jsonify({\r\n \r\n \r\n+\r\n @app.route('/get_cart', methods=['GET'])\r\n def get_cart():\r\n     email = request.args.get(\"email\")\r\n     if not email:\r\n"
                },
                {
                    "date": 1757240239382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n     cursor.execute(\"UPDATE Users SET Cart = ? WHERE Email = ?\", (json.dumps(cart), email))\r\n     conn.commit()\r\n     conn.close()\r\n \r\n-    return jsonify({\r\n+    return jsonify({\"message\": f\"Removed '{title}' from cart\", \"cart\": cart})\r\n \r\n \r\n \r\n @app.route('/get_cart', methods=['GET'])\r\n"
                },
                {
                    "date": 1757240259181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n from flask import Flask, request, jsonify\r\n from flask_cors import CORS\r\n import pyodbc\r\n+import json\r\n \r\n app = Flask(__name__)\r\n CORS(app)  # ✅ Enable CORS for all routes\r\n \r\n"
                },
                {
                    "date": 1757240462867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,30 +114,11 @@\n     except Exception as e:\r\n         return jsonify({\"error\": str(e)}), 500\r\n     \r\n     \r\n-async loadUserCart() {\r\n-    if (!this.currentUserEmail) return;\r\n \r\n-    try {\r\n-        const response = await fetch(`http://127.0.0.1:5000/get_cart?email=${encodeURIComponent(this.currentUserEmail)}`);\r\n-        const result = await response.json();\r\n-        console.log(\"Cart fetch response:\", result); // 👈 add this\r\n \r\n-        if (response.ok) {\r\n-            this.items = result.cart || [];\r\n-        } else {\r\n-            console.error(\"Failed to load cart:\", result.error);\r\n-            this.items = [];\r\n-        }\r\n-    } catch (err) {\r\n-        console.error(\"Error fetching cart:\", err);\r\n-        this.items = [];\r\n-    }\r\n-}\r\n \r\n-\r\n-\r\n # ✅ Add-to-cart route\r\n @app.route('/add_to_cart', methods=['POST'])\r\n def add_to_cart():\r\n     data = request.json\r\n"
                },
                {
                    "date": 1758702642344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,9 +447,9 @@\n         rel_path = f\"books-pdf/{filename}\"  # save this exact relative path in DB\r\n \r\n         # ✅ Check if file already exists\r\n         if not os.path.exists(save_path):\r\n-                file.save(save_path)\r\n+            file.save(save_path)\r\n             print(f\"Saved new PDF: {save_path}\")\r\n         else:\r\n             print(f\"File already exists, skipping save: {save_path}\")\r\n \r\n"
                }
            ],
            "date": 1756810437925,
            "name": "Commit-0",
            "content": "import pyd"
        }
    ]
}
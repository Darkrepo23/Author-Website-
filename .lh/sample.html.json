{
    "sourceFile": "sample.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 246,
            "patches": [
                {
                    "date": 1756803159383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756803165285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,125 @@\n-<!-- Modal Background -->\r\n-<div class=\"modal-overlay\">\r\n-  <div class=\"modal\">\r\n-    <div class=\"modal-content\">\r\n-      \r\n-      <!-- Book Cover -->\r\n-      <div class=\"book-image\">\r\n-        <img src=\"img/java-book.jpg\" alt=\"Java: The Complete Reference\">\r\n-      </div>\r\n+<!DOCTYPE html>\r\n+<html lang=\"en\">\r\n+<head>\r\n+  <meta charset=\"UTF-8\">\r\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n+  <title>Card Position Switch</title>\r\n+  <style>\r\n+   .footer {\r\n+  background-color: #2c2525; /* dark gray-brown */\r\n+  color: #f2f2f2;\r\n+  padding: 3rem 5%;\r\n+  font-family: Arial, sans-serif;\r\n+}\r\n \r\n-      <!-- Book Info -->\r\n-      <div class=\"book-details\">\r\n-        <h2>Java: The Complete Reference</h2>\r\n-        <p class=\"price\">$54.99</p>\r\n-        <p class=\"rating\">‚≠ê ‚≠ê ‚≠ê ‚≠ê ‚≠ê 4.7/5</p>\r\n+.footer-content {\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: flex-start;\r\n+  flex-wrap: wrap;\r\n+}\r\n \r\n-        <p class=\"description\">\r\n-          Comprehensive coverage of C++ programming language, including modern \r\n-          C++ features, templates, and STL.\r\n-        </p>\r\n+.footer-left {\r\n+  max-width: 40%;\r\n+}\r\n \r\n-        <div class=\"meta\">\r\n-          <p><strong>Year:</strong> 2021</p>\r\n-          <p><strong>Pages:</strong> 1248</p>\r\n-          <p><strong>ISBN:</strong> 978-1260454468</p>\r\n-          <p><strong>Category:</strong> JAVA</p>\r\n-        </div>\r\n+.footer-left h3 {\r\n+  margin-bottom: 0.5rem;\r\n+}\r\n \r\n-        <!-- Action Buttons -->\r\n-        <div class=\"actions\">\r\n-          <button class=\"preview\">üëÅ Preview</button>\r\n-          <button class=\"add-cart\">üõí Add to cart</button>\r\n-        </div>\r\n+.footer-left p {\r\n+  margin-bottom: 1.5rem;\r\n+  font-size: 0.95rem;\r\n+  color: #cfcfcf;\r\n+}\r\n+\r\n+.social-icons {\r\n+  display: flex;\r\n+  gap: 1rem;\r\n+}\r\n+\r\n+.social-icons a {\r\n+  display: inline-flex;\r\n+  justify-content: center;\r\n+  align-items: center;\r\n+  width: 42px;\r\n+  height: 42px;\r\n+  border-radius: 50%;\r\n+  background: #fff;\r\n+}\r\n+\r\n+.social-icons img {\r\n+  width: 20px;\r\n+  height: 20px;\r\n+}\r\n+\r\n+.footer-right h3 {\r\n+  margin-bottom: 0.8rem;\r\n+}\r\n+\r\n+.footer-right ul {\r\n+  list-style: none;\r\n+  padding: 0;\r\n+  margin: 0;\r\n+}\r\n+\r\n+.footer-right li {\r\n+  margin-bottom: 0.8rem;\r\n+  font-size: 0.95rem;\r\n+}\r\n+\r\n+.footer-right a {\r\n+  color: #f2f2f2;\r\n+  text-decoration: underline;\r\n+}\r\n+\r\n+.footer hr {\r\n+  border: 0;\r\n+  border-top: 1px solid #8b8b8b;\r\n+  margin: 2rem 0 1rem;\r\n+}\r\n+\r\n+.footer-bottom {\r\n+  text-align: center;\r\n+  font-size: 0.9rem;\r\n+  color: #ddd;\r\n+}\r\n+\r\n+  </style>\r\n+</head>\r\n+<body>\r\n+\r\n+  <footer class=\"footer\">\r\n+  <div class=\"footer-content\">\r\n+    <!-- Left section -->\r\n+    <div class=\"footer-left\">\r\n+      <h3>Herbert Schildt</h3>\r\n+      <p>Your trusted source for programming knowledge and IT learning resources.</p>\r\n+\r\n+      <div class=\"social-icons\">\r\n+        <a href=\"#\"><img src=\"icons/amazon.svg\" alt=\"Amazon\"></a>\r\n+        <a href=\"#\"><img src=\"icons/goodreads.svg\" alt=\"Goodreads\"></a>\r\n       </div>\r\n     </div>\r\n+\r\n+    <!-- Right section -->\r\n+    <div class=\"footer-right\">\r\n+      <h3>Contact Info</h3>\r\n+      <ul>\r\n+        <li><span>üìß</span> <a href=\"mailto:Herb@herbschildt.com\">Herb@herbschildt.com</a></li>\r\n+        <li><span>üìû</span> +1 (555) 123-4567</li>\r\n+        <li><span>üìç</span> McGraw-Hill Education</li>\r\n+      </ul>\r\n+    </div>\r\n   </div>\r\n-</div>\r\n+\r\n+  <hr>\r\n+  <div class=\"footer-bottom\">\r\n+    <p>¬© 2024 Herbert Schildt. All rights reserved.</p>\r\n+  </div>\r\n+</footer>\r\n+\r\n+</body>\r\n+</html>\r\n+\r\n+</html>\r\n"
                },
                {
                    "date": 1756803176070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,39 +87,46 @@\n \r\n   </style>\r\n </head>\r\n <body>\r\n+<!-- Modal Background -->\r\n+<div class=\"modal-overlay\">\r\n+  <div class=\"modal\">\r\n+    <div class=\"modal-content\">\r\n+      \r\n+      <!-- Book Cover -->\r\n+      <div class=\"book-image\">\r\n+        <img src=\"img/java-book.jpg\" alt=\"Java: The Complete Reference\">\r\n+      </div>\r\n \r\n-  <footer class=\"footer\">\r\n-  <div class=\"footer-content\">\r\n-    <!-- Left section -->\r\n-    <div class=\"footer-left\">\r\n-      <h3>Herbert Schildt</h3>\r\n-      <p>Your trusted source for programming knowledge and IT learning resources.</p>\r\n+      <!-- Book Info -->\r\n+      <div class=\"book-details\">\r\n+        <h2>Java: The Complete Reference</h2>\r\n+        <p class=\"price\">$54.99</p>\r\n+        <p class=\"rating\">‚≠ê ‚≠ê ‚≠ê ‚≠ê ‚≠ê 4.7/5</p>\r\n \r\n-      <div class=\"social-icons\">\r\n-        <a href=\"#\"><img src=\"icons/amazon.svg\" alt=\"Amazon\"></a>\r\n-        <a href=\"#\"><img src=\"icons/goodreads.svg\" alt=\"Goodreads\"></a>\r\n+        <p class=\"description\">\r\n+          Comprehensive coverage of C++ programming language, including modern \r\n+          C++ features, templates, and STL.\r\n+        </p>\r\n+\r\n+        <div class=\"meta\">\r\n+          <p><strong>Year:</strong> 2021</p>\r\n+          <p><strong>Pages:</strong> 1248</p>\r\n+          <p><strong>ISBN:</strong> 978-1260454468</p>\r\n+          <p><strong>Category:</strong> JAVA</p>\r\n+        </div>\r\n+\r\n+        <!-- Action Buttons -->\r\n+        <div class=\"actions\">\r\n+          <button class=\"preview\">üëÅ Preview</button>\r\n+          <button class=\"add-cart\">üõí Add to cart</button>\r\n+        </div>\r\n       </div>\r\n     </div>\r\n-\r\n-    <!-- Right section -->\r\n-    <div class=\"footer-right\">\r\n-      <h3>Contact Info</h3>\r\n-      <ul>\r\n-        <li><span>üìß</span> <a href=\"mailto:Herb@herbschildt.com\">Herb@herbschildt.com</a></li>\r\n-        <li><span>üìû</span> +1 (555) 123-4567</li>\r\n-        <li><span>üìç</span> McGraw-Hill Education</li>\r\n-      </ul>\r\n-    </div>\r\n   </div>\r\n+</div>\r\n \r\n-  <hr>\r\n-  <div class=\"footer-bottom\">\r\n-    <p>¬© 2024 Herbert Schildt. All rights reserved.</p>\r\n-  </div>\r\n-</footer>\r\n-\r\n </body>\r\n </html>\r\n \r\n </html>\r\n"
                },
                {
                    "date": 1756803192268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,88 +4,115 @@\n   <meta charset=\"UTF-8\">\r\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n   <title>Card Position Switch</title>\r\n   <style>\r\n-   .footer {\r\n-  background-color: #2c2525; /* dark gray-brown */\r\n-  color: #f2f2f2;\r\n-  padding: 3rem 5%;\r\n-  font-family: Arial, sans-serif;\r\n+/* Modal Overlay */\r\n+.modal-overlay {\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  width: 100%;\r\n+  height: 100%;\r\n+  background: rgba(0,0,0,0.4);\r\n+  display: flex;\r\n+  justify-content: center;\r\n+  align-items: center;\r\n+  z-index: 1000;\r\n }\r\n \r\n-.footer-content {\r\n+/* Modal Box */\r\n+.modal {\r\n+  background: #fff;\r\n+  border-radius: 10px;\r\n+  padding: 2rem;\r\n+  max-width: 700px;\r\n+  width: 90%;\r\n+  box-shadow: 0 10px 25px rgba(0,0,0,0.2);\r\n+}\r\n+\r\n+/* Content Layout */\r\n+.modal-content {\r\n   display: flex;\r\n-  justify-content: space-between;\r\n-  align-items: flex-start;\r\n-  flex-wrap: wrap;\r\n+  gap: 1.5rem;\r\n }\r\n \r\n-.footer-left {\r\n-  max-width: 40%;\r\n+/* Book Image */\r\n+.book-image img {\r\n+  width: 140px;\r\n+  border-radius: 6px;\r\n }\r\n \r\n-.footer-left h3 {\r\n+/* Book Details */\r\n+.book-details {\r\n+  flex: 1;\r\n+}\r\n+\r\n+.book-details h2 {\r\n   margin-bottom: 0.5rem;\r\n+  font-size: 1.4rem;\r\n+  color: #600000;\r\n }\r\n \r\n-.footer-left p {\r\n-  margin-bottom: 1.5rem;\r\n-  font-size: 0.95rem;\r\n-  color: #cfcfcf;\r\n+.price {\r\n+  font-weight: bold;\r\n+  font-size: 1.2rem;\r\n+  margin: 0.3rem 0;\r\n }\r\n \r\n-.social-icons {\r\n-  display: flex;\r\n-  gap: 1rem;\r\n+.rating {\r\n+  color: #944;\r\n+  margin-bottom: 1rem;\r\n }\r\n \r\n-.social-icons a {\r\n-  display: inline-flex;\r\n-  justify-content: center;\r\n-  align-items: center;\r\n-  width: 42px;\r\n-  height: 42px;\r\n-  border-radius: 50%;\r\n-  background: #fff;\r\n+.description {\r\n+  margin: 1rem 0;\r\n+  line-height: 1.5;\r\n+  color: #444;\r\n }\r\n \r\n-.social-icons img {\r\n-  width: 20px;\r\n-  height: 20px;\r\n+.meta {\r\n+  display: flex;\r\n+  flex-wrap: wrap;\r\n+  gap: 1rem 2rem;\r\n+  font-size: 0.9rem;\r\n+  margin-bottom: 1.5rem;\r\n }\r\n \r\n-.footer-right h3 {\r\n-  margin-bottom: 0.8rem;\r\n+/* Buttons */\r\n+.actions {\r\n+  display: flex;\r\n+  gap: 1rem;\r\n }\r\n \r\n-.footer-right ul {\r\n-  list-style: none;\r\n-  padding: 0;\r\n-  margin: 0;\r\n+.actions button {\r\n+  flex: 1;\r\n+  padding: 0.8rem 1rem;\r\n+  border-radius: 6px;\r\n+  border: none;\r\n+  font-size: 1rem;\r\n+  cursor: pointer;\r\n+  transition: background 0.3s;\r\n }\r\n \r\n-.footer-right li {\r\n-  margin-bottom: 0.8rem;\r\n-  font-size: 0.95rem;\r\n+button.preview {\r\n+  background: #eee;\r\n+  color: #333;\r\n }\r\n \r\n-.footer-right a {\r\n-  color: #f2f2f2;\r\n-  text-decoration: underline;\r\n+button.preview:hover {\r\n+  background: #ddd;\r\n }\r\n \r\n-.footer hr {\r\n-  border: 0;\r\n-  border-top: 1px solid #8b8b8b;\r\n-  margin: 2rem 0 1rem;\r\n+button.add-cart {\r\n+  background: #b33636;\r\n+  color: #fff;\r\n }\r\n \r\n-.footer-bottom {\r\n-  text-align: center;\r\n-  font-size: 0.9rem;\r\n-  color: #ddd;\r\n+button.add-cart:hover {\r\n+  background: #a02020;\r\n }\r\n \r\n+\r\n   </style>\r\n </head>\r\n <body>\r\n <!-- Modal Background -->\r\n"
                },
                {
                    "date": 1756803203533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,159 +1,160 @@\n <!DOCTYPE html>\r\n <html lang=\"en\">\r\n+\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n   <title>Card Position Switch</title>\r\n   <style>\r\n-/* Modal Overlay */\r\n-.modal-overlay {\r\n-  position: fixed;\r\n-  top: 0;\r\n-  left: 0;\r\n-  width: 100%;\r\n-  height: 100%;\r\n-  background: rgba(0,0,0,0.4);\r\n-  display: flex;\r\n-  justify-content: center;\r\n-  align-items: center;\r\n-  z-index: 1000;\r\n-}\r\n+    /* Modal Overlay */\r\n+    .modal-overlay {\r\n+      position: fixed;\r\n+      top: 0;\r\n+      left: 0;\r\n+      width: 100%;\r\n+      height: 100%;\r\n+      background: rgba(0, 0, 0, 0.4);\r\n+      display: flex;\r\n+      justify-content: center;\r\n+      align-items: center;\r\n+      z-index: 1000;\r\n+    }\r\n \r\n-/* Modal Box */\r\n-.modal {\r\n-  background: #fff;\r\n-  border-radius: 10px;\r\n-  padding: 2rem;\r\n-  max-width: 700px;\r\n-  width: 90%;\r\n-  box-shadow: 0 10px 25px rgba(0,0,0,0.2);\r\n-}\r\n+    /* Modal Box */\r\n+    .modal {\r\n+      background: #fff;\r\n+      border-radius: 10px;\r\n+      padding: 2rem;\r\n+      max-width: 700px;\r\n+      width: 90%;\r\n+      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);\r\n+    }\r\n \r\n-/* Content Layout */\r\n-.modal-content {\r\n-  display: flex;\r\n-  gap: 1.5rem;\r\n-}\r\n+    /* Content Layout */\r\n+    .modal-content {\r\n+      display: flex;\r\n+      gap: 1.5rem;\r\n+    }\r\n \r\n-/* Book Image */\r\n-.book-image img {\r\n-  width: 140px;\r\n-  border-radius: 6px;\r\n-}\r\n+    /* Book Image */\r\n+    .book-image img {\r\n+      width: 140px;\r\n+      border-radius: 6px;\r\n+    }\r\n \r\n-/* Book Details */\r\n-.book-details {\r\n-  flex: 1;\r\n-}\r\n+    /* Book Details */\r\n+    .book-details {\r\n+      flex: 1;\r\n+    }\r\n \r\n-.book-details h2 {\r\n-  margin-bottom: 0.5rem;\r\n-  font-size: 1.4rem;\r\n-  color: #600000;\r\n-}\r\n+    .book-details h2 {\r\n+      margin-bottom: 0.5rem;\r\n+      font-size: 1.4rem;\r\n+      color: #600000;\r\n+    }\r\n \r\n-.price {\r\n-  font-weight: bold;\r\n-  font-size: 1.2rem;\r\n-  margin: 0.3rem 0;\r\n-}\r\n+    .price {\r\n+      font-weight: bold;\r\n+      font-size: 1.2rem;\r\n+      margin: 0.3rem 0;\r\n+    }\r\n \r\n-.rating {\r\n-  color: #944;\r\n-  margin-bottom: 1rem;\r\n-}\r\n+    .rating {\r\n+      color: #944;\r\n+      margin-bottom: 1rem;\r\n+    }\r\n \r\n-.description {\r\n-  margin: 1rem 0;\r\n-  line-height: 1.5;\r\n-  color: #444;\r\n-}\r\n+    .description {\r\n+      margin: 1rem 0;\r\n+      line-height: 1.5;\r\n+      color: #444;\r\n+    }\r\n \r\n-.meta {\r\n-  display: flex;\r\n-  flex-wrap: wrap;\r\n-  gap: 1rem 2rem;\r\n-  font-size: 0.9rem;\r\n-  margin-bottom: 1.5rem;\r\n-}\r\n+    .meta {\r\n+      display: flex;\r\n+      flex-wrap: wrap;\r\n+      gap: 1rem 2rem;\r\n+      font-size: 0.9rem;\r\n+      margin-bottom: 1.5rem;\r\n+    }\r\n \r\n-/* Buttons */\r\n-.actions {\r\n-  display: flex;\r\n-  gap: 1rem;\r\n-}\r\n+    /* Buttons */\r\n+    .actions {\r\n+      display: flex;\r\n+      gap: 1rem;\r\n+    }\r\n \r\n-.actions button {\r\n-  flex: 1;\r\n-  padding: 0.8rem 1rem;\r\n-  border-radius: 6px;\r\n-  border: none;\r\n-  font-size: 1rem;\r\n-  cursor: pointer;\r\n-  transition: background 0.3s;\r\n-}\r\n+    .actions button {\r\n+      flex: 1;\r\n+      padding: 0.8rem 1rem;\r\n+      border-radius: 6px;\r\n+      border: none;\r\n+      font-size: 1rem;\r\n+      cursor: pointer;\r\n+      transition: background 0.3s;\r\n+    }\r\n \r\n-button.preview {\r\n-  background: #eee;\r\n-  color: #333;\r\n-}\r\n+    button.preview {\r\n+      background: #eee;\r\n+      color: #333;\r\n+    }\r\n \r\n-button.preview:hover {\r\n-  background: #ddd;\r\n-}\r\n+    button.preview:hover {\r\n+      background: #ddd;\r\n+    }\r\n \r\n-button.add-cart {\r\n-  background: #b33636;\r\n-  color: #fff;\r\n-}\r\n+    button.add-cart {\r\n+      background: #b33636;\r\n+      color: #fff;\r\n+    }\r\n \r\n-button.add-cart:hover {\r\n-  background: #a02020;\r\n-}\r\n-\r\n-\r\n+    button.add-cart:hover {\r\n+      background: #a02020;\r\n+    }\r\n   </style>\r\n </head>\r\n+\r\n <body>\r\n-<!-- Modal Background -->\r\n-<div class=\"modal-overlay\">\r\n-  <div class=\"modal\">\r\n-    <div class=\"modal-content\">\r\n-      \r\n-      <!-- Book Cover -->\r\n-      <div class=\"book-image\">\r\n-        <img src=\"img/java-book.jpg\" alt=\"Java: The Complete Reference\">\r\n-      </div>\r\n+  <!-- Modal Background -->\r\n+  <div class=\"modal-overlay\">\r\n+    <div class=\"modal\">\r\n+      <div class=\"modal-content\">\r\n \r\n-      <!-- Book Info -->\r\n-      <div class=\"book-details\">\r\n-        <h2>Java: The Complete Reference</h2>\r\n-        <p class=\"price\">$54.99</p>\r\n-        <p class=\"rating\">‚≠ê ‚≠ê ‚≠ê ‚≠ê ‚≠ê 4.7/5</p>\r\n+        <!-- Book Cover -->\r\n+        <div class=\"book-image\">\r\n+          <img src=\"img/java-book.jpg\" alt=\"Java: The Complete Reference\">\r\n+        </div>\r\n \r\n-        <p class=\"description\">\r\n-          Comprehensive coverage of C++ programming language, including modern \r\n-          C++ features, templates, and STL.\r\n-        </p>\r\n+        <!-- Book Info -->\r\n+        <div class=\"book-details\">\r\n+          <h2>Java: The Complete Reference</h2>\r\n+          <p class=\"price\">$54.99</p>\r\n+          <p class=\"rating\">‚≠ê ‚≠ê ‚≠ê ‚≠ê ‚≠ê 4.7/5</p>\r\n \r\n-        <div class=\"meta\">\r\n-          <p><strong>Year:</strong> 2021</p>\r\n-          <p><strong>Pages:</strong> 1248</p>\r\n-          <p><strong>ISBN:</strong> 978-1260454468</p>\r\n-          <p><strong>Category:</strong> JAVA</p>\r\n-        </div>\r\n+          <p class=\"description\">\r\n+            Comprehensive coverage of C++ programming language, including modern\r\n+            C++ features, templates, and STL.\r\n+          </p>\r\n \r\n-        <!-- Action Buttons -->\r\n-        <div class=\"actions\">\r\n-          <button class=\"preview\">üëÅ Preview</button>\r\n-          <button class=\"add-cart\">üõí Add to cart</button>\r\n+          <div class=\"meta\">\r\n+            <p><strong>Year:</strong> 2021</p>\r\n+            <p><strong>Pages:</strong> 1248</p>\r\n+            <p><strong>ISBN:</strong> 978-1260454468</p>\r\n+            <p><strong>Category:</strong> JAVA</p>\r\n+          </div>\r\n+\r\n+          <!-- Action Buttons -->\r\n+          <div class=\"actions\">\r\n+            <button class=\"preview\">üëÅ Preview</button>\r\n+            <button class=\"add-cart\">üõí Add to cart</button>\r\n+          </div>\r\n         </div>\r\n       </div>\r\n     </div>\r\n   </div>\r\n-</div>\r\n \r\n </body>\r\n+\r\n </html>\r\n \r\n-</html>\r\n+</html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756803225688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n       <div class=\"modal-content\">\r\n \r\n         <!-- Book Cover -->\r\n         <div class=\"book-image\">\r\n-          <img src=\"img/java-book.jpg\" alt=\"Java: The Complete Reference\">\r\n+          <img src=\"img/\" alt=\"Java: The Complete Reference\">\r\n         </div>\r\n \r\n         <!-- Book Info -->\r\n         <div class=\"book-details\">\r\n"
                },
                {
                    "date": 1756803235915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n       <div class=\"modal-content\">\r\n \r\n         <!-- Book Cover -->\r\n         <div class=\"book-image\">\r\n-          <img src=\"img/\" alt=\"Java: The Complete Reference\">\r\n+          <img src=\"img/books/Java Complete.jpg\" alt=\"Java: The Complete Reference\">\r\n         </div>\r\n \r\n         <!-- Book Info -->\r\n         <div class=\"book-details\">\r\n"
                },
                {
                    "date": 1756803290576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,113 +5,9 @@\n   <meta charset=\"UTF-8\">\r\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n   <title>Card Position Switch</title>\r\n   <style>\r\n-    /* Modal Overlay */\r\n-    .modal-overlay {\r\n-      position: fixed;\r\n-      top: 0;\r\n-      left: 0;\r\n-      width: 100%;\r\n-      height: 100%;\r\n-      background: rgba(0, 0, 0, 0.4);\r\n-      display: flex;\r\n-      justify-content: center;\r\n-      align-items: center;\r\n-      z-index: 1000;\r\n-    }\r\n-\r\n-    /* Modal Box */\r\n-    .modal {\r\n-      background: #fff;\r\n-      border-radius: 10px;\r\n-      padding: 2rem;\r\n-      max-width: 700px;\r\n-      width: 90%;\r\n-      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);\r\n-    }\r\n-\r\n-    /* Content Layout */\r\n-    .modal-content {\r\n-      display: flex;\r\n-      gap: 1.5rem;\r\n-    }\r\n-\r\n-    /* Book Image */\r\n-    .book-image img {\r\n-      width: 140px;\r\n-      border-radius: 6px;\r\n-    }\r\n-\r\n-    /* Book Details */\r\n-    .book-details {\r\n-      flex: 1;\r\n-    }\r\n-\r\n-    .book-details h2 {\r\n-      margin-bottom: 0.5rem;\r\n-      font-size: 1.4rem;\r\n-      color: #600000;\r\n-    }\r\n-\r\n-    .price {\r\n-      font-weight: bold;\r\n-      font-size: 1.2rem;\r\n-      margin: 0.3rem 0;\r\n-    }\r\n-\r\n-    .rating {\r\n-      color: #944;\r\n-      margin-bottom: 1rem;\r\n-    }\r\n-\r\n-    .description {\r\n-      margin: 1rem 0;\r\n-      line-height: 1.5;\r\n-      color: #444;\r\n-    }\r\n-\r\n-    .meta {\r\n-      display: flex;\r\n-      flex-wrap: wrap;\r\n-      gap: 1rem 2rem;\r\n-      font-size: 0.9rem;\r\n-      margin-bottom: 1.5rem;\r\n-    }\r\n-\r\n-    /* Buttons */\r\n-    .actions {\r\n-      display: flex;\r\n-      gap: 1rem;\r\n-    }\r\n-\r\n-    .actions button {\r\n-      flex: 1;\r\n-      padding: 0.8rem 1rem;\r\n-      border-radius: 6px;\r\n-      border: none;\r\n-      font-size: 1rem;\r\n-      cursor: pointer;\r\n-      transition: background 0.3s;\r\n-    }\r\n-\r\n-    button.preview {\r\n-      background: #eee;\r\n-      color: #333;\r\n-    }\r\n-\r\n-    button.preview:hover {\r\n-      background: #ddd;\r\n-    }\r\n-\r\n-    button.add-cart {\r\n-      background: #b33636;\r\n-      color: #fff;\r\n-    }\r\n-\r\n-    button.add-cart:hover {\r\n-      background: #a02020;\r\n-    }\r\n+ \r\n   </style>\r\n </head>\r\n \r\n <body>\r\n"
                },
                {
                    "date": 1756803384840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,113 @@\n   <meta charset=\"UTF-8\">\r\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n   <title>Card Position Switch</title>\r\n   <style>\r\n- \r\n+    /* Modal Overlay */\r\n+    .modal-overlay {\r\n+      position: fixed;\r\n+      top: 0;\r\n+      left: 0;\r\n+      width: 100%;\r\n+      height: 100%;\r\n+      background: rgba(0, 0, 0, 0.4);\r\n+      display: flex;\r\n+      justify-content: center;\r\n+      align-items: center;\r\n+      z-index: 1000;\r\n+    }\r\n+\r\n+    /* Modal Box */\r\n+    .modal {\r\n+      background: #fff;\r\n+      border-radius: 10px;\r\n+      padding: 2rem;\r\n+      max-width: 700px;\r\n+      width: 90%;\r\n+      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);\r\n+    }\r\n+\r\n+    /* Content Layout */\r\n+    .modal-content {\r\n+      display: flex;\r\n+      gap: 1.5rem;\r\n+    }\r\n+\r\n+    /* Book Image */\r\n+    .book-image img {\r\n+      width: 140px;\r\n+      border-radius: 6px;\r\n+    }\r\n+\r\n+    /* Book Details */\r\n+    .book-details {\r\n+      flex: 1;\r\n+    }\r\n+\r\n+    .book-details h2 {\r\n+      margin-bottom: 0.5rem;\r\n+      font-size: 1.4rem;\r\n+      color: #600000;\r\n+    }\r\n+\r\n+    .price {\r\n+      font-weight: bold;\r\n+      font-size: 1.2rem;\r\n+      margin: 0.3rem 0;\r\n+    }\r\n+\r\n+    .rating {\r\n+      color: #944;\r\n+      margin-bottom: 1rem;\r\n+    }\r\n+\r\n+    .description {\r\n+      margin: 1rem 0;\r\n+      line-height: 1.5;\r\n+      color: #444;\r\n+    }\r\n+\r\n+    .meta {\r\n+      display: flex;\r\n+      flex-wrap: wrap;\r\n+      gap: 1rem 2rem;\r\n+      font-size: 0.9rem;\r\n+      margin-bottom: 1.5rem;\r\n+    }\r\n+\r\n+    /* Buttons */\r\n+    .actions {\r\n+      display: flex;\r\n+      gap: 1rem;\r\n+    }\r\n+\r\n+    .actions button {\r\n+      flex: 1;\r\n+      padding: 0.8rem 1rem;\r\n+      border-radius: 6px;\r\n+      border: none;\r\n+      font-size: 1rem;\r\n+      cursor: pointer;\r\n+      transition: background 0.3s;\r\n+    }\r\n+\r\n+    button.preview {\r\n+      background: #eee;\r\n+      color: #333;\r\n+    }\r\n+\r\n+    button.preview:hover {\r\n+      background: #ddd;\r\n+    }\r\n+\r\n+    button.add-cart {\r\n+      background: #b33636;\r\n+      color: #fff;\r\n+    }\r\n+\r\n+    button.add-cart:hover {\r\n+      background: #a02020;\r\n+    }\r\n   </style>\r\n </head>\r\n \r\n <body>\r\n"
                },
                {
                    "date": 1756803432396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n       transition: background 0.3s;\r\n     }\r\n \r\n     button.preview {\r\n-      background: #eee;\r\n+      background: gfray;\r\n       color: #333;\r\n     }\r\n \r\n     button.preview:hover {\r\n"
                },
                {
                    "date": 1756805649554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,160 +1,175 @@\n <!DOCTYPE html>\r\n <html lang=\"en\">\r\n-\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n-  <title>Card Position Switch</title>\r\n+  <title>Book Cart Sidebar</title>\r\n   <style>\r\n-    /* Modal Overlay */\r\n-    .modal-overlay {\r\n+    body {\r\n+      margin: 0;\r\n+      font-family: Arial, sans-serif;\r\n+    }\r\n+\r\n+    /* Sidebar overlay */\r\n+    .cart-sidebar {\r\n       position: fixed;\r\n       top: 0;\r\n-      left: 0;\r\n-      width: 100%;\r\n+      right: -400px; /* hidden by default */\r\n+      width: 350px;\r\n       height: 100%;\r\n-      background: rgba(0, 0, 0, 0.4);\r\n+      background: #fff;\r\n+      box-shadow: -2px 0 8px rgba(0, 0, 0, 0.3);\r\n+      transition: right 0.3s ease-in-out;\r\n+      z-index: 1000;\r\n       display: flex;\r\n-      justify-content: center;\r\n-      align-items: center;\r\n-      z-index: 1000;\r\n+      flex-direction: column;\r\n     }\r\n \r\n-    /* Modal Box */\r\n-    .modal {\r\n-      background: #fff;\r\n-      border-radius: 10px;\r\n-      padding: 2rem;\r\n-      max-width: 700px;\r\n-      width: 90%;\r\n-      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);\r\n+    .cart-sidebar.open {\r\n+      right: 0; /* slide in */\r\n     }\r\n \r\n-    /* Content Layout */\r\n-    .modal-content {\r\n+    /* Header */\r\n+    .cart-header {\r\n+      background-color: #825E5E;\r\n+      color: #fff;\r\n+      padding: 1rem;\r\n+      font-size: 1.2rem;\r\n+      font-weight: bold;\r\n+    }\r\n+\r\n+    /* Cart items */\r\n+    .cart-items {\r\n+      flex: 1;\r\n+      overflow-y: auto;\r\n+      padding: 1rem;\r\n+    }\r\n+\r\n+    .cart-item {\r\n       display: flex;\r\n-      gap: 1.5rem;\r\n+      align-items: center;\r\n+      margin-bottom: 1rem;\r\n+      border-bottom: 1px solid #ccc;\r\n+      padding-bottom: 1rem;\r\n     }\r\n \r\n-    /* Book Image */\r\n-    .book-image img {\r\n-      width: 140px;\r\n-      border-radius: 6px;\r\n+    .cart-item img {\r\n+      width: 70px;\r\n+      margin-right: 1rem;\r\n     }\r\n \r\n-    /* Book Details */\r\n-    .book-details {\r\n+    .cart-item-info {\r\n       flex: 1;\r\n     }\r\n \r\n-    .book-details h2 {\r\n-      margin-bottom: 0.5rem;\r\n-      font-size: 1.4rem;\r\n-      color: #600000;\r\n+    .cart-item-info h4 {\r\n+      margin: 0 0 0.3rem;\r\n+      font-size: 1rem;\r\n+      color: #5c4343;\r\n     }\r\n \r\n-    .price {\r\n+    .cart-item-info p {\r\n+      margin: 0;\r\n       font-weight: bold;\r\n-      font-size: 1.2rem;\r\n-      margin: 0.3rem 0;\r\n+      color: #5c4343;\r\n     }\r\n \r\n-    .rating {\r\n-      color: #944;\r\n-      margin-bottom: 1rem;\r\n+    .remove-btn {\r\n+      background: #b43b3b;\r\n+      color: white;\r\n+      border: none;\r\n+      padding: 0.4rem 0.8rem;\r\n+      border-radius: 5px;\r\n+      cursor: pointer;\r\n+      font-size: 0.85rem;\r\n     }\r\n \r\n-    .description {\r\n-      margin: 1rem 0;\r\n-      line-height: 1.5;\r\n-      color: #444;\r\n+    /* Footer */\r\n+    .cart-footer {\r\n+      padding: 1rem;\r\n+      border-top: 1px solid #ccc;\r\n     }\r\n \r\n-    .meta {\r\n+    .cart-total {\r\n       display: flex;\r\n-      flex-wrap: wrap;\r\n-      gap: 1rem 2rem;\r\n-      font-size: 0.9rem;\r\n-      margin-bottom: 1.5rem;\r\n+      justify-content: space-between;\r\n+      margin-bottom: 1rem;\r\n+      font-size: 1.1rem;\r\n+      font-weight: bold;\r\n     }\r\n \r\n-    /* Buttons */\r\n-    .actions {\r\n-      display: flex;\r\n-      gap: 1rem;\r\n+    .cart-total span:last-child {\r\n+      color: green;\r\n     }\r\n \r\n-    .actions button {\r\n-      flex: 1;\r\n-      padding: 0.8rem 1rem;\r\n-      border-radius: 6px;\r\n+    .checkout-btn {\r\n+      width: 100%;\r\n\\ No newline at end of file\n+      padding: 0.8rem;\r\n+      background: orange;\r\n+      color: white;\r\n       border: none;\r\n+      border-radius: 8px;\r\n       font-size: 1rem;\r\n       cursor: pointer;\r\n-      transition: background 0.3s;\r\n     }\r\n \r\n-    button.preview {\r\n-      background: gfray;\r\n-      color: #333;\r\n+    /* Toggle button */\r\n+    .open-cart-btn {\r\n+      margin: 1rem;\r\n+      padding: 0.6rem 1rem;\r\n+      background: #825E5E;\r\n+      color: white;\r\n+      border: none;\r\n+      border-radius: 5px;\r\n+      cursor: pointer;\r\n     }\r\n-\r\n-    button.preview:hover {\r\n-      background: #ddd;\r\n-    }\r\n-\r\n-    button.add-cart {\r\n-      background: #b33636;\r\n-      color: #fff;\r\n-    }\r\n-\r\n-    button.add-cart:hover {\r\n-      background: #a02020;\r\n-    }\r\n   </style>\r\n </head>\r\n-\r\n <body>\r\n-  <!-- Modal Background -->\r\n-  <div class=\"modal-overlay\">\r\n-    <div class=\"modal\">\r\n-      <div class=\"modal-content\">\r\n \r\n-        <!-- Book Cover -->\r\n-        <div class=\"book-image\">\r\n-          <img src=\"img/books/Java Complete.jpg\" alt=\"Java: The Complete Reference\">\r\n-        </div>\r\n+  <!-- Toggle button -->\r\n+  <button class=\"open-cart-btn\" onclick=\"toggleCart()\">Open Cart</button>\r\n \r\n-        <!-- Book Info -->\r\n-        <div class=\"book-details\">\r\n-          <h2>Java: The Complete Reference</h2>\r\n-          <p class=\"price\">$54.99</p>\r\n-          <p class=\"rating\">‚≠ê ‚≠ê ‚≠ê ‚≠ê ‚≠ê 4.7/5</p>\r\n+  <!-- Sidebar -->\r\n+  <div class=\"cart-sidebar\" id=\"cartSidebar\">\r\n+    <div class=\"cart-header\">\r\n+      Book Cart\r\n+    </div>\r\n \r\n-          <p class=\"description\">\r\n-            Comprehensive coverage of C++ programming language, including modern\r\n-            C++ features, templates, and STL.\r\n-          </p>\r\n+    <div class=\"cart-items\">\r\n+      <div class=\"cart-item\">\r\n+        <img src=\"https://via.placeholder.com/70x100\" alt=\"Book\">\r\n+        <div class=\"cart-item-info\">\r\n+          <h4>Java: The Complete Reference</h4>\r\n+          <p>$54.99</p>\r\n+          <button class=\"remove-btn\">Remove</button>\r\n+        </div>\r\n+      </div>\r\n \r\n-          <div class=\"meta\">\r\n-            <p><strong>Year:</strong> 2021</p>\r\n-            <p><strong>Pages:</strong> 1248</p>\r\n-            <p><strong>ISBN:</strong> 978-1260454468</p>\r\n-            <p><strong>Category:</strong> JAVA</p>\r\n-          </div>\r\n-\r\n-          <!-- Action Buttons -->\r\n-          <div class=\"actions\">\r\n-            <button class=\"preview\">üëÅ Preview</button>\r\n-            <button class=\"add-cart\">üõí Add to cart</button>\r\n-          </div>\r\n+      <div class=\"cart-item\">\r\n+        <img src=\"https://via.placeholder.com/70x100\" alt=\"Book\">\r\n+        <div class=\"cart-item-info\">\r\n+          <h4>Java: The Complete Reference</h4>\r\n+          <p>$54.99</p>\r\n+          <button class=\"remove-btn\">Remove</button>\r\n         </div>\r\n       </div>\r\n     </div>\r\n+\r\n+    <div class=\"cart-footer\">\r\n+      <div class=\"cart-total\">\r\n+        <span>Total</span>\r\n+        <span>$109.98</span>\r\n+      </div>\r\n+      <button class=\"checkout-btn\">Checkout</button>\r\n+    </div>\r\n   </div>\r\n \r\n+  <script>\r\n+    function toggleCart() {\r\n+      document.getElementById('cartSidebar').classList.toggle('open');\r\n+    }\r\n+  </script>\r\n+\r\n </body>\r\n-\r\n </html>\r\n-\r\n-</html>\n"
                },
                {
                    "date": 1756824365966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,41 @@\n       <div class=\"cart-item\">\r\n         <img src=\"https://via.placeholder.com/70x100\" alt=\"Book\">\r\n         <div class=\"cart-item-info\">\r\n           <h4>Java: The Complete Reference</h4>\r\n-          <p>$54.99</p>\r\n+          <p>$54.99</p><!DOCTYPE html>\r\n+<html>\r\n+<head>\r\n+<style>\r\n+.container {\r\n+  width: 200px;\r\n+  padding: 10px;\r\n+  background-color: #A52A2A; /* Brown color */\r\n+  border: 1px solid black;\r\n+}\r\n+\r\n+.button {\r\n+  background-color: #F5F5DC; /* Beige color */\r\n+  color: black;\r\n+  padding: 10px 20px;\r\n+  margin: 5px 0;\r\n+  text-align: center;\r\n+  text-decoration: none;\r\n+  display: block;\r\n+  border: none;\r\n+  cursor: pointer;\r\n+}\r\n+</style>\r\n+</head>\r\n+<body>\r\n+\r\n+<div class=\"container\">\r\n+  <button class=\"button\">Sign In</button>\r\n+  <button class=\"button\">Create Account</button>\r\n+</div>\r\n+\r\n+</body>\r\n+</html>\r\n           <button class=\"remove-btn\">Remove</button>\r\n         </div>\r\n       </div>\r\n \r\n@@ -171,5 +203,5 @@\n     }\r\n   </script>\r\n \r\n </body>\r\n-</html>\n\\ No newline at end of file\n+</html>\r\n"
                },
                {
                    "date": 1756824417365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,19 @@\n   text-decoration: none;\r\n   display: block;\r\n   border: none;\r\n   cursor: pointer;\r\n+  transition: background-color 0.3s ease; /* Smooth transition */\r\n }\r\n+\r\n+.button:hover {\r\n+  background-color: #E8E2D0; /* Lighter beige on hover */\r\n+}\r\n+\r\n+.button:active {\r\n+  background-color: #D1C9BE; /* Even lighter beige when active */\r\n+  transform: scale(0.95); /* Slightly scale down on click */\r\n+}\r\n </style>\r\n </head>\r\n <body>\r\n \r\n"
                },
                {
                    "date": 1756824462179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,178 +1,39 @@\n <!DOCTYPE html>\r\n-<html lang=\"en\">\r\n-<head>\r\n-  <meta charset=\"UTF-8\">\r\n-  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n-  <title>Book Cart Sidebar</title>\r\n-  <style>\r\n-    body {\r\n-      margin: 0;\r\n-      font-family: Arial, sans-serif;\r\n-    }\r\n-\r\n-    /* Sidebar overlay */\r\n-    .cart-sidebar {\r\n-      position: fixed;\r\n-      top: 0;\r\n-      right: -400px; /* hidden by default */\r\n-      width: 350px;\r\n-      height: 100%;\r\n-      background: #fff;\r\n-      box-shadow: -2px 0 8px rgba(0, 0, 0, 0.3);\r\n-      transition: right 0.3s ease-in-out;\r\n-      z-index: 1000;\r\n-      display: flex;\r\n-      flex-direction: column;\r\n-    }\r\n-\r\n-    .cart-sidebar.open {\r\n-      right: 0; /* slide in */\r\n-    }\r\n-\r\n-    /* Header */\r\n-    .cart-header {\r\n-      background-color: #825E5E;\r\n-      color: #fff;\r\n-      padding: 1rem;\r\n-      font-size: 1.2rem;\r\n-      font-weight: bold;\r\n-    }\r\n-\r\n-    /* Cart items */\r\n-    .cart-items {\r\n-      flex: 1;\r\n-      overflow-y: auto;\r\n-      padding: 1rem;\r\n-    }\r\n-\r\n-    .cart-item {\r\n-      display: flex;\r\n-      align-items: center;\r\n-      margin-bottom: 1rem;\r\n-      border-bottom: 1px solid #ccc;\r\n-      padding-bottom: 1rem;\r\n-    }\r\n-\r\n-    .cart-item img {\r\n-      width: 70px;\r\n-      margin-right: 1rem;\r\n-    }\r\n-\r\n-    .cart-item-info {\r\n-      flex: 1;\r\n-    }\r\n-\r\n-    .cart-item-info h4 {\r\n-      margin: 0 0 0.3rem;\r\n-      font-size: 1rem;\r\n-      color: #5c4343;\r\n-    }\r\n-\r\n-    .cart-item-info p {\r\n-      margin: 0;\r\n-      font-weight: bold;\r\n-      color: #5c4343;\r\n-    }\r\n-\r\n-    .remove-btn {\r\n-      background: #b43b3b;\r\n-      color: white;\r\n-      border: none;\r\n-      padding: 0.4rem 0.8rem;\r\n-      border-radius: 5px;\r\n-      cursor: pointer;\r\n-      font-size: 0.85rem;\r\n-    }\r\n-\r\n-    /* Footer */\r\n-    .cart-footer {\r\n-      padding: 1rem;\r\n-      border-top: 1px solid #ccc;\r\n-    }\r\n-\r\n-    .cart-total {\r\n-      display: flex;\r\n-      justify-content: space-between;\r\n-      margin-bottom: 1rem;\r\n-      font-size: 1.1rem;\r\n-      font-weight: bold;\r\n-    }\r\n-\r\n-    .cart-total span:last-child {\r\n-      color: green;\r\n-    }\r\n-\r\n-    .checkout-btn {\r\n-      width: 100%;\r\n-      padding: 0.8rem;\r\n-      background: orange;\r\n-      color: white;\r\n-      border: none;\r\n-      border-radius: 8px;\r\n-      font-size: 1rem;\r\n-      cursor: pointer;\r\n-    }\r\n-\r\n-    /* Toggle button */\r\n-    .open-cart-btn {\r\n-      margin: 1rem;\r\n-      padding: 0.6rem 1rem;\r\n-      background: #825E5E;\r\n-      color: white;\r\n-      border: none;\r\n-      border-radius: 5px;\r\n-      cursor: pointer;\r\n-    }\r\n-  </style>\r\n-</head>\r\n-<body>\r\n-\r\n-  <!-- Toggle button -->\r\n-  <button class=\"open-cart-btn\" onclick=\"toggleCart()\">Open Cart</button>\r\n-\r\n-  <!-- Sidebar -->\r\n-  <div class=\"cart-sidebar\" id=\"cartSidebar\">\r\n-    <div class=\"cart-header\">\r\n-      Book Cart\r\n-    </div>\r\n-\r\n-    <div class=\"cart-items\">\r\n-      <div class=\"cart-item\">\r\n-        <img src=\"https://via.placeholder.com/70x100\" alt=\"Book\">\r\n-        <div class=\"cart-item-info\">\r\n-          <h4>Java: The Complete Reference</h4>\r\n-          <p>$54.99</p><!DOCTYPE html>\r\n <html>\r\n <head>\r\n <style>\r\n .container {\r\n-  width: 200px;\r\n-  padding: 10px;\r\n-  background-color: #A52A2A; /* Brown color */\r\n-  border: 1px solid black;\r\n+  width: 220px;\r\n+  padding: 20px;\r\n+  background-color: #4A3026; /* Dark brown */\r\n+  border-radius: 10px;\r\n+  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Subtle shadow */\r\n }\r\n \r\n .button {\r\n-  background-color: #F5F5DC; /* Beige color */\r\n-  color: black;\r\n-  padding: 10px 20px;\r\n-  margin: 5px 0;\r\n+  background-color: #F0EAD6; /* Light beige */\r\n+  color: #333; /* Dark gray text */\r\n+  padding: 12px 24px;\r\n+  margin: 8px 0;\r\n   text-align: center;\r\n   text-decoration: none;\r\n   display: block;\r\n   border: none;\r\n+  border-radius: 6px;\r\n   cursor: pointer;\r\n-  transition: background-color 0.3s ease; /* Smooth transition */\r\n+  transition: background-color 0.3s ease, transform 0.1s ease;\r\n+  font-size: 16px;\r\n+  font-weight: 600;\r\n }\r\n \r\n .button:hover {\r\n-  background-color: #E8E2D0; /* Lighter beige on hover */\r\n+  background-color: #E0D8C4; /* Slightly darker beige on hover */\r\n }\r\n \r\n .button:active {\r\n   background-color: #D1C9BE; /* Even lighter beige when active */\r\n-  transform: scale(0.95); /* Slightly scale down on click */\r\n+  transform: scale(0.97); /* Slight scale down on click */\r\n }\r\n </style>\r\n </head>\r\n <body>\r\n@@ -182,36 +43,5 @@\n   <button class=\"button\">Create Account</button>\r\n </div>\r\n \r\n </body>\r\n-</html>\r\n-          <button class=\"remove-btn\">Remove</button>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <div class=\"cart-item\">\r\n-        <img src=\"https://via.placeholder.com/70x100\" alt=\"Book\">\r\n-        <div class=\"cart-item-info\">\r\n-          <h4>Java: The Complete Reference</h4>\r\n-          <p>$54.99</p>\r\n-          <button class=\"remove-btn\">Remove</button>\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-\r\n-    <div class=\"cart-footer\">\r\n-      <div class=\"cart-total\">\r\n-        <span>Total</span>\r\n-        <span>$109.98</span>\r\n-      </div>\r\n-      <button class=\"checkout-btn\">Checkout</button>\r\n-    </div>\r\n-  </div>\r\n-\r\n-  <script>\r\n-    function toggleCart() {\r\n-      document.getElementById('cartSidebar').classList.toggle('open');\r\n-    }\r\n-  </script>\r\n-\r\n-</body>\r\n-</html>\r\n+</html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756824498716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,28 +2,28 @@\n <html>\r\n <head>\r\n <style>\r\n .container {\r\n-  width: 220px;\r\n-  padding: 20px;\r\n+  width: 15rem;\r\n+  padding: 1.25rem;\r\n   background-color: #4A3026; /* Dark brown */\r\n-  border-radius: 10px;\r\n-  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Subtle shadow */\r\n+  border-radius: 0.625rem;\r\n+  box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.3); /* Subtle shadow */\r\n }\r\n \r\n .button {\r\n   background-color: #F0EAD6; /* Light beige */\r\n   color: #333; /* Dark gray text */\r\n-  padding: 12px 24px;\r\n-  margin: 8px 0;\r\n+  padding: 0.75rem 1.5rem;\r\n+  margin: 0.5rem 0;\r\n   text-align: center;\r\n   text-decoration: none;\r\n   display: block;\r\n   border: none;\r\n-  border-radius: 6px;\r\n+  border-radius: 0.375rem;\r\n   cursor: pointer;\r\n   transition: background-color 0.3s ease, transform 0.1s ease;\r\n-  font-size: 16px;\r\n+  font-size: 1rem;\r\n   font-weight: 600;\r\n }\r\n \r\n .button:hover {\r\n"
                },
                {
                    "date": 1756824518316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n   text-align: center;\r\n   text-decoration: none;\r\n   display: block;\r\n   border: none;\r\n+  width: fit-content;\r\n   border-radius: 0.375rem;\r\n   cursor: pointer;\r\n   transition: background-color 0.3s ease, transform 0.1s ease;\r\n   font-size: 1rem;\r\n"
                },
                {
                    "date": 1756824528562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   text-align: center;\r\n   text-decoration: none;\r\n   display: block;\r\n   border: none;\r\n-  width: fit-content;\r\n+  width: 100%;\r\n   border-radius: 0.375rem;\r\n   cursor: pointer;\r\n   transition: background-color 0.3s ease, transform 0.1s ease;\r\n   font-size: 1rem;\r\n"
                },
                {
                    "date": 1756824552752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.3); /* Subtle shadow */\r\n }\r\n \r\n .button {\r\n-  background-color: #F0EAD6; /* Light beige */\r\n+  background-color: #825E5E; /* Light beige */\r\n   color: #333; /* Dark gray text */\r\n   padding: 0.75rem 1.5rem;\r\n   margin: 0.5rem 0;\r\n   text-align: center;\r\n"
                },
                {
                    "date": 1756824560808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,15 +4,15 @@\n <style>\r\n .container {\r\n   width: 15rem;\r\n   padding: 1.25rem;\r\n-  background-color: #4A3026; /* Dark brown */\r\n+  background-color: #825E5E; /* Dark brown */\r\n   border-radius: 0.625rem;\r\n   box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.3); /* Subtle shadow */\r\n }\r\n \r\n .button {\r\n-  background-color: #825E5E; /* Light beige */\r\n+  background-color: #F0EAD6; /* Light beige */\r\n   color: #333; /* Dark gray text */\r\n   padding: 0.75rem 1.5rem;\r\n   margin: 0.5rem 0;\r\n   text-align: center;\r\n"
                },
                {
                    "date": 1756825640815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n <!DOCTYPE html>\r\n <html>\r\n <head>\r\n <style>\r\n-.container {\r\n+.btn-container {\r\n   width: 15rem;\r\n   padding: 1.25rem;\r\n   background-color: #825E5E; /* Dark brown */\r\n   border-radius: 0.625rem;\r\n"
                },
                {
                    "date": 1756825657843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n </style>\r\n </head>\r\n <body>\r\n \r\n-<div class=\"container\">\r\n+<div class=\"btn-container\">\r\n   <button class=\"button\">Sign In</button>\r\n   <button class=\"button\">Create Account</button>\r\n </div>\r\n \r\n"
                },
                {
                    "date": 1756826154002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,55 @@\n <!DOCTYPE html>\r\n <html>\r\n <head>\r\n <style>\r\n-.btn-container {\r\n+.container {\r\n   width: 15rem;\r\n   padding: 1.25rem;\r\n-  background-color: #825E5E; /* Dark brown */\r\n+  background-color: #D8BFD8; /* Light purple/lavender */\r\n   border-radius: 0.625rem;\r\n   box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.3); /* Subtle shadow */\r\n+  text-align: center;\r\n }\r\n \r\n+.username {\r\n+  font-size: 1.2rem;\r\n+  font-weight: 600;\r\n+  color: #555; /* Dark gray */\r\n+  margin-bottom: 0.75rem;\r\n+}\r\n+\r\n .button {\r\n-  background-color: #F0EAD6; /* Light beige */\r\n+  background-color: #F0E68C; /* Khaki/light goldenrod */\r\n   color: #333; /* Dark gray text */\r\n   padding: 0.75rem 1.5rem;\r\n   margin: 0.5rem 0;\r\n   text-align: center;\r\n   text-decoration: none;\r\n-  display: block;\r\n+  display: inline-block; /* Changed to inline-block */\r\n   border: none;\r\n-  width: 100%;\r\n   border-radius: 0.375rem;\r\n   cursor: pointer;\r\n   transition: background-color 0.3s ease, transform 0.1s ease;\r\n   font-size: 1rem;\r\n   font-weight: 600;\r\n }\r\n \r\n .button:hover {\r\n-  background-color: #E0D8C4; /* Slightly darker beige on hover */\r\n+  background-color: #E0D080; /* Slightly darker goldenrod on hover */\r\n }\r\n \r\n .button:active {\r\n-  background-color: #D1C9BE; /* Even lighter beige when active */\r\n+  background-color: #C0B470; /* Even darker goldenrod when active */\r\n   transform: scale(0.97); /* Slight scale down on click */\r\n }\r\n </style>\r\n </head>\r\n <body>\r\n \r\n-<div class=\"btn-container\">\r\n-  <button class=\"button\">Sign In</button>\r\n-  <button class=\"button\">Create Account</button>\r\n+<div class=\"container\">\r\n+  <div class=\"username\">Vincent James Manalastas</div>\r\n+  <button class=\"button\">Log Out</button>\r\n </div>\r\n \r\n </body>\r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756826223711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,25 @@\n <!DOCTYPE html>\r\n <html>\r\n <head>\r\n <style>\r\n-.container {\r\n+.login-container {\r\n   width: 15rem;\r\n   padding: 1.25rem;\r\n   background-color: #D8BFD8; /* Light purple/lavender */\r\n   border-radius: 0.625rem;\r\n   box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.3); /* Subtle shadow */\r\n   text-align: center;\r\n }\r\n \r\n-.username {\r\n+.login-username {\r\n   font-size: 1.2rem;\r\n   font-weight: 600;\r\n   color: #555; /* Dark gray */\r\n   margin-bottom: 0.75rem;\r\n }\r\n \r\n-.button {\r\n+.login-button {\r\n   background-color: #F0E68C; /* Khaki/light goldenrod */\r\n   color: #333; /* Dark gray text */\r\n   padding: 0.75rem 1.5rem;\r\n   margin: 0.5rem 0;\r\n@@ -33,23 +33,23 @@\n   font-size: 1rem;\r\n   font-weight: 600;\r\n }\r\n \r\n-.button:hover {\r\n+.login-button:hover {\r\n   background-color: #E0D080; /* Slightly darker goldenrod on hover */\r\n }\r\n \r\n-.button:active {\r\n+.login-button:active {\r\n   background-color: #C0B470; /* Even darker goldenrod when active */\r\n   transform: scale(0.97); /* Slight scale down on click */\r\n }\r\n </style>\r\n </head>\r\n <body>\r\n \r\n-<div class=\"container\">\r\n-  <div class=\"username\">Vincent James Manalastas</div>\r\n-  <button class=\"button\">Log Out</button>\r\n+<div class=\"login-container\">\r\n+  <div class=\"login-username\">Vincent James Manalastas</div>\r\n+  <button class=\"login-button\">Log Out</button>\r\n </div>\r\n \r\n </body>\r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756826232388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n <style>\r\n .login-container {\r\n   width: 15rem;\r\n   padding: 1.25rem;\r\n+  fon\r\n   background-color: #D8BFD8; /* Light purple/lavender */\r\n   border-radius: 0.625rem;\r\n   box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.3); /* Subtle shadow */\r\n   text-align: center;\r\n"
                },
                {
                    "date": 1756826238898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n <style>\r\n .login-container {\r\n   width: 15rem;\r\n   padding: 1.25rem;\r\n-  fon\r\n+  font-family: 'I';\r\n   background-color: #D8BFD8; /* Light purple/lavender */\r\n   border-radius: 0.625rem;\r\n   box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.3); /* Subtle shadow */\r\n   text-align: center;\r\n"
                },
                {
                    "date": 1756826246071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n <style>\r\n .login-container {\r\n   width: 15rem;\r\n   padding: 1.25rem;\r\n-  font-family: 'I';\r\n+  font-family: 'Inter Regular';\r\n   background-color: #D8BFD8; /* Light purple/lavender */\r\n   border-radius: 0.625rem;\r\n   box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.3); /* Subtle shadow */\r\n   text-align: center;\r\n"
                },
                {
                    "date": 1756826278142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n .login-container {\r\n   width: 15rem;\r\n   padding: 1.25rem;\r\n   font-family: 'Inter Regular';\r\n-  background-color: #D8BFD8; /* Light purple/lavender */\r\n+  background-color: #EDE9E9; /* Light purple/lavender */\r\n   border-radius: 0.625rem;\r\n   box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.3); /* Subtle shadow */\r\n   text-align: center;\r\n }\r\n"
                },
                {
                    "date": 1756830863372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,11 +46,27 @@\n </style>\r\n </head>\r\n <body>\r\n \r\n-<div class=\"login-container\">\r\n-  <div class=\"login-username\">Vincent James Manalastas</div>\r\n-  <button class=\"login-button\">Log Out</button>\r\n-</div>\r\n+<!DOCTYPE html>\r\n+<html lang=\"en\">\r\n+<head>\r\n+    <meta charset=\"UTF-8\">\r\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n+    <title>Thank You</title>\r\n+    <link rel=\"stylesheet\" href=\"thankyou.css\">\r\n+</head>\r\n+<body>\r\n+    <div class=\"thankyou-container\">\r\n+        <div class=\"thankyou-card\">\r\n+            <img src=\"img/thankyou.svg\" alt=\"Thank You\" class=\"thankyou-image\">\r\n+            <h1>Thank You!</h1>\r\n+            <p>Your order has been successfully placed.</p>\r\n+            <p>We hope you enjoy your new books.</p>\r\n+            <a href=\"browse-book.html\" class=\"btn\">Continue Shopping</a>\r\n+        </div>\r\n+    </div>\r\n+</body>\r\n+</html>\r\n \r\n </body>\r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756830873543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,49 +1,97 @@\n <!DOCTYPE html>\r\n <html>\r\n <head>\r\n <style>\r\n-.login-container {\r\n-  width: 15rem;\r\n-  padding: 1.25rem;\r\n-  font-family: 'Inter Regular';\r\n-  background-color: #EDE9E9; /* Light purple/lavender */\r\n-  border-radius: 0.625rem;\r\n-  box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.3); /* Subtle shadow */\r\n-  text-align: center;\r\n+/* Reset and global styles */\r\n+* {\r\n+    margin: 0;\r\n+    padding: 0;\r\n+    box-sizing: border-box;\r\n+    font-family: 'Inter', sans-serif;\r\n }\r\n \r\n-.login-username {\r\n-  font-size: 1.2rem;\r\n-  font-weight: 600;\r\n-  color: #555; /* Dark gray */\r\n-  margin-bottom: 0.75rem;\r\n+body {\r\n+    display: flex;\r\n+    justify-content: center;\r\n+    align-items: center;\r\n+    min-height: 100vh;\r\n+    background: linear-gradient(135deg, #f5f7fa, #c3cfe2);\r\n }\r\n \r\n-.login-button {\r\n-  background-color: #F0E68C; /* Khaki/light goldenrod */\r\n-  color: #333; /* Dark gray text */\r\n-  padding: 0.75rem 1.5rem;\r\n-  margin: 0.5rem 0;\r\n-  text-align: center;\r\n-  text-decoration: none;\r\n-  display: inline-block; /* Changed to inline-block */\r\n-  border: none;\r\n-  border-radius: 0.375rem;\r\n-  cursor: pointer;\r\n-  transition: background-color 0.3s ease, transform 0.1s ease;\r\n-  font-size: 1rem;\r\n-  font-weight: 600;\r\n+.thankyou-container {\r\n+    display: flex;\r\n+    justify-content: center;\r\n+    align-items: center;\r\n+    width: 100%;\r\n+    padding: 2rem;\r\n }\r\n \r\n-.login-button:hover {\r\n-  background-color: #E0D080; /* Slightly darker goldenrod on hover */\r\n+.thankyou-card {\r\n+    background: white;\r\n+    padding: 3rem 2rem;\r\n+    border-radius: 15px;\r\n+    text-align: center;\r\n+    box-shadow: 0 10px 30px rgba(0,0,0,0.1);\r\n+    max-width: 400px;\r\n+    width: 100%;\r\n+    animation: fadeIn 0.8s ease-out;\r\n }\r\n \r\n-.login-button:active {\r\n-  background-color: #C0B470; /* Even darker goldenrod when active */\r\n-  transform: scale(0.97); /* Slight scale down on click */\r\n+.thankyou-image {\r\n+    width: 120px;\r\n+    margin-bottom: 1.5rem;\r\n }\r\n+\r\n+h1 {\r\n+    font-size: 2rem;\r\n+    margin-bottom: 1rem;\r\n+    color: #333;\r\n+}\r\n+\r\n+p {\r\n+    font-size: 1rem;\r\n+    margin-bottom: 1rem;\r\n+    color: #555;\r\n+}\r\n+\r\n+.btn {\r\n+    display: inline-block;\r\n+    padding: 0.8rem 2rem;\r\n+    background-color: #28a745;\r\n+    color: white;\r\n+    border-radius: 50px;\r\n+    text-decoration: none;\r\n+    font-weight: 500;\r\n+    transition: all 0.3s ease;\r\n+}\r\n+\r\n+.btn:hover {\r\n+    background-color: #218838;\r\n+    transform: translateY(-2px);\r\n+}\r\n+\r\n+/* Animation */\r\n+@keyframes fadeIn {\r\n+    from { opacity: 0; transform: translateY(-20px); }\r\n+    to { opacity: 1; transform: translateY(0); }\r\n+}\r\n+\r\n+/* Responsive */\r\n+@media(max-width: 480px) {\r\n+    .thankyou-card {\r\n+        padding: 2rem 1rem;\r\n+    }\r\n+\r\n+    h1 {\r\n+        font-size: 1.6rem;\r\n+    }\r\n+\r\n+    p {\r\n+        font-size: 0.95rem;\r\n+    }\r\n+}\r\n+\r\n </style>\r\n </head>\r\n <body>\r\n \r\n"
                },
                {
                    "date": 1756830953145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,19 +102,42 @@\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n     <title>Thank You</title>\r\n     <link rel=\"stylesheet\" href=\"thankyou.css\">\r\n </head>\r\n-<body>\r\n     <div class=\"thankyou-container\">\r\n         <div class=\"thankyou-card\">\r\n             <img src=\"img/thankyou.svg\" alt=\"Thank You\" class=\"thankyou-image\">\r\n             <h1>Thank You!</h1>\r\n             <p>Your order has been successfully placed.</p>\r\n-            <p>We hope you enjoy your new books.</p>\r\n+\r\n+            <h2>Your Purchased Books</h2>\r\n+            <ul class=\"purchased-books\" id=\"purchasedBooksList\">\r\n+                <!-- Books will be injected here dynamically -->\r\n+            </ul>\r\n+\r\n             <a href=\"browse-book.html\" class=\"btn\">Continue Shopping</a>\r\n         </div>\r\n     </div>\r\n-</body>\r\n-</html>\r\n \r\n+    <script>\r\n+        // Display purchased books from localStorage\r\n+        const purchasedBooksList = document.getElementById('purchasedBooksList');\r\n+        const currentUserEmail = JSON.parse(localStorage.getItem('currentUser'))?.email;\r\n+        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n+        const user = users.find(u => u.email === currentUserEmail);\r\n+        const cart = user?.cart || [];\r\n+\r\n+        cart.forEach(book => {\r\n+            const li = document.createElement('li');\r\n+            li.className = 'book-card';\r\n+            li.innerHTML = `\r\n+                <div class=\"book-cover\" style=\"background-image: url('${book.image}');\"></div>\r\n+                <div class=\"book-info\">\r\n+                    <h3>${book.title}</h3>\r\n+                    <p>$${Number(book.price).toFixed(2)}</p>\r\n+                </div>\r\n+            `;\r\n+            purchasedBooksList.appendChild(li);\r\n+        });\r\n+    </script>\r\n </body>\r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756831027555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,42 +102,19 @@\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n     <title>Thank You</title>\r\n     <link rel=\"stylesheet\" href=\"thankyou.css\">\r\n </head>\r\n+<body>\r\n     <div class=\"thankyou-container\">\r\n         <div class=\"thankyou-card\">\r\n             <img src=\"img/thankyou.svg\" alt=\"Thank You\" class=\"thankyou-image\">\r\n             <h1>Thank You!</h1>\r\n             <p>Your order has been successfully placed.</p>\r\n-\r\n-            <h2>Your Purchased Books</h2>\r\n-            <ul class=\"purchased-books\" id=\"purchasedBooksList\">\r\n-                <!-- Books will be injected here dynamically -->\r\n-            </ul>\r\n-\r\n+            <p>We hope you enjoy your new books.</p>\r\n             <a href=\"browse-book.html\" class=\"btn\">Continue Shopping</a>\r\n         </div>\r\n     </div>\r\n+</body>\r\n+</html>\r\n \r\n-    <script>\r\n-        // Display purchased books from localStorage\r\n-        const purchasedBooksList = document.getElementById('purchasedBooksList');\r\n-        const currentUserEmail = JSON.parse(localStorage.getItem('currentUser'))?.email;\r\n-        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n-        const user = users.find(u => u.email === currentUserEmail);\r\n-        const cart = user?.cart || [];\r\n-\r\n-        cart.forEach(book => {\r\n-            const li = document.createElement('li');\r\n-            li.className = 'book-card';\r\n-            li.innerHTML = `\r\n-                <div class=\"book-cover\" style=\"background-image: url('${book.image}');\"></div>\r\n-                <div class=\"book-info\">\r\n-                    <h3>${book.title}</h3>\r\n-                    <p>$${Number(book.price).toFixed(2)}</p>\r\n-                </div>\r\n-            `;\r\n-            purchasedBooksList.appendChild(li);\r\n-        });\r\n-    </script>\r\n </body>\r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756831033169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,18 +103,60 @@\n     <title>Thank You</title>\r\n     <link rel=\"stylesheet\" href=\"thankyou.css\">\r\n </head>\r\n <body>\r\n-    <div class=\"thankyou-container\">\r\n-        <div class=\"thankyou-card\">\r\n-            <img src=\"img/thankyou.svg\" alt=\"Thank You\" class=\"thankyou-image\">\r\n-            <h1>Thank You!</h1>\r\n-            <p>Your order has been successfully placed.</p>\r\n-            <p>We hope you enjoy your new books.</p>\r\n-            <a href=\"browse-book.html\" class=\"btn\">Continue Shopping</a>\r\n-        </div>\r\n+  <div class=\"thankyou-container\">\r\n+    <div class=\"thankyou-card\">\r\n+      <img src=\"img/thankyou.svg\" alt=\"Thank You\" class=\"thankyou-image\">\r\n+      <h1>Thank You!</h1>\r\n+      <p>Your order has been successfully placed.</p>\r\n+\r\n+      <h2>Your Purchased Books</h2>\r\n+      <ul class=\"purchased-books\" id=\"purchasedBooksList\">\r\n+        <!-- Books will be injected here dynamically -->\r\n+      </ul>\r\n+\r\n+      <a href=\"browse-book.html\" class=\"btn\">Continue Shopping</a>\r\n     </div>\r\n-</body>\r\n-</html>\r\n+  </div>\r\n \r\n+  <script>\r\n+    async function displayPurchasedBooks() {\r\n+      const purchasedBooksList = document.getElementById('purchasedBooksList');\r\n+\r\n+      // Get current user and cart\r\n+      const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n+      if (!currentUser) return;\r\n+\r\n+      const users = JSON.parse(localStorage.getItem('users')) || [];\r\n+      const user = users.find(u => u.email === currentUser.email);\r\n+      if (!user || !user.cart) return;\r\n+\r\n+      try {\r\n+        const response = await fetch('all-books.json');\r\n+        const booksData = await response.json();\r\n+\r\n+        user.cart.forEach(item => {\r\n+          const book = booksData.find(b => b.title === item.title);\r\n+          const image = book?.image || 'img/books/placeholder.jpg';\r\n+\r\n+          const li = document.createElement('li');\r\n+          li.className = 'book-card';\r\n+          li.innerHTML = `\r\n+            <div class=\"book-cover\" style=\"background-image: url('${image}');\"></div>\r\n+            <div class=\"book-info\">\r\n+              <h3>${item.title}</h3>\r\n+              <p>$${Number(item.price).toFixed(2)}</p>\r\n+            </div>\r\n+          `;\r\n+          purchasedBooksList.appendChild(li);\r\n+        });\r\n+\r\n+      } catch (err) {\r\n+        console.error('Error fetching all-books.json:', err);\r\n+      }\r\n+    }\r\n+\r\n+    document.addEventListener('DOMContentLoaded', displayPurchasedBooks);\r\n+  </script>\r\n </body>\r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756831118221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,162 +1,116 @@\n <!DOCTYPE html>\r\n-<html>\r\n+<html lang=\"en\">\r\n <head>\r\n+<meta charset=\"UTF-8\">\r\n+<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n+<title>Thank You for Your Purchase</title>\r\n <style>\r\n-/* Reset and global styles */\r\n-* {\r\n+  body {\r\n+    font-family: 'Inter', sans-serif;\r\n+    background: #f0f2f5;\r\n     margin: 0;\r\n-    padding: 0;\r\n-    box-sizing: border-box;\r\n-    font-family: 'Inter', sans-serif;\r\n-}\r\n-\r\n-body {\r\n+    padding: 2rem;\r\n     display: flex;\r\n-    justify-content: center;\r\n+    flex-direction: column;\r\n     align-items: center;\r\n-    min-height: 100vh;\r\n-    background: linear-gradient(135deg, #f5f7fa, #c3cfe2);\r\n-}\r\n+  }\r\n \r\n-.thankyou-container {\r\n-    display: flex;\r\n-    justify-content: center;\r\n-    align-items: center;\r\n-    width: 100%;\r\n-    padding: 2rem;\r\n-}\r\n-\r\n-.thankyou-card {\r\n-    background: white;\r\n-    padding: 3rem 2rem;\r\n-    border-radius: 15px;\r\n-    text-align: center;\r\n-    box-shadow: 0 10px 30px rgba(0,0,0,0.1);\r\n-    max-width: 400px;\r\n-    width: 100%;\r\n-    animation: fadeIn 0.8s ease-out;\r\n-}\r\n-\r\n-.thankyou-image {\r\n-    width: 120px;\r\n-    margin-bottom: 1.5rem;\r\n-}\r\n-\r\n-h1 {\r\n-    font-size: 2rem;\r\n+  h1 {\r\n+    color: #333;\r\n     margin-bottom: 1rem;\r\n-    color: #333;\r\n-}\r\n+  }\r\n \r\n-p {\r\n-    font-size: 1rem;\r\n-    margin-bottom: 1rem;\r\n+  p {\r\n     color: #555;\r\n-}\r\n+    margin-bottom: 2rem;\r\n+  }\r\n \r\n-.btn {\r\n-    display: inline-block;\r\n-    padding: 0.8rem 2rem;\r\n-    background-color: #28a745;\r\n-    color: white;\r\n-    border-radius: 50px;\r\n-    text-decoration: none;\r\n-    font-weight: 500;\r\n-    transition: all 0.3s ease;\r\n-}\r\n+  ul.book-cards {\r\n+    display: flex;\r\n+    flex-wrap: wrap;\r\n+    list-style: none;\r\n+    padding: 0;\r\n+    gap: 1rem;\r\n+    justify-content: center;\r\n+  }\r\n \r\n-.btn:hover {\r\n-    background-color: #218838;\r\n-    transform: translateY(-2px);\r\n-}\r\n+  ul.book-cards li {\r\n+    background: #fff;\r\n+    width: 150px;\r\n+    border-radius: 10px;\r\n+    box-shadow: 0 5px 15px rgba(0,0,0,0.1);\r\n+    overflow: hidden;\r\n+    text-align: center;\r\n+    transition: transform 0.3s;\r\n+  }\r\n \r\n-/* Animation */\r\n-@keyframes fadeIn {\r\n-    from { opacity: 0; transform: translateY(-20px); }\r\n-    to { opacity: 1; transform: translateY(0); }\r\n-}\r\n+  ul.book-cards li:hover {\r\n+    transform: translateY(-5px);\r\n+  }\r\n \r\n-/* Responsive */\r\n-@media(max-width: 480px) {\r\n-    .thankyou-card {\r\n-        padding: 2rem 1rem;\r\n-    }\r\n+  .book-cover {\r\n+    width: 100%;\r\n+    height: 200px;\r\n+    background-size: cover;\r\n+    background-position: center;\r\n+  }\r\n \r\n-    h1 {\r\n-        font-size: 1.6rem;\r\n-    }\r\n+  .book-info {\r\n+    padding: 0.5rem;\r\n+  }\r\n \r\n-    p {\r\n-        font-size: 0.95rem;\r\n-    }\r\n-}\r\n+  .book-info h3 {\r\n+    font-size: 0.9rem;\r\n+    margin: 0.5rem 0;\r\n+    color: #333;\r\n+  }\r\n \r\n+  .book-info p {\r\n+    font-size: 0.85rem;\r\n+    color: #777;\r\n+    margin: 0 0 0.5rem 0;\r\n+  }\r\n </style>\r\n </head>\r\n <body>\r\n \r\n-<!DOCTYPE html>\r\n-<html lang=\"en\">\r\n-<head>\r\n-    <meta charset=\"UTF-8\">\r\n-    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n-    <title>Thank You</title>\r\n-    <link rel=\"stylesheet\" href=\"thankyou.css\">\r\n-</head>\r\n-<body>\r\n-  <div class=\"thankyou-container\">\r\n\\ No newline at end of file\n-    <div class=\"thankyou-card\">\r\n-      <img src=\"img/thankyou.svg\" alt=\"Thank You\" class=\"thankyou-image\">\r\n-      <h1>Thank You!</h1>\r\n-      <p>Your order has been successfully placed.</p>\r\n+<h1>Thank You for Your Purchase!</h1>\r\n+<p>Here are some featured books you might like:</p>\r\n \r\n-      <h2>Your Purchased Books</h2>\r\n-      <ul class=\"purchased-books\" id=\"purchasedBooksList\">\r\n-        <!-- Books will be injected here dynamically -->\r\n-      </ul>\r\n+<ul class=\"book-cards\" id=\"bookCards\">\r\n+  <!-- Book cards will be injected here -->\r\n+</ul>\r\n \r\n-      <a href=\"browse-book.html\" class=\"btn\">Continue Shopping</a>\r\n-    </div>\r\n-  </div>\r\n+<script>\r\n+  async function loadBookCards() {\r\n+    try {\r\n+      const response = await fetch('all-books.json');\r\n+      const books = await response.json();\r\n \r\n-  <script>\r\n-    async function displayPurchasedBooks() {\r\n-      const purchasedBooksList = document.getElementById('purchasedBooksList');\r\n+      const bookCards = document.getElementById('bookCards');\r\n \r\n-      // Get current user and cart\r\n-      const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n-      if (!currentUser) return;\r\n+      // Take first 4 books from JSON\r\n+      books.slice(0,4).forEach(book => {\r\n+        const li = document.createElement('li');\r\n \r\n-      const users = JSON.parse(localStorage.getItem('users')) || [];\r\n-      const user = users.find(u => u.email === currentUser.email);\r\n-      if (!user || !user.cart) return;\r\n+        li.innerHTML = `\r\n+          <div class=\"book-cover\" style=\"background-image: url('${book.image}');\"></div>\r\n+          <div class=\"book-info\">\r\n+            <h3>${book.title}</h3>\r\n+            <p>$${Number(book.price).toFixed(2)}</p>\r\n+          </div>\r\n+        `;\r\n \r\n-      try {\r\n-        const response = await fetch('all-books.json');\r\n-        const booksData = await response.json();\r\n+        bookCards.appendChild(li);\r\n+      });\r\n \r\n-        user.cart.forEach(item => {\r\n-          const book = booksData.find(b => b.title === item.title);\r\n-          const image = book?.image || 'img/books/placeholder.jpg';\r\n+    } catch (err) {\r\n+      console.error('Error loading books:', err);\r\n+    }\r\n+  }\r\n \r\n-          const li = document.createElement('li');\r\n-          li.className = 'book-card';\r\n-          li.innerHTML = `\r\n-            <div class=\"book-cover\" style=\"background-image: url('${image}');\"></div>\r\n-            <div class=\"book-info\">\r\n-              <h3>${item.title}</h3>\r\n-              <p>$${Number(item.price).toFixed(2)}</p>\r\n-            </div>\r\n-          `;\r\n-          purchasedBooksList.appendChild(li);\r\n-        });\r\n+  document.addEventListener('DOMContentLoaded', loadBookCards);\r\n+</script>\r\n \r\n-      } catch (err) {\r\n-        console.error('Error fetching all-books.json:', err);\r\n-      }\r\n-    }\r\n-\r\n-    document.addEventListener('DOMContentLoaded', displayPurchasedBooks);\r\n-  </script>\r\n </body>\r\n-</html>\n+</html>\r\n"
                },
                {
                    "date": 1756831238458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,14 +16,17 @@\n   }\r\n \r\n   h1 {\r\n     color: #333;\r\n-    margin-bottom: 1rem;\r\n+    margin-bottom: 0.5rem;\r\n+    font-size: 2rem;\r\n+    text-align: center;\r\n   }\r\n \r\n   p {\r\n     color: #555;\r\n     margin-bottom: 2rem;\r\n+    text-align: center;\r\n   }\r\n \r\n   ul.book-cards {\r\n     display: flex;\r\n@@ -36,24 +39,28 @@\n \r\n   ul.book-cards li {\r\n     background: #fff;\r\n     width: 150px;\r\n-    border-radius: 10px;\r\n+    border-radius: 12px;\r\n     box-shadow: 0 5px 15px rgba(0,0,0,0.1);\r\n     overflow: hidden;\r\n     text-align: center;\r\n-    transition: transform 0.3s;\r\n+    transform: translateY(20px);\r\n+    opacity: 0;\r\n+    animation: fadeInUp 0.6s forwards;\r\n   }\r\n \r\n   ul.book-cards li:hover {\r\n     transform: translateY(-5px);\r\n+    box-shadow: 0 10px 20px rgba(0,0,0,0.2);\r\n   }\r\n \r\n   .book-cover {\r\n     width: 100%;\r\n     height: 200px;\r\n     background-size: cover;\r\n     background-position: center;\r\n+    border-bottom: 1px solid #eee;\r\n   }\r\n \r\n   .book-info {\r\n     padding: 0.5rem;\r\n@@ -69,8 +76,37 @@\n     font-size: 0.85rem;\r\n     color: #777;\r\n     margin: 0 0 0.5rem 0;\r\n   }\r\n+\r\n+  @keyframes fadeInUp {\r\n+    0% {\r\n+      opacity: 0;\r\n+      transform: translateY(20px);\r\n+    }\r\n+    100% {\r\n+      opacity: 1;\r\n+      transform: translateY(0);\r\n+    }\r\n+  }\r\n+\r\n+  .browse-btn {\r\n+    margin-top: 2rem;\r\n+    padding: 0.8rem 1.5rem;\r\n+    background-color: #4CAF50;\r\n+    color: #fff;\r\n+    font-size: 1rem;\r\n+    border: none;\r\n+    border-radius: 8px;\r\n+    cursor: pointer;\r\n+    transition: transform 0.3s, background-color 0.3s;\r\n+    text-decoration: none;\r\n+  }\r\n+\r\n+  .browse-btn:hover {\r\n+    background-color: #45a049;\r\n+    transform: scale(1.05);\r\n+  }\r\n </style>\r\n </head>\r\n <body>\r\n \r\n@@ -80,8 +116,10 @@\n <ul class=\"book-cards\" id=\"bookCards\">\r\n   <!-- Book cards will be injected here -->\r\n </ul>\r\n \r\n+<a href=\"browse-book.html\" class=\"browse-btn\">Browse More Books</a>\r\n+\r\n <script>\r\n   async function loadBookCards() {\r\n     try {\r\n       const response = await fetch('all-books.json');\r\n@@ -89,10 +127,11 @@\n \r\n       const bookCards = document.getElementById('bookCards');\r\n \r\n       // Take first 4 books from JSON\r\n-      books.slice(0,4).forEach(book => {\r\n+      books.slice(0,4).forEach((book, index) => {\r\n         const li = document.createElement('li');\r\n+        li.style.animationDelay = `${index * 0.1}s`; // stagger animation\r\n \r\n         li.innerHTML = `\r\n           <div class=\"book-cover\" style=\"background-image: url('${book.image}');\"></div>\r\n           <div class=\"book-info\">\r\n"
                },
                {
                    "date": 1756837918556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,155 +1,45 @@\n <!DOCTYPE html>\r\n-<html lang=\"en\">\r\n+<html>\r\n <head>\r\n-<meta charset=\"UTF-8\">\r\n-<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n-<title>Thank You for Your Purchase</title>\r\n <style>\r\n-  body {\r\n-    font-family: 'Inter', sans-serif;\r\n-    background: #f0f2f5;\r\n-    margin: 0;\r\n-    padding: 2rem;\r\n-    display: flex;\r\n-    flex-direction: column;\r\n-    align-items: center;\r\n-  }\r\n+.search-result {\r\n+  list-style: none; /* Remove bullet points */\r\n+  padding: 0;          /* Remove default padding */\r\n+  margin: 0;           /* Remove default margin */\r\n+}\r\n \r\n-  h1 {\r\n-    color: #333;\r\n-    margin-bottom: 0.5rem;\r\n-    font-size: 2rem;\r\n-    text-align: center;\r\n-  }\r\n+.search-result li {\r\n+  padding: 10px;       /* Add some padding around each list item */\r\n+  margin-bottom: 5px;  /* Add some space between list items */\r\n+  background-color: #f9f9f9; /* Light background color */\r\n+  border-bottom: 1px solid #ddd; /* Add a subtle border */\r\n+}\r\n \r\n-  p {\r\n-    color: #555;\r\n-    margin-bottom: 2rem;\r\n-    text-align: center;\r\n-  }\r\n+/* Optional: Style for the last item to remove the bottom border */\r\n+.search-result li:last-child {\r\n+  border-bottom: none;\r\n+}\r\n \r\n-  ul.book-cards {\r\n-    display: flex;\r\n-    flex-wrap: wrap;\r\n-    list-style: none;\r\n-    padding: 0;\r\n-    gap: 1rem;\r\n-    justify-content: center;\r\n-  }\r\n+/* Example content styling (replace with your actual content) */\r\n+.search-result li a {\r\n+  text-decoration: none;\r\n+  color: #333;\r\n+  display: block; /* Make the entire area clickable */\r\n+}\r\n \r\n-  ul.book-cards li {\r\n-    background: #fff;\r\n-    width: 150px;\r\n-    border-radius: 12px;\r\n-    box-shadow: 0 5px 15px rgba(0,0,0,0.1);\r\n-    overflow: hidden;\r\n-    text-align: center;\r\n-    transform: translateY(20px);\r\n-    opacity: 0;\r\n-    animation: fadeInUp 0.6s forwards;\r\n-  }\r\n-\r\n-  ul.book-cards li:hover {\r\n-    transform: translateY(-5px);\r\n-    box-shadow: 0 10px 20px rgba(0,0,0,0.2);\r\n-  }\r\n-\r\n-  .book-cover {\r\n-    width: 100%;\r\n-    height: 200px;\r\n-    background-size: cover;\r\n-    background-position: center;\r\n-    border-bottom: 1px solid #eee;\r\n-  }\r\n-\r\n-  .book-info {\r\n-    padding: 0.5rem;\r\n-  }\r\n-\r\n-  .book-info h3 {\r\n-    font-size: 0.9rem;\r\n-    margin: 0.5rem 0;\r\n-    color: #333;\r\n-  }\r\n-\r\n-  .book-info p {\r\n-    font-size: 0.85rem;\r\n-    color: #777;\r\n-    margin: 0 0 0.5rem 0;\r\n-  }\r\n-\r\n-  @keyframes fadeInUp {\r\n-    0% {\r\n-      opacity: 0;\r\n-      transform: translateY(20px);\r\n-    }\r\n-    100% {\r\n-      opacity: 1;\r\n-      transform: translateY(0);\r\n-    }\r\n-  }\r\n-\r\n-  .browse-btn {\r\n-    margin-top: 2rem;\r\n-    padding: 0.8rem 1.5rem;\r\n-    background-color: #4CAF50;\r\n-    color: #fff;\r\n-    font-size: 1rem;\r\n-    border: none;\r\n-    border-radius: 8px;\r\n-    cursor: pointer;\r\n-    transition: transform 0.3s, background-color 0.3s;\r\n-    text-decoration: none;\r\n-  }\r\n-\r\n-  .browse-btn:hover {\r\n-    background-color: #45a049;\r\n-    transform: scale(1.05);\r\n-  }\r\n+.search-result li a:hover {\r\n+  background-color: #eee; /* Slightly darker background on hover */\r\n+}\r\n </style>\r\n </head>\r\n <body>\r\n \r\n-<h1>Thank You for Your Purchase!</h1>\r\n-<p>Here are some featured books you might like:</p>\r\n-\r\n-<ul class=\"book-cards\" id=\"bookCards\">\r\n-  <!-- Book cards will be injected here -->\r\n+<ul class=\"search-result\">\r\n+  <li><a href=\"#\">Search Result Item 1</a></li>\r\n+  <li><a href=\"#\">Another Search Result</a></li>\r\n+  <li><a href=\"#\">A Longer Search Result Description</a></li>\r\n+  <li><a href=\"#\">Last Search Result Item</a></li>\r\n </ul>\r\n \r\n-<a href=\"browse-book.html\" class=\"browse-btn\">Browse More Books</a>\r\n-\r\n-<script>\r\n-  async function loadBookCards() {\r\n-    try {\r\n-      const response = await fetch('all-books.json');\r\n-      const books = await response.json();\r\n-\r\n-      const bookCards = document.getElementById('bookCards');\r\n-\r\n-      // Take first 4 books from JSON\r\n-      books.slice(0,4).forEach((book, index) => {\r\n-        const li = document.createElement('li');\r\n-        li.style.animationDelay = `${index * 0.1}s`; // stagger animation\r\n-\r\n-        li.innerHTML = `\r\n-          <div class=\"book-cover\" style=\"background-image: url('${book.image}');\"></div>\r\n-          <div class=\"book-info\">\r\n-            <h3>${book.title}</h3>\r\n-            <p>$${Number(book.price).toFixed(2)}</p>\r\n-          </div>\r\n-        `;\r\n-\r\n-        bookCards.appendChild(li);\r\n-      });\r\n-\r\n-    } catch (err) {\r\n-      console.error('Error loading books:', err);\r\n-    }\r\n-  }\r\n-\r\n-  document.addEventListener('DOMContentLoaded', loadBookCards);\r\n-</script>\r\n-\r\n </body>\r\n-</html>\r\n+</html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756837948454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,43 +2,42 @@\n <html>\r\n <head>\r\n <style>\r\n .search-result {\r\n-  list-style: none; /* Remove bullet points */\r\n-  padding: 0;          /* Remove default padding */\r\n-  margin: 0;           /* Remove default margin */\r\n+  list-style: none;\r\n+  padding: 0;\r\n+  margin: 0;\r\n+  font-size: 0.8rem; /* Smaller font size */\r\n }\r\n \r\n .search-result li {\r\n-  padding: 10px;       /* Add some padding around each list item */\r\n-  margin-bottom: 5px;  /* Add some space between list items */\r\n-  background-color: #f9f9f9; /* Light background color */\r\n-  border-bottom: 1px solid #ddd; /* Add a subtle border */\r\n+  padding: 0.5rem; /* Smaller padding */\r\n+  margin-bottom: 0.25rem; /* Smaller margin */\r\n+  background-color: #f9f9f9;\r\n+  border-bottom: 1px solid #ddd;\r\n }\r\n \r\n-/* Optional: Style for the last item to remove the bottom border */\r\n .search-result li:last-child {\r\n   border-bottom: none;\r\n }\r\n \r\n-/* Example content styling (replace with your actual content) */\r\n .search-result li a {\r\n   text-decoration: none;\r\n   color: #333;\r\n-  display: block; /* Make the entire area clickable */\r\n+  display: block;\r\n }\r\n \r\n .search-result li a:hover {\r\n-  background-color: #eee; /* Slightly darker background on hover */\r\n+  background-color: #eee;\r\n }\r\n </style>\r\n </head>\r\n <body>\r\n \r\n <ul class=\"search-result\">\r\n   <li><a href=\"#\">Search Result Item 1</a></li>\r\n   <li><a href=\"#\">Another Search Result</a></li>\r\n-  <li><a href=\"#\">A Longer Search Result Description</a></li>\r\n+  <li><a href=\"#\">A Longer Search Result</a></li>\r\n   <li><a href=\"#\">Last Search Result Item</a></li>\r\n </ul>\r\n \r\n </body>\r\n"
                },
                {
                    "date": 1756837998008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,22 +5,31 @@\n .search-result {\r\n   list-style: none;\r\n   padding: 0;\r\n   margin: 0;\r\n-  font-size: 0.8rem; /* Smaller font size */\r\n+  font-size: 0.64rem; /* 20% smaller than 0.8rem */\r\n }\r\n \r\n .search-result li {\r\n-  padding: 0.5rem; /* Smaller padding */\r\n-  margin-bottom: 0.25rem; /* Smaller margin */\r\n+  padding: 0.4rem; /* 20% smaller than 0.5rem */\r\n+  margin-bottom: 0.2rem; /* 20% smaller than 0.25rem */\r\n   background-color: #f9f9f9;\r\n   border-bottom: 1px solid #ddd;\r\n+  display: flex; /* Use flexbox for image and text alignment */\r\n+  align-items: center; /* Vertically align items */\r\n }\r\n \r\n .search-result li:last-child {\r\n   border-bottom: none;\r\n }\r\n \r\n+.search-result li img {\r\n+  width: 2rem; /* Example image size */\r\n+  height: 2rem;\r\n+  margin-right: 0.4rem; /* Spacing between image and text */\r\n+  border-radius: 50%; /* Make the image round */\r\n+}\r\n+\r\n .search-result li a {\r\n   text-decoration: none;\r\n   color: #333;\r\n   display: block;\r\n@@ -33,12 +42,24 @@\n </head>\r\n <body>\r\n \r\n <ul class=\"search-result\">\r\n-  <li><a href=\"#\">Search Result Item 1</a></li>\r\n-  <li><a href=\"#\">Another Search Result</a></li>\r\n-  <li><a href=\"#\">A Longer Search Result</a></li>\r\n-  <li><a href=\"#\">Last Search Result Item</a></li>\r\n+  <li>\r\n+    <img src=\"https://via.placeholder.com/50\" alt=\"Result Image\">\r\n+    <a href=\"#\">Search Result Item 1</a>\r\n+  </li>\r\n+  <li>\r\n+    <img src=\"https://via.placeholder.com/50\" alt=\"Result Image\">\r\n+    <a href=\"#\">Another Search Result</a>\r\n+  </li>\r\n+  <li>\r\n+    <img src=\"https://via.placeholder.com/50\" alt=\"Result Image\">\r\n+    <a href=\"#\">A Longer Search Result</a>\r\n+  </li>\r\n+  <li>\r\n+    <img src=\"https://via.placeholder.com/50\" alt=\"Result Image\">\r\n+    <a href=\"#\">Last Search Result Item</a>\r\n+  </li>\r\n </ul>\r\n \r\n </body>\r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756838023462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n .search-result {\r\n   list-style: none;\r\n   padding: 0;\r\n   margin: 0;\r\n+  width: ;\r\n   font-size: 0.64rem; /* 20% smaller than 0.8rem */\r\n }\r\n \r\n .search-result li {\r\n"
                },
                {
                    "date": 1756838028871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n .search-result {\r\n   list-style: none;\r\n   padding: 0;\r\n   margin: 0;\r\n-  width: ;\r\n+  width: 20%;\r\n   font-size: 0.64rem; /* 20% smaller than 0.8rem */\r\n }\r\n \r\n .search-result li {\r\n"
                },
                {
                    "date": 1756838034833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n .search-result {\r\n   list-style: none;\r\n   padding: 0;\r\n   margin: 0;\r\n-  width: 20%;\r\n+  width: %;\r\n   font-size: 0.64rem; /* 20% smaller than 0.8rem */\r\n }\r\n \r\n .search-result li {\r\n"
                },
                {
                    "date": 1756838049031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n .search-result {\r\n   list-style: none;\r\n   padding: 0;\r\n   margin: 0;\r\n-  width: %;\r\n-  font-size: 0.64rem; /* 20% smaller than 0.8rem */\r\n+  width: 30%;\r\n+  font-size: 1rem; /* 20% smaller than 0.8rem */\r\n }\r\n \r\n .search-result li {\r\n   padding: 0.4rem; /* 20% smaller than 0.5rem */\r\n"
                },
                {
                    "date": 1756971234447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,33 @@\n-<!DOCTYPE html>\r\n-<html>\r\n-<head>\r\n-<style>\r\n-.search-result {\r\n-  list-style: none;\r\n-  padding: 0;\r\n-  margin: 0;\r\n-  width: 30%;\r\n-  font-size: 1rem; /* 20% smaller than 0.8rem */\r\n+/* Main rule: limit visually to ~25 characters and fade the end */\r\n+.bookTitle h2 {\r\n+  font-size: 1rem;            /* adjust to match your design */\r\n+  line-height: 1.2;           /* single-line */\r\n+  width: 25ch;                /* approx. 25 characters (including spaces) */\r\n+  white-space: nowrap;        /* keep on single line */\r\n+  overflow: hidden;           /* hide overflowing text */\r\n+  display: inline-block;      /* allow width control */\r\n+  vertical-align: middle;\r\n+  /* fade mask (modern browsers) */\r\n+  -webkit-mask-image: linear-gradient(90deg, black 70%, rgba(0,0,0,0.5) 85%, transparent 100%);\r\n+  mask-image: linear-gradient(90deg, black 70%, rgba(0,0,0,0.5) 85%, transparent 100%);\r\n+  /* improves smoothing on some browsers */\r\n+  -webkit-mask-repeat: no-repeat;\r\n+  mask-repeat: no-repeat;\r\n }\r\n \r\n-.search-result li {\r\n-  padding: 0.4rem; /* 20% smaller than 0.5rem */\r\n-  margin-bottom: 0.2rem; /* 20% smaller than 0.25rem */\r\n-  background-color: #f9f9f9;\r\n-  border-bottom: 1px solid #ddd;\r\n-  display: flex; /* Use flexbox for image and text alignment */\r\n-  align-items: center; /* Vertically align items */\r\n+/* Fallback: overlay gradient to simulate fade for older browsers */\r\n+.bookTitle h2::after {\r\n+  content: \"\";\r\n+  pointer-events: none;\r\n+  position: absolute;\r\n+  right: 0;\r\n+  top: 0;\r\n+  height: 100%;\r\n+  width: 4ch; /* width of the fading band */\r\n+  /* gradient from fully-transparent to container background color */\r\n+  background: linear-gradient(to right, rgba(255,255,255,0), rgba(255,255,255,1));\r\n+  /* if your background isn't white, replace rgba(255,255,255,1) with the page/bg color */\r\n+  display: none; /* enabled only for the fallback below */\r\n }\r\n \r\n-.search-result li:last-child {\r\n-  border-bottom: none;\r\n-}\r\n-\r\n-.search-result li img {\r\n-  width: 2rem; /* Example image size */\r\n-  height: 2rem;\r\n-  margin-right: 0.4rem; /* Spacing between image and text */\r\n-  border-radius: 50%; /* Make the image round */\r\n-}\r\n-\r\n-.search-result li a {\r\n-  text-decoration: none;\r\n-  color: #333;\r\n-  display: block;\r\n-}\r\n-\r\n\\ No newline at end of file\n-.search-result li a:hover {\r\n-  background-color: #eee;\r\n-}\r\n-</style>\r\n-</head>\r\n-<body>\r\n-\r\n-<ul class=\"search-result\">\r\n-  <li>\r\n-    <img src=\"https://via.placeholder.com/50\" alt=\"Result Image\">\r\n-    <a href=\"#\">Search Result Item 1</a>\r\n-  </li>\r\n-  <li>\r\n-    <img src=\"https://via.placeholder.com/50\" alt=\"Result Image\">\r\n-    <a href=\"#\">Another Search Result</a>\r\n-  </li>\r\n-  <li>\r\n-    <img src=\"https://via.placeholder.com/50\" alt=\"Result Image\">\r\n-    <a href=\"#\">A Longer Search Result</a>\r\n-  </li>\r\n-  <li>\r\n-    <img src=\"https://via.placeholder.com/50\" alt=\"Result Image\">\r\n-    <a href=\"#\">Last Search Result Item</a>\r\n-  </li>\r\n-</ul>\r\n-\r\n-</body>\r\n-</html>\n+/* Show the pseudo overlay fallback when mas*\r\n"
                },
                {
                    "date": 1756971243019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,5 @@\n-/* Main rule: limit visually to ~25 characters and fade the end */\r\n-.bookTitle h2 {\r\n-  font-size: 1rem;            /* adjust to match your design */\r\n-  line-height: 1.2;           /* single-line */\r\n-  width: 25ch;                /* approx. 25 characters (including spaces) */\r\n-  white-space: nowrap;        /* keep on single line */\r\n-  overflow: hidden;           /* hide overflowing text */\r\n-  display: inline-block;      /* allow width control */\r\n-  vertical-align: middle;\r\n-  /* fade mask (modern browsers) */\r\n-  -webkit-mask-image: linear-gradient(90deg, black 70%, rgba(0,0,0,0.5) 85%, transparent 100%);\r\n-  mask-image: linear-gradient(90deg, black 70%, rgba(0,0,0,0.5) 85%, transparent 100%);\r\n-  /* improves smoothing on some browsers */\r\n-  -webkit-mask-repeat: no-repeat;\r\n-  mask-repeat: no-repeat;\r\n-}\r\n-\r\n-/* Fallback: overlay gradient to simulate fade for older browsers */\r\n-.bookTitle h2::after {\r\n-  content: \"\";\r\n-  pointer-events: none;\r\n-  position: absolute;\r\n-  right: 0;\r\n-  top: 0;\r\n-  height: 100%;\r\n-  width: 4ch; /* width of the fading band */\r\n-  /* gradient from fully-transparent to container background color */\r\n-  background: linear-gradient(to right, rgba(255,255,255,0), rgba(255,255,255,1));\r\n-  /* if your background isn't white, replace rgba(255,255,255,1) with the page/bg color */\r\n-  display: none; /* enabled only for the fallback below */\r\n-}\r\n-\r\n-/* Show the pseudo overlay fallback when mas*\r\n+<!-- Example HTML -->\r\n+<div class=\"bookTitle\">\r\n+  <!-- put full text here; title gives full string on hover -->\r\n+  <h2 title=\"Java Programming Cookbook\">Java Programming Cookbook</h2>\r\n+</div>\r\n"
                },
                {
                    "date": 1756971250393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,10 @@\n-<!-- Example HTML -->\r\n-<div class=\"bookTitle\">\r\n-  <!-- put full text here; title gives full string on hover -->\r\n-  <h2 title=\"Java Programming Cookbook\">Java Programming Cookbook</h2>\r\n-</div>\r\n+<html lang=\"en\">\r\n+<head>\r\n+  <meta charset=\"UTF-8\">\r\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n+  <title>Document</title>\r\n+</head>\r\n+<body>\r\n+  \r\n+</body>\r\n+</html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756971255753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,16 @@\n   <meta charset=\"UTF-8\">\r\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n   <title>Document</title>\r\n </head>\r\n+<style>\r\n+  \r\n+</style>\r\n <body>\r\n-  \r\n+  <!-- Example HTML -->\r\n+<div class=\"bookTitle\">\r\n+  <!-- put full text here; title gives full string on hover -->\r\n+  <h2 title=\"Java Programming Cookbook\">Java Programming Cookbook</h2>\r\n+</div>\r\n+\r\n </body>\r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756971261181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,47 @@\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n   <title>Document</title>\r\n </head>\r\n <style>\r\n-  \r\n+  /* Main rule: limit visually to ~25 characters and fade the end */\r\n+.bookTitle h2 {\r\n+  font-size: 1rem;            /* adjust to match your design */\r\n+  line-height: 1.2;           /* single-line */\r\n+  width: 25ch;                /* approx. 25 characters (including spaces) */\r\n+  white-space: nowrap;        /* keep on single line */\r\n+  overflow: hidden;           /* hide overflowing text */\r\n+  display: inline-block;      /* allow width control */\r\n+  vertical-align: middle;\r\n+  /* fade mask (modern browsers) */\r\n+  -webkit-mask-image: linear-gradient(90deg, black 70%, rgba(0,0,0,0.5) 85%, transparent 100%);\r\n+  mask-image: linear-gradient(90deg, black 70%, rgba(0,0,0,0.5) 85%, transparent 100%);\r\n+  /* improves smoothing on some browsers */\r\n+  -webkit-mask-repeat: no-repeat;\r\n+  mask-repeat: no-repeat;\r\n+}\r\n+\r\n+/* Fallback: overlay gradient to simulate fade for older browsers */\r\n+.bookTitle h2::after {\r\n+  content: \"\";\r\n+  pointer-events: none;\r\n+  position: absolute;\r\n+  right: 0;\r\n+  top: 0;\r\n+  height: 100%;\r\n+  width: 4ch; /* width of the fading band */\r\n+  /* gradient from fully-transparent to container background color */\r\n+  background: linear-gradient(to right, rgba(255,255,255,0), rgba(255,255,255,1));\r\n+  /* if your background isn't white, replace rgba(255,255,255,1) with the page/bg color */\r\n+  display: none; /* enabled only for the fallback below */\r\n+}\r\n+\r\n+/* Show the pseudo overlay fallback when mask is not supported */\r\n+@supports not ((-webkit-mask-image: linear-gradient(black, black))) {\r\n+  .bookTitle { position: relative; } /* parent needed for absolute pseudo */\r\n+  .bookTitle h2 { display: block; }\r\n+  .bookTitle h2::after { display: block; }\r\n+}\r\n+\r\n </style>\r\n <body>\r\n   <!-- Example HTML -->\r\n <div class=\"bookTitle\">\r\n"
                },
                {
                    "date": 1756971266258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,49 +3,9 @@\n   <meta charset=\"UTF-8\">\r\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n   <title>Document</title>\r\n </head>\r\n-<style>\r\n-  /* Main rule: limit visually to ~25 characters and fade the end */\r\n-.bookTitle h2 {\r\n-  font-size: 1rem;            /* adjust to match your design */\r\n-  line-height: 1.2;           /* single-line */\r\n-  width: 25ch;                /* approx. 25 characters (including spaces) */\r\n-  white-space: nowrap;        /* keep on single line */\r\n-  overflow: hidden;           /* hide overflowing text */\r\n-  display: inline-block;      /* allow width control */\r\n-  vertical-align: middle;\r\n-  /* fade mask (modern browsers) */\r\n-  -webkit-mask-image: linear-gradient(90deg, black 70%, rgba(0,0,0,0.5) 85%, transparent 100%);\r\n-  mask-image: linear-gradient(90deg, black 70%, rgba(0,0,0,0.5) 85%, transparent 100%);\r\n-  /* improves smoothing on some browsers */\r\n-  -webkit-mask-repeat: no-repeat;\r\n-  mask-repeat: no-repeat;\r\n-}\r\n \r\n-/* Fallback: overlay gradient to simulate fade for older browsers */\r\n-.bookTitle h2::after {\r\n-  content: \"\";\r\n-  pointer-events: none;\r\n-  position: absolute;\r\n-  right: 0;\r\n-  top: 0;\r\n-  height: 100%;\r\n-  width: 4ch; /* width of the fading band */\r\n-  /* gradient from fully-transparent to container background color */\r\n-  background: linear-gradient(to right, rgba(255,255,255,0), rgba(255,255,255,1));\r\n-  /* if your background isn't white, replace rgba(255,255,255,1) with the page/bg color */\r\n-  display: none; /* enabled only for the fallback below */\r\n-}\r\n-\r\n-/* Show the pseudo overlay fallback when mask is not supported */\r\n-@supports not ((-webkit-mask-image: linear-gradient(black, black))) {\r\n-  .bookTitle { position: relative; } /* parent needed for absolute pseudo */\r\n-  .bookTitle h2 { display: block; }\r\n-  .bookTitle h2::after { display: block; }\r\n-}\r\n-\r\n-</style>\r\n <body>\r\n   <!-- Example HTML -->\r\n <div class=\"bookTitle\">\r\n   <!-- put full text here; title gives full string on hover -->\r\n"
                },
                {
                    "date": 1756971272677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,75 @@\n <html lang=\"en\">\r\n+\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n   <title>Document</title>\r\n </head>\r\n \r\n <body>\r\n+  <style>\r\n+    /* Main rule: limit visually to ~25 characters and fade the end */\r\n+    .bookTitle h2 {\r\n+      font-size: 1rem;\r\n+      /* adjust to match your design */\r\n+      line-height: 1.2;\r\n+      /* single-line */\r\n+      width: 25ch;\r\n+      /* approx. 25 characters (including spaces) */\r\n+      white-space: nowrap;\r\n+      /* keep on single line */\r\n+      overflow: hidden;\r\n+      /* hide overflowing text */\r\n+      display: inline-block;\r\n+      /* allow width control */\r\n+      vertical-align: middle;\r\n+      /* fade mask (modern browsers) */\r\n+      -webkit-mask-image: linear-gradient(90deg, black 70%, rgba(0, 0, 0, 0.5) 85%, transparent 100%);\r\n+      mask-image: linear-gradient(90deg, black 70%, rgba(0, 0, 0, 0.5) 85%, transparent 100%);\r\n+      /* improves smoothing on some browsers */\r\n+      -webkit-mask-repeat: no-repeat;\r\n+      mask-repeat: no-repeat;\r\n+    }\r\n+\r\n+    /* Fallback: overlay gradient to simulate fade for older browsers */\r\n+    .bookTitle h2::after {\r\n+      content: \"\";\r\n+      pointer-events: none;\r\n+      position: absolute;\r\n+      right: 0;\r\n+      top: 0;\r\n+      height: 100%;\r\n+      width: 4ch;\r\n+      /* width of the fading band */\r\n+      /* gradient from fully-transparent to container background color */\r\n+      background: linear-gradient(to right, rgba(255, 255, 255, 0), rgba(255, 255, 255, 1));\r\n+      /* if your background isn't white, replace rgba(255,255,255,1) with the page/bg color */\r\n+      display: none;\r\n+      /* enabled only for the fallback below */\r\n+    }\r\n+\r\n+    /* Show the pseudo overlay fallback when mask is not supported */\r\n+    @supports not ((-webkit-mask-image: linear-gradient(black, black))) {\r\n+      .bookTitle {\r\n+        position: relative;\r\n+      }\r\n+\r\n+      /* parent needed for absolute pseudo */\r\n+      .bookTitle h2 {\r\n+        display: block;\r\n+      }\r\n+\r\n+      .bookTitle h2::after {\r\n+        display: block;\r\n+      }\r\n+    }\r\n+  </style>\r\n   <!-- Example HTML -->\r\n-<div class=\"bookTitle\">\r\n-  <!-- put full text here; title gives full string on hover -->\r\n-  <h2 title=\"Java Programming Cookbook\">Java Programming Cookbook</h2>\r\n-</div>\r\n+  <div class=\"bookTitle\">\r\n+    <!-- put full text here; title gives full string on hover -->\r\n+    <h2 title=\"Java Programming Cookbook\">Java Programming Cookbook</h2>\r\n+  </div>\r\n \r\n </body>\r\n+\r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756971300210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n <body>\r\n   <style>\r\n     /* Main rule: limit visually to ~25 characters and fade the end */\r\n-    .bookTitle h2 {\r\n+    .bookTitle  {\r\n       font-size: 1rem;\r\n       /* adjust to match your design */\r\n       line-height: 1.2;\r\n       /* single-line */\r\n"
                },
                {
                    "date": 1756971319176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n   </style>\r\n   <!-- Example HTML -->\r\n   <div class=\"bookTitle\">\r\n     <!-- put full text here; title gives full string on hover -->\r\n-    <h2 title=\"Java Programming Cookbook\">Java Programming Cookbook</h2>\r\n+    <h2 class=\"\">Java Programming Cookbook</h2>\r\n   </div>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756971325217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n   </style>\r\n   <!-- Example HTML -->\r\n   <div class=\"bookTitle\">\r\n     <!-- put full text here; title gives full string on hover -->\r\n-    <h2 class=\"\">Java Programming Cookbook</h2>\r\n+    <h2 class=\"bookTitke\">Java Programming Cookbook</h2>\r\n   </div>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756971331959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,11 @@\n       }\r\n     }\r\n   </style>\r\n   <!-- Example HTML -->\r\n-  <div class=\"bookTitle\">\r\n+  <div>\r\n     <!-- put full text here; title gives full string on hover -->\r\n-    <h2 class=\"bookTitke\">Java Programming Cookbook</h2>\r\n+    <h2 class=\"bookTitle\">Java Programming Cookbook</h2>\r\n   </div>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756972281845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,75 +1,30 @@\n-<html lang=\"en\">\r\n+<!-- PDF.js from CDN -->\r\n+<script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n \r\n-<head>\r\n-  <meta charset=\"UTF-8\">\r\n-  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n-  <title>Document</title>\r\n-</head>\r\n+<div id=\"pdfPreview\"></div>\r\n+<button id=\"openFull\">Open Full PDF</button>\r\n \r\n-<body>\r\n-  <style>\r\n-    /* Main rule: limit visually to ~25 characters and fade the end */\r\n-    .bookTitle  {\r\n-      font-size: 1rem;\r\n-      /* adjust to match your design */\r\n-      line-height: 1.2;\r\n-      /* single-line */\r\n-      width: 25ch;\r\n-      /* approx. 25 characters (including spaces) */\r\n-      white-space: nowrap;\r\n-      /* keep on single line */\r\n-      overflow: hidden;\r\n-      /* hide overflowing text */\r\n-      display: inline-block;\r\n-      /* allow width control */\r\n-      vertical-align: middle;\r\n-      /* fade mask (modern browsers) */\r\n-      -webkit-mask-image: linear-gradient(90deg, black 70%, rgba(0, 0, 0, 0.5) 85%, transparent 100%);\r\n-      mask-image: linear-gradient(90deg, black 70%, rgba(0, 0, 0, 0.5) 85%, transparent 100%);\r\n-      /* improves smoothing on some browsers */\r\n-      -webkit-mask-repeat: no-repeat;\r\n-      mask-repeat: no-repeat;\r\n-    }\r\n+<script>\r\n+const url = \"sample.pdf\"; // path to your PDF\r\n \r\n-    /* Fallback: overlay gradient to simulate fade for older browsers */\r\n-    .bookTitle h2::after {\r\n-      content: \"\";\r\n-      pointer-events: none;\r\n-      position: absolute;\r\n-      right: 0;\r\n-      top: 0;\r\n-      height: 100%;\r\n-      width: 4ch;\r\n-      /* width of the fading band */\r\n-      /* gradient from fully-transparent to container background color */\r\n-      background: linear-gradient(to right, rgba(255, 255, 255, 0), rgba(255, 255, 255, 1));\r\n-      /* if your background isn't white, replace rgba(255,255,255,1) with the page/bg color */\r\n-      display: none;\r\n-      /* enabled only for the fallback below */\r\n-    }\r\n+// Load PDF\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  // Limit preview to 1st page only\r\n+  pdf.getPage(1).then(page => {\r\n+    const scale = 1.5;\r\n+    const viewport = page.getViewport({ scale });\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    const context = canvas.getContext(\"2d\");\r\n+    canvas.height = viewport.height;\r\n+    canvas.width = viewport.width;\r\n+    document.getElementById(\"pdfPreview\").appendChild(canvas);\r\n \r\n-    /* Show the pseudo overlay fallback when mask is not supported */\r\n-    @supports not ((-webkit-mask-image: linear-gradient(black, black))) {\r\n-      .bookTitle {\r\n-        position: relative;\r\n-      }\r\n+    page.render({ canvasContext: context, viewport });\r\n+  });\r\n+});\r\n\\ No newline at end of file\n \r\n-      /* parent needed for absolute pseudo */\r\n-      .bookTitle h2 {\r\n-        display: block;\r\n-      }\r\n-\r\n-      .bookTitle h2::after {\r\n-        display: block;\r\n-      }\r\n-    }\r\n-  </style>\r\n-  <!-- Example HTML -->\r\n-  <div>\r\n-    <!-- put full text here; title gives full string on hover -->\r\n-    <h2 class=\"bookTitle\">Java Programming Cookbook</h2>\r\n-  </div>\r\n-\r\n-</body>\r\n-\r\n-</html>\n+// Button to open full PDF in new tab\r\n+document.getElementById(\"openFull\").onclick = () => {\r\n+  window.open(url, \"_blank\");\r\n+};\r\n+</script>\r\n"
                },
                {
                    "date": 1756972305285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n <div id=\"pdfPreview\"></div>\r\n <button id=\"openFull\">Open Full PDF</button>\r\n \r\n <script>\r\n-const url = \"sample.pdf\"; // path to your PDF\r\n+const url = \".pdf\"; // path to your PDF\r\n \r\n // Load PDF\r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   // Limit preview to 1st page only\r\n@@ -26,5 +26,5 @@\n // Button to open full PDF in new tab\r\n document.getElementById(\"openFull\").onclick = () => {\r\n   window.open(url, \"_blank\");\r\n };\r\n-</script>\n\\ No newline at end of file\n+</script>\r\n"
                },
                {
                    "date": 1756972313401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n <div id=\"pdfPreview\"></div>\r\n <button id=\"openFull\">Open Full PDF</button>\r\n \r\n <script>\r\n-const url = \".pdf\"; // path to your PDF\r\n+const url = \"books.pdf\"; // path to your PDF\r\n \r\n // Load PDF\r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   // Limit preview to 1st page only\r\n"
                },
                {
                    "date": 1756972318844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n <div id=\"pdfPreview\"></div>\r\n <button id=\"openFull\">Open Full PDF</button>\r\n \r\n <script>\r\n-const url = \"books.pdf\"; // path to your PDF\r\n+const url = \"books-pdf.pdf\"; // path to your PDF\r\n \r\n // Load PDF\r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   // Limit preview to 1st page only\r\n"
                },
                {
                    "date": 1756972326207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n <div id=\"pdfPreview\"></div>\r\n <button id=\"openFull\">Open Full PDF</button>\r\n \r\n <script>\r\n-const url = \"books-pdf.pdf\"; // path to your PDF\r\n+const url = \"books-pdf/.pdf\"; // path to your PDF\r\n \r\n // Load PDF\r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   // Limit preview to 1st page only\r\n"
                },
                {
                    "date": 1756972332648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n <div id=\"pdfPreview\"></div>\r\n <button id=\"openFull\">Open Full PDF</button>\r\n \r\n <script>\r\n-const url = \"books-pdf/.pdf\"; // path to your PDF\r\n+const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // path to your PDF\r\n \r\n // Load PDF\r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   // Limit preview to 1st page only\r\n"
                },
                {
                    "date": 1756972446626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \r\n // Load PDF\r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   // Limit preview to 1st page only\r\n-  pdf.getPage(1).then(page => {\r\n+  pdf.getPage(10).then(page => {\r\n     const scale = 1.5;\r\n     const viewport = page.getViewport({ scale });\r\n     const canvas = document.createElement(\"canvas\");\r\n     const context = canvas.getContext(\"2d\");\r\n"
                },
                {
                    "date": 1756972557042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,107 @@\n-<!-- PDF.js from CDN -->\r\n-<script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n+<!DOCTYPE html>\r\n+<html lang=\"en\">\r\n+<head>\r\n+  <meta charset=\"UTF-8\">\r\n+  <title>PDF Preview Example</title>\r\n+  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n+  <style>\r\n+    /* General page styling */\r\n+    body {\r\n+      background: #f5f7fa;\r\n+      font-family: Arial, sans-serif;\r\n+      margin: 0;\r\n+      padding: 40px;\r\n+    }\r\n \r\n-<div id=\"pdfPreview\"></div>\r\n-<button id=\"openFull\">Open Full PDF</button>\r\n+    /* Container styling */\r\n+    .pdf-container {\r\n+      max-width: 600px;\r\n+      margin: 0 auto;\r\n+      padding: 20px;\r\n+      background: #fff;\r\n+      border-radius: 12px;\r\n+      box-shadow: 0 6px 16px rgba(0,0,0,0.1);\r\n+      text-align: center;\r\n+    }\r\n \r\n-<script>\r\n-const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // path to your PDF\r\n+    /* Title */\r\n+    .pdf-title {\r\n+      margin-bottom: 15px;\r\n+      font-size: 1.3rem;\r\n+      font-weight: 600;\r\n+      color: #333;\r\n+    }\r\n \r\n-// Load PDF\r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  // Limit preview to 1st page only\r\n-  pdf.getPage(10).then(page => {\r\n-    const scale = 1.5;\r\n-    const viewport = page.getViewport({ scale });\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    const context = canvas.getContext(\"2d\");\r\n-    canvas.height = viewport.height;\r\n-    canvas.width = viewport.width;\r\n-    document.getElementById(\"pdfPreview\").appendChild(canvas);\r\n+    /* Preview box */\r\n+    .pdf-preview canvas {\r\n+      width: 100%;        /* make responsive */\r\n+      height: auto;\r\n+      border-radius: 8px;\r\n+      box-shadow: 0 4px 10px rgba(0,0,0,0.15);\r\n+      margin-bottom: 15px;\r\n+    }\r\n \r\n-    page.render({ canvasContext: context, viewport });\r\n-  });\r\n-});\r\n+    /* Button styling */\r\n+    .pdf-button {\r\n+      padding: 10px 18px;\r\n+      font-size: 0.95rem;\r\n+      font-weight: 500;\r\n+      background: #007bff;\r\n+      color: #fff;\r\n+      border: none;\r\n+      border-radius: 8px;\r\n+      cursor: pointer;\r\n+      transition: 0.3s ease;\r\n+    }\r\n \r\n-// Button to open full PDF in new tab\r\n-document.getElementById(\"openFull\").onclick = () => {\r\n-  window.open(url, \"_blank\");\r\n-};\r\n-</script>\r\n+    .pdf-button:hover {\r\n+      background: #0056b3;\r\n+    }\r\n+\r\n+    /* Loading state */\r\n+    .loading {\r\n+      font-size: 0.9rem;\r\n+      color: #555;\r\n+      margin-bottom: 15px;\r\n+    }\r\n+  </style>\r\n+</head>\r\n+<body>\r\n+\r\n+  <div class=\"pdf-container\">\r\n+    <h3 class=\"pdf-title\">üìñ PDF Preview</h3>\r\n+    <div id=\"loadingText\" class=\"loading\">Loading preview...</div>\r\n+    <div id=\"pdfPreview\" class=\"pdf-preview\"></div>\r\n+    <button id=\"openFull\" class=\"pdf-button\">Open Full PDF</button>\r\n+  </div>\r\n+\r\n+  <script>\r\n+    const url = \"sample.pdf\"; // üîπ replace with your PDF file path\r\n+\r\n+    // Load PDF\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      // Limit preview to 1st page only\r\n+      pdf.getPage(1).then(page => {\r\n+        const scale = 1.2; // preview scale\r\n+        const viewport = page.getViewport({ scale });\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        const context = canvas.getContext(\"2d\");\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+\r\n+        document.getElementById(\"pdfPreview\").appendChild(canvas);\r\n+\r\n+        page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n+          document.getElementById(\"loadingText\").style.display = \"none\"; // hide loading\r\n+        });\r\n+      });\r\n+    });\r\n+\r\n+    // Button to open full PDF in new tab\r\n+    document.getElementById(\"openFull\").onclick = () => {\r\n+      window.open(url, \"_blank\");\r\n+    };\r\n+  </script>\r\n+\r\n+</body>\r\n+</html>\r\n"
                },
                {
                    "date": 1756972595069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     <button id=\"openFull\" class=\"pdf-button\">Open Full PDF</button>\r\n   </div>\r\n \r\n   <script>\r\n-    const url = \"sample.pdf\"; // üîπ replace with your PDF file path\r\n+    const url = \"_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n \r\n     // Load PDF\r\n     pdfjsLib.getDocument(url).promise.then(pdf => {\r\n       // Limit preview to 1st page only\r\n"
                },
                {
                    "date": 1756972602555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     <button id=\"openFull\" class=\"pdf-button\">Open Full PDF</button>\r\n   </div>\r\n \r\n   <script>\r\n-    const url = \"_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n+    const url = \"books-pdf_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n \r\n     // Load PDF\r\n     pdfjsLib.getDocument(url).promise.then(pdf => {\r\n       // Limit preview to 1st page only\r\n"
                },
                {
                    "date": 1756972671663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +1,48 @@\n <!DOCTYPE html>\r\n <html lang=\"en\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n-  <title>PDF Preview Example</title>\r\n+  <title>PDF Multi-Page Preview</title>\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <style>\r\n-    /* General page styling */\r\n     body {\r\n       background: #f5f7fa;\r\n       font-family: Arial, sans-serif;\r\n       margin: 0;\r\n       padding: 40px;\r\n     }\r\n \r\n-    /* Container styling */\r\n     .pdf-container {\r\n-      max-width: 600px;\r\n+      max-width: 700px;\r\n       margin: 0 auto;\r\n       padding: 20px;\r\n       background: #fff;\r\n       border-radius: 12px;\r\n       box-shadow: 0 6px 16px rgba(0,0,0,0.1);\r\n-      text-align: center;\r\n     }\r\n \r\n-    /* Title */\r\n     .pdf-title {\r\n-      margin-bottom: 15px;\r\n+      margin-bottom: 20px;\r\n       font-size: 1.3rem;\r\n       font-weight: 600;\r\n       color: #333;\r\n+      text-align: center;\r\n     }\r\n \r\n-    /* Preview box */\r\n     .pdf-preview canvas {\r\n-      width: 100%;        /* make responsive */\r\n+      width: 100%;\r\n       height: auto;\r\n       border-radius: 8px;\r\n       box-shadow: 0 4px 10px rgba(0,0,0,0.15);\r\n-      margin-bottom: 15px;\r\n+      margin-bottom: 20px;\r\n+      display: block;\r\n     }\r\n \r\n-    /* Button styling */\r\n-    .pdf-button {\r\n-      padding: 10px 18px;\r\n-      font-size: 0.95rem;\r\n-      font-weight: 500;\r\n-      background: #007bff;\r\n-      color: #fff;\r\n-      border: none;\r\n-      border-radius: 8px;\r\n-      cursor: pointer;\r\n-      transition: 0.3s ease;\r\n-    }\r\n-\r\n-    .pdf-button:hover {\r\n-      background: #0056b3;\r\n-    }\r\n-\r\n-    /* Loading state */\r\n     .loading {\r\n       font-size: 0.9rem;\r\n       color: #555;\r\n+      text-align: center;\r\n       margin-bottom: 15px;\r\n     }\r\n   </style>\r\n </head>\r\n@@ -71,37 +51,40 @@\n   <div class=\"pdf-container\">\r\n     <h3 class=\"pdf-title\">üìñ PDF Preview</h3>\r\n     <div id=\"loadingText\" class=\"loading\">Loading preview...</div>\r\n     <div id=\"pdfPreview\" class=\"pdf-preview\"></div>\r\n-    <button id=\"openFull\" class=\"pdf-button\">Open Full PDF</button>\r\n   </div>\r\n \r\n   <script>\r\n-    const url = \"books-pdf_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n+    const url = \"sample.pdf\"; // üîπ replace with your PDF file path\r\n+    const pagesToShow = 3;    // üîπ adjust this number for preview length\r\n \r\n-    // Load PDF\r\n     pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      // Limit preview to 1st page only\r\n-      pdf.getPage(1).then(page => {\r\n-        const scale = 1.2; // preview scale\r\n-        const viewport = page.getViewport({ scale });\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        const context = canvas.getContext(\"2d\");\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n+      const totalPages = Math.min(pagesToShow, pdf.numPages);\r\n \r\n-        document.getElementById(\"pdfPreview\").appendChild(canvas);\r\n+      let renderCount = 0;\r\n \r\n-        page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n-          document.getElementById(\"loadingText\").style.display = \"none\"; // hide loading\r\n+      for (let i = 1; i <= totalPages; i++) {\r\n+        pdf.getPage(i).then(page => {\r\n+          const scale = 1.1; // adjust zoom level\r\n+          const viewport = page.getViewport({ scale });\r\n+\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const context = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+\r\n+          document.getElementById(\"pdfPreview\").appendChild(canvas);\r\n+\r\n+          page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n+            renderCount++;\r\n+            if (renderCount === totalPages) {\r\n+              document.getElementById(\"loadingText\").style.display = \"none\";\r\n+            }\r\n+          });\r\n         });\r\n-      });\r\n+      }\r\n     });\r\n-\r\n-    // Button to open full PDF in new tab\r\n-    document.getElementById(\"openFull\").onclick = () => {\r\n-      window.open(url, \"_blank\");\r\n-    };\r\n   </script>\r\n \r\n </body>\r\n </html>\r\n"
                },
                {
                    "date": 1756972691906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n     <div id=\"pdfPreview\" class=\"pdf-preview\"></div>\r\n   </div>\r\n \r\n   <script>\r\n-    const url = \"sample.pdf\"; // üîπ replace with your PDF file path\r\n+    const url = \"_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n     const pagesToShow = 3;    // üîπ adjust this number for preview length\r\n \r\n     pdfjsLib.getDocument(url).promise.then(pdf => {\r\n       const totalPages = Math.min(pagesToShow, pdf.numPages);\r\n"
                },
                {
                    "date": 1756972714939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,10 +54,10 @@\n     <div id=\"pdfPreview\" class=\"pdf-preview\"></div>\r\n   </div>\r\n \r\n   <script>\r\n-    const url = \"_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n-    const pagesToShow = 3;    // üîπ adjust this number for preview length\r\n+    const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n+    const pagesToShow = 10;    // üîπ adjust this number for preview length\r\n \r\n     pdfjsLib.getDocument(url).promise.then(pdf => {\r\n       const totalPages = Math.min(pagesToShow, pdf.numPages);\r\n \r\n"
                },
                {
                    "date": 1756972738515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n   </div>\r\n \r\n   <script>\r\n     const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n-    const pagesToShow = 10;    // üîπ adjust this number for preview length\r\n+    const pagesToShow = 50;    // üîπ adjust this number for preview length\r\n \r\n     pdfjsLib.getDocument(url).promise.then(pdf => {\r\n       const totalPages = Math.min(pagesToShow, pdf.numPages);\r\n \r\n"
                },
                {
                    "date": 1756972818558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,89 +1,180 @@\n <!DOCTYPE html>\r\n <html lang=\"en\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n-  <title>PDF Multi-Page Preview</title>\r\n+  <title>PDF Viewer with Sidebar</title>\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <style>\r\n     body {\r\n+      margin: 0;\r\n+      font-family: Arial, sans-serif;\r\n       background: #f5f7fa;\r\n-      font-family: Arial, sans-serif;\r\n-      margin: 0;\r\n-      padding: 40px;\r\n     }\r\n \r\n-    .pdf-container {\r\n-      max-width: 700px;\r\n-      margin: 0 auto;\r\n-      padding: 20px;\r\n+    .pdf-wrapper {\r\n+      display: flex;\r\n+      height: 100vh;\r\n+    }\r\n+\r\n+    /* Sidebar with page list */\r\n+    .pdf-sidebar {\r\n+      width: 120px;\r\n       background: #fff;\r\n-      border-radius: 12px;\r\n-      box-shadow: 0 6px 16px rgba(0,0,0,0.1);\r\n+      border-right: 1px solid #ddd;\r\n+      padding: 15px 10px;\r\n+      box-shadow: 2px 0 6px rgba(0,0,0,0.05);\r\n+      overflow-y: auto;\r\n     }\r\n \r\n-    .pdf-title {\r\n-      margin-bottom: 20px;\r\n-      font-size: 1.3rem;\r\n-      font-weight: 600;\r\n+    .pdf-sidebar h4 {\r\n+      margin: 0 0 10px;\r\n+      font-size: 0.9rem;\r\n       color: #333;\r\n       text-align: center;\r\n     }\r\n \r\n-    .pdf-preview canvas {\r\n-      width: 100%;\r\n-      height: auto;\r\n-      border-radius: 8px;\r\n-      box-shadow: 0 4px 10px rgba(0,0,0,0.15);\r\n-      margin-bottom: 20px;\r\n-      display: block;\r\n+    .page-list {\r\n+      list-style: none;\r\n+      padding: 0;\r\n+      margin: 0;\r\n     }\r\n \r\n-    .loading {\r\n-      font-size: 0.9rem;\r\n-      color: #555;\r\n+    .page-list li {\r\n+      padding: 6px 8px;\r\n+      margin: 4px 0;\r\n       text-align: center;\r\n+      border-radius: 6px;\r\n+      cursor: pointer;\r\n+      transition: 0.2s;\r\n+    }\r\n+\r\n+    .page-list li:hover {\r\n+      background: #f0f0f0;\r\n+    }\r\n+\r\n+    .page-list li.active {\r\n+      background: #007bff;\r\n+      color: #fff;\r\n+      font-weight: bold;\r\n+    }\r\n+\r\n+    /* Main viewer */\r\n+    .pdf-main {\r\n+      flex: 1;\r\n+      display: flex;\r\n+      flex-direction: column;\r\n+      align-items: center;\r\n+      padding: 20px;\r\n+      overflow-y: auto;\r\n+    }\r\n+\r\n+    .pdf-controls {\r\n       margin-bottom: 15px;\r\n     }\r\n+\r\n+    .pdf-controls button {\r\n+      padding: 6px 12px;\r\n+      margin: 0 5px;\r\n+      font-size: 0.9rem;\r\n+      border: none;\r\n+      border-radius: 6px;\r\n+      background: #007bff;\r\n+      color: #fff;\r\n+      cursor: pointer;\r\n+      transition: 0.3s;\r\n+    }\r\n+\r\n+    .pdf-controls button:hover {\r\n+      background: #0056b3;\r\n+    }\r\n+\r\n+    #pdfCanvas {\r\n+      border-radius: 8px;\r\n+      box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n+      background: #fff;\r\n+    }\r\n   </style>\r\n </head>\r\n <body>\r\n \r\n-  <div class=\"pdf-container\">\r\n-    <h3 class=\"pdf-title\">üìñ PDF Preview</h3>\r\n-    <div id=\"loadingText\" class=\"loading\">Loading preview...</div>\r\n-    <div id=\"pdfPreview\" class=\"pdf-preview\"></div>\r\n+  <div class=\"pdf-wrapper\">\r\n+    <!-- Sidebar -->\r\n+    <div class=\"pdf-sidebar\">\r\n+      <h4>Pages</h4>\r\n+      <ul id=\"pageList\" class=\"page-list\"></ul>\r\n+    </div>\r\n+\r\n+    <!-- Main content -->\r\n+    <div class=\"pdf-main\">\r\n+      <div class=\"pdf-controls\">\r\n+        <button id=\"zoomIn\">Zoom In ‚ûï</button>\r\n+        <button id=\"zoomOut\">Zoom Out ‚ûñ</button>\r\n+      </div>\r\n+      <canvas id=\"pdfCanvas\"></canvas>\r\n+    </div>\r\n   </div>\r\n \r\n   <script>\r\n-    const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n-    const pagesToShow = 50;    // üîπ adjust this number for preview length\r\n+    const url = \"sample.pdf\"; // üîπ replace with your PDF file path\r\n+    let pdfDoc = null;\r\n+    let currentPage = 1;\r\n+    let scale = 1.2; // initial zoom\r\n+    const canvas = document.getElementById(\"pdfCanvas\");\r\n+    const ctx = canvas.getContext(\"2d\");\r\n \r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      const totalPages = Math.min(pagesToShow, pdf.numPages);\r\n+    // Render a given page\r\n+    function renderPage(num) {\r\n+      pdfDoc.getPage(num).then(page => {\r\n+        const viewport = page.getViewport({ scale });\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n \r\n-      let renderCount = 0;\r\n+        const renderContext = {\r\n+          canvasContext: ctx,\r\n+          viewport: viewport\r\n+        };\r\n+        page.render(renderContext);\r\n \r\n-      for (let i = 1; i <= totalPages; i++) {\r\n-        pdf.getPage(i).then(page => {\r\n-          const scale = 1.1; // adjust zoom level\r\n-          const viewport = page.getViewport({ scale });\r\n+        // Update active page in sidebar\r\n+        document.querySelectorAll(\"#pageList li\").forEach(li => li.classList.remove(\"active\"));\r\n+        document.querySelector(`#pageList li[data-page='${num}']`).classList.add(\"active\");\r\n+      });\r\n+    }\r\n \r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const context = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n+    // Build page list in sidebar\r\n+    function buildPageList() {\r\n+      const pageList = document.getElementById(\"pageList\");\r\n+      for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n+        const li = document.createElement(\"li\");\r\n+        li.textContent = i;\r\n+        li.dataset.page = i;\r\n+        li.onclick = () => {\r\n+          currentPage = i;\r\n+          renderPage(currentPage);\r\n+        };\r\n+        pageList.appendChild(li);\r\n+      }\r\n+    }\r\n \r\n-          document.getElementById(\"pdfPreview\").appendChild(canvas);\r\n+    // Zoom controls\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      renderPage(currentPage);\r\n+    };\r\n \r\n-          page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n-            renderCount++;\r\n-            if (renderCount === totalPages) {\r\n-              document.getElementById(\"loadingText\").style.display = \"none\";\r\n-            }\r\n-          });\r\n-        });\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        renderPage(currentPage);\r\n       }\r\n+    };\r\n+\r\n+    // Load PDF\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n+      buildPageList();\r\n+      renderPage(currentPage);\r\n     });\r\n   </script>\r\n \r\n </body>\r\n"
                },
                {
                    "date": 1756972827950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n     </div>\r\n   </div>\r\n \r\n   <script>\r\n-    const url = \"sample.pdf\"; // üîπ replace with your PDF file path\r\n+    const url = \"_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n     let pdfDoc = null;\r\n     let currentPage = 1;\r\n     let scale = 1.2; // initial zoom\r\n     const canvas = document.getElementById(\"pdfCanvas\");\r\n"
                },
                {
                    "date": 1756972836845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n     </div>\r\n   </div>\r\n \r\n   <script>\r\n-    const url = \"_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n+    const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n     let pdfDoc = null;\r\n     let currentPage = 1;\r\n     let scale = 1.2; // initial zoom\r\n     const canvas = document.getElementById(\"pdfCanvas\");\r\n"
                },
                {
                    "date": 1756972883481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,80 +1,31 @@\n <!DOCTYPE html>\r\n <html lang=\"en\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n-  <title>PDF Viewer with Sidebar</title>\r\n+  <title>PDF Scrollable Viewer</title>\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <style>\r\n     body {\r\n       margin: 0;\r\n       font-family: Arial, sans-serif;\r\n       background: #f5f7fa;\r\n-    }\r\n-\r\n-    .pdf-wrapper {\r\n       display: flex;\r\n+      flex-direction: column;\r\n       height: 100vh;\r\n     }\r\n \r\n-    /* Sidebar with page list */\r\n-    .pdf-sidebar {\r\n-      width: 120px;\r\n+    /* Controls at top */\r\n+    .pdf-controls {\r\n       background: #fff;\r\n-      border-right: 1px solid #ddd;\r\n-      padding: 15px 10px;\r\n-      box-shadow: 2px 0 6px rgba(0,0,0,0.05);\r\n-      overflow-y: auto;\r\n-    }\r\n-\r\n-    .pdf-sidebar h4 {\r\n-      margin: 0 0 10px;\r\n-      font-size: 0.9rem;\r\n-      color: #333;\r\n+      padding: 10px;\r\n+      border-bottom: 1px solid #ddd;\r\n       text-align: center;\r\n+      box-shadow: 0 2px 5px rgba(0,0,0,0.05);\r\n     }\r\n \r\n-    .page-list {\r\n-      list-style: none;\r\n-      padding: 0;\r\n-      margin: 0;\r\n-    }\r\n-\r\n-    .page-list li {\r\n-      padding: 6px 8px;\r\n-      margin: 4px 0;\r\n-      text-align: center;\r\n-      border-radius: 6px;\r\n-      cursor: pointer;\r\n-      transition: 0.2s;\r\n-    }\r\n-\r\n-    .page-list li:hover {\r\n-      background: #f0f0f0;\r\n-    }\r\n-\r\n-    .page-list li.active {\r\n-      background: #007bff;\r\n-      color: #fff;\r\n-      font-weight: bold;\r\n-    }\r\n-\r\n-    /* Main viewer */\r\n-    .pdf-main {\r\n-      flex: 1;\r\n-      display: flex;\r\n-      flex-direction: column;\r\n-      align-items: center;\r\n-      padding: 20px;\r\n-      overflow-y: auto;\r\n-    }\r\n-\r\n-    .pdf-controls {\r\n-      margin-bottom: 15px;\r\n-    }\r\n-\r\n     .pdf-controls button {\r\n-      padding: 6px 12px;\r\n+      padding: 8px 14px;\r\n       margin: 0 5px;\r\n       font-size: 0.9rem;\r\n       border: none;\r\n       border-radius: 6px;\r\n@@ -87,94 +38,86 @@\n     .pdf-controls button:hover {\r\n       background: #0056b3;\r\n     }\r\n \r\n-    #pdfCanvas {\r\n+    /* Scrollable viewer */\r\n+    .pdf-main {\r\n+      flex: 1;\r\n+      overflow-y: auto;\r\n+      padding: 20px;\r\n+    }\r\n+\r\n+    .pdf-page {\r\n+      display: flex;\r\n+      justify-content: center;\r\n+      margin-bottom: 20px;\r\n+    }\r\n+\r\n+    .pdf-page canvas {\r\n       border-radius: 8px;\r\n       box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n       background: #fff;\r\n+      transition: transform 0.2s ease;\r\n     }\r\n   </style>\r\n </head>\r\n <body>\r\n \r\n-  <div class=\"pdf-wrapper\">\r\n-    <!-- Sidebar -->\r\n-    <div class=\"pdf-sidebar\">\r\n-      <h4>Pages</h4>\r\n-      <ul id=\"pageList\" class=\"page-list\"></ul>\r\n-    </div>\r\n-\r\n-    <!-- Main content -->\r\n-    <div class=\"pdf-main\">\r\n-      <div class=\"pdf-controls\">\r\n-        <button id=\"zoomIn\">Zoom In ‚ûï</button>\r\n-        <button id=\"zoomOut\">Zoom Out ‚ûñ</button>\r\n-      </div>\r\n-      <canvas id=\"pdfCanvas\"></canvas>\r\n-    </div>\r\n+  <!-- Controls -->\r\n+  <div class=\"pdf-controls\">\r\n+    <button id=\"zoomIn\">Zoom In ‚ûï</button>\r\n+    <button id=\"zoomOut\">Zoom Out ‚ûñ</button>\r\n   </div>\r\n \r\n+  <!-- Main PDF container -->\r\n+  <div id=\"pdfContainer\" class=\"pdf-main\"></div>\r\n+\r\n   <script>\r\n-    const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n+    const url = \"sample.pdf\"; // üîπ replace with your PDF file path\r\n     let pdfDoc = null;\r\n-    let currentPage = 1;\r\n     let scale = 1.2; // initial zoom\r\n-    const canvas = document.getElementById(\"pdfCanvas\");\r\n-    const ctx = canvas.getContext(\"2d\");\r\n+    const container = document.getElementById(\"pdfContainer\");\r\n \r\n-    // Render a given page\r\n-    function renderPage(num) {\r\n-      pdfDoc.getPage(num).then(page => {\r\n-        const viewport = page.getViewport({ scale });\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n+    // Render all pages\r\n+    function renderPages() {\r\n+      container.innerHTML = \"\"; // clear old pages\r\n+      for (let num = 1; num <= pdfDoc.numPages; num++) {\r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const viewport = page.getViewport({ scale });\r\n \r\n-        const renderContext = {\r\n-          canvasContext: ctx,\r\n-          viewport: viewport\r\n-        };\r\n-        page.render(renderContext);\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n \r\n-        // Update active page in sidebar\r\n-        document.querySelectorAll(\"#pageList li\").forEach(li => li.classList.remove(\"active\"));\r\n-        document.querySelector(`#pageList li[data-page='${num}']`).classList.add(\"active\");\r\n-      });\r\n-    }\r\n+          const wrapper = document.createElement(\"div\");\r\n+          wrapper.className = \"pdf-page\";\r\n+          wrapper.appendChild(canvas);\r\n+          container.appendChild(wrapper);\r\n \r\n-    // Build page list in sidebar\r\n-    function buildPageList() {\r\n-      const pageList = document.getElementById(\"pageList\");\r\n-      for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n-        const li = document.createElement(\"li\");\r\n-        li.textContent = i;\r\n-        li.dataset.page = i;\r\n-        li.onclick = () => {\r\n-          currentPage = i;\r\n-          renderPage(currentPage);\r\n-        };\r\n-        pageList.appendChild(li);\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+        });\r\n       }\r\n     }\r\n \r\n-    // Zoom controls\r\n+    // Zoom in\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n-      renderPage(currentPage);\r\n+      renderPages();\r\n     };\r\n \r\n+    // Zoom out\r\n     document.getElementById(\"zoomOut\").onclick = () => {\r\n       if (scale > 0.4) {\r\n         scale -= 0.2;\r\n-        renderPage(currentPage);\r\n+        renderPages();\r\n       }\r\n     };\r\n \r\n     // Load PDF\r\n     pdfjsLib.getDocument(url).promise.then(pdf => {\r\n       pdfDoc = pdf;\r\n-      buildPageList();\r\n-      renderPage(currentPage);\r\n+      renderPages();\r\n     });\r\n   </script>\r\n \r\n </body>\r\n"
                },
                {
                    "date": 1756972891672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n   <!-- Main PDF container -->\r\n   <div id=\"pdfContainer\" class=\"pdf-main\"></div>\r\n \r\n   <script>\r\n-    const url = \"sample.pdf\"; // üîπ replace with your PDF file path\r\n+    const url = \"_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n     let pdfDoc = null;\r\n     let scale = 1.2; // initial zoom\r\n     const container = document.getElementById(\"pdfContainer\");\r\n \r\n"
                },
                {
                    "date": 1756972896849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n   <!-- Main PDF container -->\r\n   <div id=\"pdfContainer\" class=\"pdf-main\"></div>\r\n \r\n   <script>\r\n-    const url = \"_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n+    const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n     let pdfDoc = null;\r\n     let scale = 1.2; // initial zoom\r\n     const container = document.getElementById(\"pdfContainer\");\r\n \r\n"
                },
                {
                    "date": 1756972909711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n   <!-- Main PDF container -->\r\n   <div id=\"pdfContainer\" class=\"pdf-main\"></div>\r\n \r\n   <script>\r\n-    const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n+    const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt(1).pdf\"; // üîπ replace with your PDF file path\r\n     let pdfDoc = null;\r\n     let scale = 1.2; // initial zoom\r\n     const container = document.getElementById(\"pdfContainer\");\r\n \r\n"
                },
                {
                    "date": 1756972915660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n   <!-- Main PDF container -->\r\n   <div id=\"pdfContainer\" class=\"pdf-main\"></div>\r\n \r\n   <script>\r\n-    const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt(1).pdf\"; // üîπ replace with your PDF file path\r\n+    const url = \"books-pdf/Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt(1).pdf\"; // üîπ replace with your PDF file path\r\n     let pdfDoc = null;\r\n     let scale = 1.2; // initial zoom\r\n     const container = document.getElementById(\"pdfContainer\");\r\n \r\n"
                },
                {
                    "date": 1756972921225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n   <!-- Main PDF container -->\r\n   <div id=\"pdfContainer\" class=\"pdf-main\"></div>\r\n \r\n   <script>\r\n-    const url = \"books-pdf/Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt(1).pdf\"; // üîπ replace with your PDF file path\r\n+    const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt(1).pdf\"; // üîπ replace with your PDF file path\r\n     let pdfDoc = null;\r\n     let scale = 1.2; // initial zoom\r\n     const container = document.getElementById(\"pdfContainer\");\r\n \r\n"
                },
                {
                    "date": 1756972945403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,9 @@\n   <div class=\"pdf-controls\">\r\n     <button id=\"zoomIn\">Zoom In ‚ûï</button>\r\n     <button id=\"zoomOut\">Zoom Out ‚ûñ</button>\r\n   </div>\r\n+  <a href=\"\"></a>\r\n \r\n   <!-- Main PDF container -->\r\n   <div id=\"pdfContainer\" class=\"pdf-main\"></div>\r\n \r\n"
                },
                {
                    "date": 1756972953831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n   <div class=\"pdf-controls\">\r\n     <button id=\"zoomIn\">Zoom In ‚ûï</button>\r\n     <button id=\"zoomOut\">Zoom Out ‚ûñ</button>\r\n   </div>\r\n-  <a href=\"\"></a>\r\n+  <a href=\"books-pdf/\"></a>\r\n \r\n   <!-- Main PDF container -->\r\n   <div id=\"pdfContainer\" class=\"pdf-main\"></div>\r\n \r\n"
                },
                {
                    "date": 1756972960628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n   <div class=\"pdf-controls\">\r\n     <button id=\"zoomIn\">Zoom In ‚ûï</button>\r\n     <button id=\"zoomOut\">Zoom Out ‚ûñ</button>\r\n   </div>\r\n-  <a href=\"books-pdf/\"></a>\r\n+  <a href=\"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"></a>\r\n \r\n   <!-- Main PDF container -->\r\n   <div id=\"pdfContainer\" class=\"pdf-main\"></div>\r\n \r\n"
                },
                {
                    "date": 1756972968008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n   <!-- Main PDF container -->\r\n   <div id=\"pdfContainer\" class=\"pdf-main\"></div>\r\n \r\n   <script>\r\n-    const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt(1).pdf\"; // üîπ replace with your PDF file path\r\n+    const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n     let pdfDoc = null;\r\n     let scale = 1.2; // initial zoom\r\n     const container = document.getElementById(\"pdfContainer\");\r\n \r\n"
                },
                {
                    "date": 1756972979104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,10 +66,10 @@\n   <div class=\"pdf-controls\">\r\n     <button id=\"zoomIn\">Zoom In ‚ûï</button>\r\n     <button id=\"zoomOut\">Zoom Out ‚ûñ</button>\r\n   </div>\r\n-  <a href=\"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"></a>\r\n \r\n+\r\n   <!-- Main PDF container -->\r\n   <div id=\"pdfContainer\" class=\"pdf-main\"></div>\r\n \r\n   <script>\r\n"
                },
                {
                    "date": 1756973136421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,125 +1,72 @@\n <!DOCTYPE html>\r\n <html lang=\"en\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n-  <title>PDF Scrollable Viewer</title>\r\n-  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n+  <title>PDF Preview with Page Control</title>\r\n   <style>\r\n     body {\r\n+      font-family: Arial, sans-serif;\r\n       margin: 0;\r\n-      font-family: Arial, sans-serif;\r\n-      background: #f5f7fa;\r\n       display: flex;\r\n-      flex-direction: column;\r\n       height: 100vh;\r\n+      overflow: hidden;\r\n     }\r\n-\r\n-    /* Controls at top */\r\n-    .pdf-controls {\r\n-      background: #fff;\r\n+    #sidebar {\r\n+      width: 200px;\r\n+      background: #f8f9fa;\r\n+      border-right: 1px solid #ddd;\r\n       padding: 10px;\r\n-      border-bottom: 1px solid #ddd;\r\n-      text-align: center;\r\n-      box-shadow: 0 2px 5px rgba(0,0,0,0.05);\r\n+      overflow-y: auto;\r\n     }\r\n-\r\n-    .pdf-controls button {\r\n-      padding: 8px 14px;\r\n-      margin: 0 5px;\r\n-      font-size: 0.9rem;\r\n-      border: none;\r\n+    #sidebar h3 {\r\n+      font-size: 16px;\r\n+      margin-bottom: 10px;\r\n+    }\r\n+    #sidebar ul {\r\n+      list-style: none;\r\n+      padding: 0;\r\n+    }\r\n+    #sidebar ul li {\r\n+      padding: 6px 10px;\r\n+      cursor: pointer;\r\n       border-radius: 6px;\r\n-      background: #007bff;\r\n-      color: #fff;\r\n-      cursor: pointer;\r\n-      transition: 0.3s;\r\n     }\r\n-\r\n-    .pdf-controls button:hover {\r\n-      background: #0056b3;\r\n+    #sidebar ul li:hover {\r\n+      background: #e9ecef;\r\n     }\r\n-\r\n-    /* Scrollable viewer */\r\n-    .pdf-main {\r\n+    #viewer-container {\r\n       flex: 1;\r\n+      display: flex;\r\n+      flex-direction: column;\r\n+      overflow: hidden;\r\n+    }\r\n+    #controls {\r\n+      background: #fff;\r\n+      padding: 8px;\r\n+      border-bottom: 1px solid #ddd;\r\n+      display: flex;\r\n+      gap: 10px;\r\n+    }\r\n+    #pdfViewer {\r\n+      flex: 1;\r\n       overflow-y: auto;\r\n       padding: 20px;\r\n+      background: #f0f0f0;\r\n     }\r\n-\r\n-    .pdf-page {\r\n-      display: flex;\r\n-      justify-content: center;\r\n-      margin-bottom: 20px;\r\n+    canvas {\r\n+      display: block;\r\n+      margin: 0 auto 20px;\r\n+      box-shadow: 0 4px 12px rgba(0,0,0,0.2);\r\n+      border-radius: 6px;\r\n     }\r\n-\r\n-    .pdf-page canvas {\r\n-      border-radius: 8px;\r\n-      box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n-      background: #fff;\r\n-      transition: transform 0.2s ease;\r\n-    }\r\n   </style>\r\n </head>\r\n <body>\r\n-\r\n-  <!-- Controls -->\r\n-  <div class=\"pdf-controls\">\r\n-    <button id=\"zoomIn\">Zoom In ‚ûï</button>\r\n-    <button id=\"zoomOut\">Zoom Out ‚ûñ</button>\r\n+  <div id=\"sidebar\">\r\n+    <h3>Pages</h3>\r\n+    <ul id=\"pageList\"></ul>\r\n   </div>\r\n \r\n-\r\n-  <!-- Main PDF container -->\r\n-  <div id=\"pdfContainer\" class=\"pdf-main\"></div>\r\n-\r\n-  <script>\r\n-    const url = \"books-pdf/_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // üîπ replace with your PDF file path\r\n-    let pdfDoc = null;\r\n-    let scale = 1.2; // initial zoom\r\n-    const container = document.getElementById(\"pdfContainer\");\r\n-\r\n-    // Render all pages\r\n-    function renderPages() {\r\n-      container.innerHTML = \"\"; // clear old pages\r\n-      for (let num = 1; num <= pdfDoc.numPages; num++) {\r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const viewport = page.getViewport({ scale });\r\n-\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-\r\n-          const wrapper = document.createElement(\"div\");\r\n-          wrapper.className = \"pdf-page\";\r\n-          wrapper.appendChild(canvas);\r\n-          container.appendChild(wrapper);\r\n-\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-        });\r\n-      }\r\n-    }\r\n-\r\n-    // Zoom in\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n-      renderPages();\r\n-    };\r\n-\r\n-    // Zoom out\r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        renderPages();\r\n-      }\r\n-    };\r\n-\r\n-    // Load PDF\r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n-      renderPages();\r\n-    });\r\n-  </script>\r\n-\r\n-</body>\r\n-</html>\r\n+  <div id=\"viewer-container\">\r\n+    <div id=\"controls\">\r\n+      <but\r\n"
                },
                {
                    "date": 1756973145927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,5 +68,91 @@\n   </div>\r\n \r\n   <div id=\"viewer-container\">\r\n     <div id=\"controls\">\r\n-      <but\r\n+      <button id=\"zoomIn\">Zoom In</button>\r\n+      <button id=\"zoomOut\">Zoom Out</button>\r\n+      <label>\r\n+        Show pages: \r\n+        <input type=\"number\" id=\"visiblePages\" min=\"1\" value=\"2\" style=\"width:60px\">\r\n+      </label>\r\n+      <button id=\"applyPages\">Apply</button>\r\n+    </div>\r\n+    <div id=\"pdfViewer\"></div>\r\n+  </div>\r\n+\r\n+  <!-- PDF.js -->\r\n+  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n+  <script>\r\n+    const url = \"sample.pdf\"; // your PDF file\r\n+    let pdfDoc = null;\r\n+    let scale = 1.2;\r\n+    let visiblePages = 2; // default how many pages to show\r\n+\r\n+    const pdfViewer = document.getElementById(\"pdfViewer\");\r\n+    const pageList = document.getElementById(\"pageList\");\r\n+\r\n+    // Load PDF\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n+      renderPageList();\r\n+      renderPages();\r\n+    });\r\n+\r\n+    // Render list of pages\r\n+    function renderPageList() {\r\n+      pageList.innerHTML = \"\";\r\n+      for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n+        const li = document.createElement(\"li\");\r\n+        li.textContent = \"Page \" + i;\r\n+        li.onclick = () => scrollToPage(i);\r\n+        pageList.appendChild(li);\r\n+      }\r\n+    }\r\n+\r\n+    // Render limited pages\r\n+    function renderPages() {\r\n+      pdfViewer.innerHTML = \"\";\r\n+      for (let i = 1; i <= Math.min(visiblePages, pdfDoc.numPages); i++) {\r\n+        renderSinglePage(i);\r\n+      }\r\n+    }\r\n+\r\n+    // Render one page\r\n+    function renderSinglePage(num) {\r\n+      pdfDoc.getPage(num).then(page => {\r\n+        const viewport = page.getViewport({ scale });\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        const context = canvas.getContext(\"2d\");\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        pdfViewer.appendChild(canvas);\r\n+        page.render({ canvasContext: context, viewport });\r\n+      });\r\n+    }\r\n+\r\n+    // Scroll to a page\r\n+    function scrollToPage(num) {\r\n+      const canvas = pdfViewer.querySelectorAll(\"canvas\")[num - 1];\r\n+      if (canvas) {\r\n+        canvas.scrollIntoView({ behavior: \"smooth\" });\r\n+      }\r\n+    }\r\n+\r\n+    // Zoom\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      renderPages();\r\n+    };\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) scale -= 0.2;\r\n+      renderPages();\r\n+    };\r\n+\r\n+    // Change visible pages\r\n+    document.getElementById(\"applyPages\").onclick = () => {\r\n+      visiblePages = parseInt(document.getElementById(\"visiblePages\").value) || 1;\r\n+      renderPages();\r\n+    };\r\n+  </script>\r\n+</body>\r\n+</html>\r\n"
                },
                {
                    "date": 1756973194005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"sample.pdf\"; // your PDF file\r\n+    const url = \"_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // your PDF file\r\n     let pdfDoc = null;\r\n     let scale = 1.2;\r\n     let visiblePages = 2; // default how many pages to show\r\n \r\n"
                },
                {
                    "date": 1756974203371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,158 +1,184 @@\n <!DOCTYPE html>\r\n <html lang=\"en\">\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n-  <title>PDF Preview with Page Control</title>\r\n+  <title>PDF Preview</title>\r\n   <style>\r\n     body {\r\n+      margin: 0;\r\n       font-family: Arial, sans-serif;\r\n+      height: 100vh;\r\n+      display: flex;\r\n+      flex-direction: column;\r\n+    }\r\n+\r\n+    /* Top bar */\r\n+    #topbar {\r\n+      background: #6e4b4b;\r\n+      color: #fff;\r\n+      display: flex;\r\n+      justify-content: space-between;\r\n+      align-items: center;\r\n+      padding: 10px 20px;\r\n+    }\r\n+    #topbar h1 {\r\n       margin: 0;\r\n+      font-size: 18px;\r\n+    }\r\n+    #pageInfo {\r\n+      font-size: 14px;\r\n+    }\r\n+    .zoom-controls button, #closeBtn {\r\n+      background: none;\r\n+      border: none;\r\n+      color: #fff;\r\n+      font-size: 18px;\r\n+      margin-left: 10px;\r\n+      cursor: pointer;\r\n+    }\r\n+\r\n+    /* Layout */\r\n+    #container {\r\n+      flex: 1;\r\n       display: flex;\r\n-      height: 100vh;\r\n       overflow: hidden;\r\n     }\r\n+\r\n+    /* Sidebar thumbnails */\r\n     #sidebar {\r\n-      width: 200px;\r\n-      background: #f8f9fa;\r\n-      border-right: 1px solid #ddd;\r\n+      width: 180px;\r\n+      background: #f0f0f0;\r\n+      overflow-y: auto;\r\n+      border-right: 1px solid #ccc;\r\n       padding: 10px;\r\n-      overflow-y: auto;\r\n     }\r\n-    #sidebar h3 {\r\n-      font-size: 16px;\r\n+    #sidebar canvas {\r\n+      width: 100%;\r\n       margin-bottom: 10px;\r\n-    }\r\n-    #sidebar ul {\r\n-      list-style: none;\r\n-      padding: 0;\r\n-    }\r\n-    #sidebar ul li {\r\n-      padding: 6px 10px;\r\n+      border: 2px solid transparent;\r\n       cursor: pointer;\r\n-      border-radius: 6px;\r\n     }\r\n-    #sidebar ul li:hover {\r\n-      background: #e9ecef;\r\n+    #sidebar canvas.active {\r\n+      border: 2px solid #007bff;\r\n     }\r\n-    #viewer-container {\r\n+\r\n+    /* Main viewer */\r\n+    #viewer {\r\n       flex: 1;\r\n       display: flex;\r\n-      flex-direction: column;\r\n-      overflow: hidden;\r\n+      justify-content: center;\r\n+      align-items: center;\r\n+      background: #eaeaea;\r\n+      overflow: auto;\r\n     }\r\n-    #controls {\r\n-      background: #fff;\r\n-      padding: 8px;\r\n-      border-bottom: 1px solid #ddd;\r\n-      display: flex;\r\n-      gap: 10px;\r\n-    }\r\n-    #pdfViewer {\r\n-      flex: 1;\r\n-      overflow-y: auto;\r\n-      padding: 20px;\r\n-      background: #f0f0f0;\r\n-    }\r\n-    canvas {\r\n-      display: block;\r\n-      margin: 0 auto 20px;\r\n-      box-shadow: 0 4px 12px rgba(0,0,0,0.2);\r\n+    #mainCanvas {\r\n+      box-shadow: 0 4px 12px rgba(0,0,0,0.3);\r\n       border-radius: 6px;\r\n     }\r\n   </style>\r\n </head>\r\n <body>\r\n-  <div id=\"sidebar\">\r\n-    <h3>Pages</h3>\r\n-    <ul id=\"pageList\"></ul>\r\n+\r\n+  <!-- Top Bar -->\r\n+  <div id=\"topbar\">\r\n+    <div>Herbert <strong>Author</strong> Schildt</div>\r\n+    <div>\r\n+      <h1>Preview</h1>\r\n+      <div id=\"pageInfo\">1 / 1</div>\r\n+    </div>\r\n+    <div>\r\n+      <span class=\"zoom-controls\">\r\n+        <button id=\"zoomIn\">+</button>\r\n+        <button id=\"zoomOut\">‚àí</button>\r\n+      </span>\r\n+      <button id=\"closeBtn\">Close</button>\r\n+    </div>\r\n   </div>\r\n \r\n-  <div id=\"viewer-container\">\r\n-    <div id=\"controls\">\r\n-      <button id=\"zoomIn\">Zoom In</button>\r\n-      <button id=\"zoomOut\">Zoom Out</button>\r\n-      <label>\r\n-        Show pages: \r\n-        <input type=\"number\" id=\"visiblePages\" min=\"1\" value=\"2\" style=\"width:60px\">\r\n-      </label>\r\n-      <button id=\"applyPages\">Apply</button>\r\n+  <!-- Main Layout -->\r\n+  <div id=\"container\">\r\n+    <div id=\"sidebar\"></div>\r\n+    <div id=\"viewer\">\r\n+      <canvas id=\"mainCanvas\"></canvas>\r\n     </div>\r\n-    <div id=\"pdfViewer\"></div>\r\n   </div>\r\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"_Java_The_Complete_Reference_13th_Ed_-_Herbert_Schildt (1).pdf\"; // your PDF file\r\n+    const url = \"sample.pdf\"; // Your PDF\r\n     let pdfDoc = null;\r\n+    let currentPage = 1;\r\n     let scale = 1.2;\r\n-    let visiblePages = 2; // default how many pages to show\r\n \r\n-    const pdfViewer = document.getElementById(\"pdfViewer\");\r\n-    const pageList = document.getElementById(\"pageList\");\r\n+    const mainCanvas = document.getElementById(\"mainCanvas\");\r\n+    const mainCtx = mainCanvas.getContext(\"2d\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n \r\n     // Load PDF\r\n     pdfjsLib.getDocument(url).promise.then(pdf => {\r\n       pdfDoc = pdf;\r\n-      renderPageList();\r\n-      renderPages();\r\n+      pageInfo.textContent = `${currentPage} / ${pdfDoc.numPages}`;\r\n+      renderPage(currentPage);\r\n+      renderThumbnails();\r\n     });\r\n \r\n-    // Render list of pages\r\n-    function renderPageList() {\r\n-      pageList.innerHTML = \"\";\r\n-      for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n-        const li = document.createElement(\"li\");\r\n-        li.textContent = \"Page \" + i;\r\n-        li.onclick = () => scrollToPage(i);\r\n-        pageList.appendChild(li);\r\n-      }\r\n+    // Render a single page in main viewer\r\n+    function renderPage(num) {\r\n+      pdfDoc.getPage(num).then(page => {\r\n+        const viewport = page.getViewport({ scale });\r\n+        mainCanvas.width = viewport.width;\r\n+        mainCanvas.height = viewport.height;\r\n+        page.render({ canvasContext: mainCtx, viewport });\r\n+        pageInfo.textContent = `${num} / ${pdfDoc.numPages}`;\r\n+        highlightThumbnail(num);\r\n+      });\r\n     }\r\n \r\n-    // Render limited pages\r\n-    function renderPages() {\r\n-      pdfViewer.innerHTML = \"\";\r\n-      for (let i = 1; i <= Math.min(visiblePages, pdfDoc.numPages); i++) {\r\n-        renderSinglePage(i);\r\n+    // Render thumbnails in sidebar\r\n+    function renderThumbnails() {\r\n+      for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          canvas.onclick = () => {\r\n+            currentPage = i;\r\n+            renderPage(currentPage);\r\n+          };\r\n+          sidebar.appendChild(canvas);\r\n+        });\r\n       }\r\n     }\r\n \r\n-    // Render one page\r\n-    function renderSinglePage(num) {\r\n-      pdfDoc.getPage(num).then(page => {\r\n-        const viewport = page.getViewport({ scale });\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        const context = canvas.getContext(\"2d\");\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        pdfViewer.appendChild(canvas);\r\n-        page.render({ canvasContext: context, viewport });\r\n+    // Highlight active thumbnail\r\n+    function highlightThumbnail(num) {\r\n+      const canvases = sidebar.querySelectorAll(\"canvas\");\r\n+      canvases.forEach((c, idx) => {\r\n+        c.classList.toggle(\"active\", idx + 1 === num);\r\n       });\r\n     }\r\n \r\n-    // Scroll to a page\r\n-    function scrollToPage(num) {\r\n-      const canvas = pdfViewer.querySelectorAll(\"canvas\")[num - 1];\r\n-      if (canvas) {\r\n-        canvas.scrollIntoView({ behavior: \"smooth\" });\r\n-      }\r\n-    }\r\n-\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n-      renderPages();\r\n+      renderPage(currentPage);\r\n     };\r\n     document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) scale -= 0.2;\r\n-      renderPages();\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        renderPage(currentPage);\r\n+      }\r\n     };\r\n \r\n-    // Change visible pages\r\n-    document.getElementById(\"applyPages\").onclick = () => {\r\n-      visiblePages = parseInt(document.getElementById(\"visiblePages\").value) || 1;\r\n-      renderPages();\r\n+    // Close (just clears viewer for demo)\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n     };\r\n   </script>\r\n </body>\r\n </html>\r\n"
                },
                {
                    "date": 1756974229661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,26 +135,8 @@\n         highlightThumbnail(num);\r\n       });\r\n     }\r\n \r\n-    // Render thumbnails in sidebar\r\n-    function renderThumbnails() {\r\n-      for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          canvas.onclick = () => {\r\n-            currentPage = i;\r\n-            renderPage(currentPage);\r\n-          };\r\n-          sidebar.appendChild(canvas);\r\n-        });\r\n-      }\r\n-    }\r\n \r\n     // Highlight active thumbnail\r\n     function highlightThumbnail(num) {\r\n       const canvases = sidebar.querySelectorAll(\"canvas\");\r\n"
                },
                {
                    "date": 1756974250513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"sample.pdf\"; // Your PDF\r\n+    const url = \"[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\"; // Your PDF\r\n     let pdfDoc = null;\r\n     let currentPage = 1;\r\n     let scale = 1.2;\r\n \r\n"
                },
                {
                    "date": 1756974257349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\"; // Your PDF\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\"; // Your PDF\r\n     let pdfDoc = null;\r\n     let currentPage = 1;\r\n     let scale = 1.2;\r\n \r\n"
                },
                {
                    "date": 1756974269227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\"; // Your PDF\r\n     let pdfDoc = null;\r\n-    let currentPage = 1;\r\n+    let currentPage = 50;\r\n     let scale = 1.2;\r\n \r\n     const mainCanvas = document.getElementById(\"mainCanvas\");\r\n     const mainCtx = mainCanvas.getContext(\"2d\");\r\n"
                },
                {
                    "date": 1756974289152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,11 +105,11 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\"; // Your PDF\r\n+    const url = \"sample.pdf\"; // Your PDF\r\n     let pdfDoc = null;\r\n-    let currentPage = 50;\r\n+    let currentPage = 1;\r\n     let scale = 1.2;\r\n \r\n     const mainCanvas = document.getElementById(\"mainCanvas\");\r\n     const mainCtx = mainCanvas.getContext(\"2d\");\r\n@@ -135,8 +135,26 @@\n         highlightThumbnail(num);\r\n       });\r\n     }\r\n \r\n+    // Render thumbnails in sidebar\r\n+    function renderThumbnails() {\r\n+      for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          canvas.onclick = () => {\r\n+            currentPage = i;\r\n+            renderPage(currentPage);\r\n+          };\r\n+          sidebar.appendChild(canvas);\r\n+        });\r\n+      }\r\n+    }\r\n \r\n     // Highlight active thumbnail\r\n     function highlightThumbnail(num) {\r\n       const canvases = sidebar.querySelectorAll(\"canvas\");\r\n"
                },
                {
                    "date": 1756974303503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"sample.pdf\"; // Your PDF\r\n+    const url = \"[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\"; // Your PDF\r\n     let pdfDoc = null;\r\n     let currentPage = 1;\r\n     let scale = 1.2;\r\n \r\n"
                },
                {
                    "date": 1756974309155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\"; // Your PDF\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\"; // Your PDF\r\n     let pdfDoc = null;\r\n     let currentPage = 1;\r\n     let scale = 1.2;\r\n \r\n"
                },
                {
                    "date": 1756974345831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\"; // Your PDF\r\n     let pdfDoc = null;\r\n-    let currentPage = 1;\r\n+    let currentPage = 50;\r\n     let scale = 1.2;\r\n \r\n     const mainCanvas = document.getElementById(\"mainCanvas\");\r\n     const mainCtx = mainCanvas.getContext(\"2d\");\r\n"
                },
                {
                    "date": 1756974451609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,40 +105,53 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\"; // Your PDF\r\n+   <script>\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\"; \r\n     let pdfDoc = null;\r\n-    let currentPage = 50;\r\n     let scale = 1.2;\r\n+    let visiblePages = 5; // ‚¨ÖÔ∏è Limit how many pages to render\r\n \r\n-    const mainCanvas = document.getElementById(\"mainCanvas\");\r\n-    const mainCtx = mainCanvas.getContext(\"2d\");\r\n+    const pdfViewer = document.getElementById(\"viewer\"); // renamed for scrollable area\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n \r\n     // Load PDF\r\n     pdfjsLib.getDocument(url).promise.then(pdf => {\r\n       pdfDoc = pdf;\r\n-      pageInfo.textContent = `${currentPage} / ${pdfDoc.numPages}`;\r\n-      renderPage(currentPage);\r\n+      pageInfo.textContent = `1 - ${Math.min(visiblePages, pdfDoc.numPages)} / ${pdfDoc.numPages}`;\r\n+      renderPages();\r\n       renderThumbnails();\r\n     });\r\n \r\n-    // Render a single page in main viewer\r\n-    function renderPage(num) {\r\n+    // Render limited pages into scrollable viewer\r\n+    function renderPages() {\r\n+      pdfViewer.innerHTML = \"\"; // clear before re-render\r\n+      for (let i = 1; i <= Math.min(visiblePages, pdfDoc.numPages); i++) {\r\n+        renderSinglePage(i);\r\n+      }\r\n+    }\r\n+\r\n+    function renderSinglePage(num) {\r\n       pdfDoc.getPage(num).then(page => {\r\n         const viewport = page.getViewport({ scale });\r\n-        mainCanvas.width = viewport.width;\r\n-        mainCanvas.height = viewport.height;\r\n-        page.render({ canvasContext: mainCtx, viewport });\r\n-        pageInfo.textContent = `${num} / ${pdfDoc.numPages}`;\r\n-        highlightThumbnail(num);\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        const ctx = canvas.getContext(\"2d\");\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        canvas.style.display = \"block\";\r\n+        canvas.style.margin = \"20px auto\";\r\n+        canvas.style.boxShadow = \"0 4px 12px rgba(0,0,0,0.3)\";\r\n+        pdfViewer.appendChild(canvas);\r\n+\r\n+        page.render({ canvasContext: ctx, viewport });\r\n       });\r\n     }\r\n \r\n-    // Render thumbnails in sidebar\r\n+    // Render thumbnails\r\n     function renderThumbnails() {\r\n+      sidebar.innerHTML = \"\";\r\n       for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n         pdfDoc.getPage(i).then(page => {\r\n           const viewport = page.getViewport({ scale: 0.2 });\r\n           const canvas = document.createElement(\"canvas\");\r\n@@ -146,37 +159,31 @@\n           canvas.height = viewport.height;\r\n           canvas.width = viewport.width;\r\n           page.render({ canvasContext: ctx, viewport });\r\n           canvas.onclick = () => {\r\n-            currentPage = i;\r\n-            renderPage(currentPage);\r\n+            pdfViewer.scrollTo({\r\n+              top: pdfViewer.querySelectorAll(\"canvas\")[i-1]?.offsetTop || 0,\r\n+              behavior: \"smooth\"\r\n+            });\r\n           };\r\n           sidebar.appendChild(canvas);\r\n         });\r\n       }\r\n     }\r\n \r\n-    // Highlight active thumbnail\r\n-    function highlightThumbnail(num) {\r\n-      const canvases = sidebar.querySelectorAll(\"canvas\");\r\n-      canvases.forEach((c, idx) => {\r\n-        c.classList.toggle(\"active\", idx + 1 === num);\r\n-      });\r\n-    }\r\n-\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n-      renderPage(currentPage);\r\n+      renderPages();\r\n     };\r\n     document.getElementById(\"zoomOut\").onclick = () => {\r\n       if (scale > 0.4) {\r\n         scale -= 0.2;\r\n-        renderPage(currentPage);\r\n+        renderPages();\r\n       }\r\n     };\r\n \r\n-    // Close (just clears viewer for demo)\r\n+    // Close\r\n     document.getElementById(\"closeBtn\").onclick = () => {\r\n       document.getElementById(\"container\").style.display = \"none\";\r\n     };\r\n   </script>\r\n"
                },
                {
                    "date": 1756974467746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,10 +104,9 @@\n   </div>\r\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n-  <script>\r\n-   <script>\r\n+<script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\"; \r\n     let pdfDoc = null;\r\n     let scale = 1.2;\r\n     let visiblePages = 5; // ‚¨ÖÔ∏è Limit how many pages to render\r\n@@ -185,7 +184,8 @@\n     // Close\r\n     document.getElementById(\"closeBtn\").onclick = () => {\r\n       document.getElementById(\"container\").style.display = \"none\";\r\n     };\r\n-  </script>\r\n+</script>\r\n+\r\n </body>\r\n </html>\r\n"
                },
                {
                    "date": 1756974554180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n <!DOCTYPE html>\r\n <html lang=\"en\">\r\n+\r\n <head>\r\n   <meta charset=\"UTF-8\">\r\n   <title>PDF Preview</title>\r\n   <style>\r\n@@ -20,16 +21,20 @@\n       justify-content: space-between;\r\n       align-items: center;\r\n       padding: 10px 20px;\r\n     }\r\n+\r\n     #topbar h1 {\r\n       margin: 0;\r\n       font-size: 18px;\r\n     }\r\n+\r\n     #pageInfo {\r\n       font-size: 14px;\r\n     }\r\n-    .zoom-controls button, #closeBtn {\r\n+\r\n+    .zoom-controls button,\r\n+    #closeBtn {\r\n       background: none;\r\n       border: none;\r\n       color: #fff;\r\n       font-size: 18px;\r\n@@ -51,14 +56,16 @@\n       overflow-y: auto;\r\n       border-right: 1px solid #ccc;\r\n       padding: 10px;\r\n     }\r\n+\r\n     #sidebar canvas {\r\n       width: 100%;\r\n       margin-bottom: 10px;\r\n       border: 2px solid transparent;\r\n       cursor: pointer;\r\n     }\r\n+\r\n     #sidebar canvas.active {\r\n       border: 2px solid #007bff;\r\n     }\r\n \r\n@@ -70,14 +77,24 @@\n       align-items: center;\r\n       background: #eaeaea;\r\n       overflow: auto;\r\n     }\r\n+\r\n     #mainCanvas {\r\n-      box-shadow: 0 4px 12px rgba(0,0,0,0.3);\r\n+      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n       border-radius: 6px;\r\n     }\r\n+\r\n+    #viewer {\r\n+  flex: 1;\r\n+  overflow-y: auto;   /* ‚úÖ enables vertical scroll */\r\n+  background: #eaeaea;\r\n+  padding: 20px;\r\n+}\r\n+\r\n   </style>\r\n </head>\r\n+\r\n <body>\r\n \r\n   <!-- Top Bar -->\r\n   <div id=\"topbar\">\r\n@@ -104,10 +121,10 @@\n   </div>\r\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n-<script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\"; \r\n+  <script>\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n     let scale = 1.2;\r\n     let visiblePages = 5; // ‚¨ÖÔ∏è Limit how many pages to render\r\n \r\n@@ -159,9 +176,9 @@\n           canvas.width = viewport.width;\r\n           page.render({ canvasContext: ctx, viewport });\r\n           canvas.onclick = () => {\r\n             pdfViewer.scrollTo({\r\n-              top: pdfViewer.querySelectorAll(\"canvas\")[i-1]?.offsetTop || 0,\r\n+              top: pdfViewer.querySelectorAll(\"canvas\")[i - 1]?.offsetTop || 0,\r\n               behavior: \"smooth\"\r\n             });\r\n           };\r\n           sidebar.appendChild(canvas);\r\n@@ -184,8 +201,9 @@\n     // Close\r\n     document.getElementById(\"closeBtn\").onclick = () => {\r\n       document.getElementById(\"container\").style.display = \"none\";\r\n     };\r\n-</script>\r\n+  </script>\r\n \r\n </body>\r\n-</html>\r\n+\r\n+</html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756974588945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,14 +84,14 @@\n       border-radius: 6px;\r\n     }\r\n \r\n     #viewer {\r\n-  flex: 1;\r\n-  overflow-y: auto;   /* ‚úÖ enables vertical scroll */\r\n-  background: #eaeaea;\r\n-  padding: 20px;\r\n-}\r\n-\r\n+      flex: 1;\r\n+      overflow-y: auto;\r\n+      /* ‚úÖ enables vertical scroll */\r\n+      background: #eaeaea;\r\n+      padding: 20px;\r\n+    }\r\n   </style>\r\n </head>\r\n \r\n <body>\r\n@@ -140,15 +140,16 @@\n       renderThumbnails();\r\n     });\r\n \r\n     // Render limited pages into scrollable viewer\r\n-    function renderPages() {\r\n-      pdfViewer.innerHTML = \"\"; // clear before re-render\r\n-      for (let i = 1; i <= Math.min(visiblePages, pdfDoc.numPages); i++) {\r\n-        renderSinglePage(i);\r\n-      }\r\n-    }\r\n+function renderPages() {\r\n+  pdfViewer.innerHTML = \"\"; \r\n+  for (let i = 1; i <= Math.min(visiblePages, pdfDoc.numPages); i++) {\r\n+    renderSinglePage(i); // each page gets its own canvas\r\n+  }\r\n+}\r\n \r\n+\r\n     function renderSinglePage(num) {\r\n       pdfDoc.getPage(num).then(page => {\r\n         const viewport = page.getViewport({ scale });\r\n         const canvas = document.createElement(\"canvas\");\r\n"
                },
                {
                    "date": 1756974782647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,9 @@\n     /* Main viewer */\r\n     #viewer {\r\n       flex: 1;\r\n       display: flex;\r\n+      flex-direction: column;\r\n       justify-content: center;\r\n       align-items: center;\r\n       background: #eaeaea;\r\n       overflow: auto;\r\n@@ -140,14 +141,14 @@\n       renderThumbnails();\r\n     });\r\n \r\n     // Render limited pages into scrollable viewer\r\n-function renderPages() {\r\n-  pdfViewer.innerHTML = \"\"; \r\n-  for (let i = 1; i <= Math.min(visiblePages, pdfDoc.numPages); i++) {\r\n-    renderSinglePage(i); // each page gets its own canvas\r\n-  }\r\n-}\r\n+    function renderPages() {\r\n+      pdfViewer.innerHTML = \"\";\r\n+      for (let i = 1; i <= Math.min(visiblePages, pdfDoc.numPages); i++) {\r\n+        renderSinglePage(i); // each page gets its own canvas\r\n+      }\r\n+    }\r\n \r\n \r\n     function renderSinglePage(num) {\r\n       pdfDoc.getPage(num).then(page => {\r\n"
                },
                {
                    "date": 1756974800348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n     let scale = 1.2;\r\n-    let visiblePages = 5; // ‚¨ÖÔ∏è Limit how many pages to render\r\n+    let visiblePages = 1; // ‚¨ÖÔ∏è Limit how many pages to render\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\"); // renamed for scrollable area\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n"
                },
                {
                    "date": 1756974916422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,11 +124,12 @@\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-    let pdfDoc = null;\r\n-    let scale = 1.2;\r\n-    let visiblePages = 1; // ‚¨ÖÔ∏è Limit how many pages to render\r\n+   let pdfDoc = null;\r\n+let visiblePages = 10; // default limit\r\n+let currentPage = 1;\r\n+let limitPages = 50; // <-- set how many pages you want to allow\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\"); // renamed for scrollable area\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n"
                },
                {
                    "date": 1756974927440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,25 +124,30 @@\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-   let pdfDoc = null;\r\n-let visiblePages = 10; // default limit\r\n-let currentPage = 1;\r\n-let limitPages = 50; // <-- set how many pages you want to allow\r\n+    let pdfDoc = null;\r\n+    let visiblePages = 10; // default limit\r\n+    let currentPage = 1;\r\n+    let limitPages = 50; // <-- set how many pages you want to allow\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\"); // renamed for scrollable area\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n     // Load PDF\r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n-      pageInfo.textContent = `1 - ${Math.min(visiblePages, pdfDoc.numPages)} / ${pdfDoc.numPages}`;\r\n-      renderPages();\r\n-      renderThumbnails();\r\n-    });\r\n+   pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n \r\n+  // limit to either user-defined limit or total number of pages\r\n+  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+\r\n+  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+\r\n+  renderPages(maxVisible);\r\n+  renderThumbnails(maxVisible);\r\n+});\r\n+\r\n     // Render limited pages into scrollable viewer\r\n     function renderPages() {\r\n       pdfViewer.innerHTML = \"\";\r\n       for (let i = 1; i <= Math.min(visiblePages, pdfDoc.numPages); i++) {\r\n"
                },
                {
                    "date": 1756974955256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,29 +134,68 @@\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n     // Load PDF\r\n-   pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n \r\n-  // limit to either user-defined limit or total number of pages\r\n-  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+      // limit to either user-defined limit or total number of pages\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  renderPages(maxVisible);\r\n-  renderThumbnails(maxVisible);\r\n-});\r\n+      renderPages(maxVisible);\r\n+      renderThumbnails(maxVisible);\r\n+    });\r\n \r\n     // Render limited pages into scrollable viewer\r\n-    function renderPages() {\r\n-      pdfViewer.innerHTML = \"\";\r\n-      for (let i = 1; i <= Math.min(visiblePages, pdfDoc.numPages); i++) {\r\n-        renderSinglePage(i); // each page gets its own canvas\r\n-      }\r\n-    }\r\n+  function renderPages(maxVisible) {\r\n+  const viewer = document.getElementById(\"viewer\");\r\n+  viewer.innerHTML = \"\";\r\n \r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    viewer.appendChild(canvas);\r\n \r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale: 1.5 });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+\r\n+      page.render({\r\n+        canvasContext: context,\r\n+        viewport: viewport\r\n+      });\r\n+    });\r\n+  }\r\n+}\r\n+\r\n+function renderThumbnails(maxVisible) {\r\n+  const thumbs = document.getElementById(\"thumbnails\");\r\n+  thumbs.innerHTML = \"\";\r\n+\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"thumbnail\");\r\n+    thumbs.appendChild(canvas);\r\n+\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+\r\n+      page.render({\r\n+        canvasContext: context,\r\n+        viewport: viewport\r\n+      });\r\n+    });\r\n+  }\r\n+}\r\n+\r\n+\r\n     function renderSinglePage(num) {\r\n       pdfDoc.getPage(num).then(page => {\r\n         const viewport = page.getViewport({ scale });\r\n         const canvas = document.createElement(\"canvas\");\r\n"
                },
                {
                    "date": 1756974974748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,32 +170,8 @@\n     });\r\n   }\r\n }\r\n \r\n-function renderThumbnails(maxVisible) {\r\n-  const thumbs = document.getElementById(\"thumbnails\");\r\n-  thumbs.innerHTML = \"\";\r\n-\r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"thumbnail\");\r\n-    thumbs.appendChild(canvas);\r\n-\r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const context = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-\r\n-      page.render({\r\n-        canvasContext: context,\r\n-        viewport: viewport\r\n-      });\r\n-    });\r\n-  }\r\n-}\r\n-\r\n-\r\n     function renderSinglePage(num) {\r\n       pdfDoc.getPage(num).then(page => {\r\n         const viewport = page.getViewport({ scale });\r\n         const canvas = document.createElement(\"canvas\");\r\n"
                },
                {
                    "date": 1756974992353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,30 +147,30 @@\n       renderThumbnails(maxVisible);\r\n     });\r\n \r\n     // Render limited pages into scrollable viewer\r\n-  function renderPages(maxVisible) {\r\n-  const viewer = document.getElementById(\"viewer\");\r\n-  viewer.innerHTML = \"\";\r\n+    function renderPages(maxVisible) {\r\n+      const viewer = document.getElementById(\"viewer\");\r\n+      viewer.innerHTML = \"\";\r\n \r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    viewer.appendChild(canvas);\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        viewer.appendChild(canvas);\r\n \r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const context = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale: 1.5 });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale: 1.5 });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n \r\n-      page.render({\r\n-        canvasContext: context,\r\n-        viewport: viewport\r\n-      });\r\n-    });\r\n-  }\r\n-}\r\n+          page.render({\r\n+            canvasContext: context,\r\n+            viewport: viewport\r\n+          });\r\n+        });\r\n+      }\r\n+    }\r\n \r\n     function renderSinglePage(num) {\r\n       pdfDoc.getPage(num).then(page => {\r\n         const viewport = page.getViewport({ scale });\r\n@@ -187,29 +187,31 @@\n       });\r\n     }\r\n \r\n     // Render thumbnails\r\n-    function renderThumbnails() {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          canvas.onclick = () => {\r\n-            pdfViewer.scrollTo({\r\n-              top: pdfViewer.querySelectorAll(\"canvas\")[i - 1]?.offsetTop || 0,\r\n-              behavior: \"smooth\"\r\n-            });\r\n-          };\r\n-          sidebar.appendChild(canvas);\r\n-        });\r\n-      }\r\n-    }\r\n+  function renderThumbnails(maxVisible) {\r\n+  const thumbs = document.getElementById(\"thumbnails\");\r\n+  thumbs.innerHTML = \"\";\r\n \r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"thumbnail\");\r\n+    thumbs.appendChild(canvas);\r\n+\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+\r\n+      page.render({\r\n+        canvasContext: context,\r\n+        viewport: viewport\r\n+      });\r\n+    });\r\n+  }\r\n+}\r\n+\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n       renderPages();\r\n"
                },
                {
                    "date": 1756975007153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,47 +170,47 @@\n         });\r\n       }\r\n     }\r\n \r\n-    function renderSinglePage(num) {\r\n-      pdfDoc.getPage(num).then(page => {\r\n-        const viewport = page.getViewport({ scale });\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        const ctx = canvas.getContext(\"2d\");\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        canvas.style.display = \"block\";\r\n-        canvas.style.margin = \"20px auto\";\r\n-        canvas.style.boxShadow = \"0 4px 12px rgba(0,0,0,0.3)\";\r\n-        pdfViewer.appendChild(canvas);\r\n+    // function renderSinglePage(num) {\r\n+    //   pdfDoc.getPage(num).then(page => {\r\n+    //     const viewport = page.getViewport({ scale });\r\n+    //     const canvas = document.createElement(\"canvas\");\r\n+    //     const ctx = canvas.getContext(\"2d\");\r\n+    //     canvas.height = viewport.height;\r\n+    //     canvas.width = viewport.width;\r\n+    //     canvas.style.display = \"block\";\r\n+    //     canvas.style.margin = \"20px auto\";\r\n+    //     canvas.style.boxShadow = \"0 4px 12px rgba(0,0,0,0.3)\";\r\n+    //     pdfViewer.appendChild(canvas);\r\n \r\n-        page.render({ canvasContext: ctx, viewport });\r\n-      });\r\n-    }\r\n+    //     page.render({ canvasContext: ctx, viewport });\r\n+    //   });\r\n+    // }\r\n \r\n     // Render thumbnails\r\n-  function renderThumbnails(maxVisible) {\r\n-  const thumbs = document.getElementById(\"thumbnails\");\r\n-  thumbs.innerHTML = \"\";\r\n+    function renderThumbnails(maxVisible) {\r\n+      const thumbs = document.getElementById(\"thumbnails\");\r\n+      thumbs.innerHTML = \"\";\r\n \r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"thumbnail\");\r\n-    thumbs.appendChild(canvas);\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"thumbnail\");\r\n+        thumbs.appendChild(canvas);\r\n \r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const context = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n \r\n-      page.render({\r\n-        canvasContext: context,\r\n-        viewport: viewport\r\n-      });\r\n-    });\r\n-  }\r\n-}\r\n+          page.render({\r\n+            canvasContext: context,\r\n+            viewport: viewport\r\n+          });\r\n+        });\r\n+      }\r\n+    }\r\n \r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n"
                },
                {
                    "date": 1756975021941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n-    let visiblePages = 10; // default limit\r\n+    let visiblePages = 1; // default limit\r\n     let currentPage = 1;\r\n     let limitPages = 50; // <-- set how many pages you want to allow\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\"); // renamed for scrollable area\r\n"
                },
                {
                    "date": 1756975062065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n     let visiblePages = 1; // default limit\r\n-    let currentPage = 1;\r\n+    let currentPage = 50;\r\n     let limitPages = 50; // <-- set how many pages you want to allow\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\"); // renamed for scrollable area\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n"
                },
                {
                    "date": 1756975102269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,111 +123,99 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-    let pdfDoc = null;\r\n-    let visiblePages = 1; // default limit\r\n-    let currentPage = 50;\r\n-    let limitPages = 50; // <-- set how many pages you want to allow\r\n+   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\"); // renamed for scrollable area\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+let pdfDoc = null;\r\n+let scale = 1.5;          // default zoom\r\n+let currentPage = 1;      // starting page\r\n+let limitPages = 50;      // how many pages to allow preview\r\n \r\n-    // Load PDF\r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-      // limit to either user-defined limit or total number of pages\r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+// Load PDF\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n \r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+  // limit visible pages to user-defined limit\r\n+  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-      renderPages(maxVisible);\r\n-      renderThumbnails(maxVisible);\r\n-    });\r\n+  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-    // Render limited pages into scrollable viewer\r\n-    function renderPages(maxVisible) {\r\n-      const viewer = document.getElementById(\"viewer\");\r\n-      viewer.innerHTML = \"\";\r\n+  renderPages(maxVisible);\r\n+  renderThumbnails(maxVisible);\r\n+});\r\n \r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        viewer.appendChild(canvas);\r\n+// Render multiple pages (limited)\r\n+function renderPages(maxVisible) {\r\n+  pdfViewer.innerHTML = \"\";\r\n \r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const context = canvas.getContext(\"2d\");\r\n-          const viewport = page.getViewport({ scale: 1.5 });\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    pdfViewer.appendChild(canvas);\r\n \r\n-          page.render({\r\n-            canvasContext: context,\r\n-            viewport: viewport\r\n-          });\r\n-        });\r\n-      }\r\n-    }\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n \r\n-    // function renderSinglePage(num) {\r\n-    //   pdfDoc.getPage(num).then(page => {\r\n-    //     const viewport = page.getViewport({ scale });\r\n-    //     const canvas = document.createElement(\"canvas\");\r\n-    //     const ctx = canvas.getContext(\"2d\");\r\n-    //     canvas.height = viewport.height;\r\n-    //     canvas.width = viewport.width;\r\n-    //     canvas.style.display = \"block\";\r\n-    //     canvas.style.margin = \"20px auto\";\r\n-    //     canvas.style.boxShadow = \"0 4px 12px rgba(0,0,0,0.3)\";\r\n-    //     pdfViewer.appendChild(canvas);\r\n+      page.render({\r\n+        canvasContext: context,\r\n+        viewport: viewport\r\n+      });\r\n+    });\r\n+  }\r\n+}\r\n \r\n-    //     page.render({ canvasContext: ctx, viewport });\r\n-    //   });\r\n-    // }\r\n+// Render thumbnails\r\n+function renderThumbnails(maxVisible) {\r\n+  const thumbs = document.getElementById(\"thumbnails\");\r\n+  thumbs.innerHTML = \"\";\r\n \r\n-    // Render thumbnails\r\n-    function renderThumbnails(maxVisible) {\r\n-      const thumbs = document.getElementById(\"thumbnails\");\r\n-      thumbs.innerHTML = \"\";\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"thumbnail\");\r\n+    thumbs.appendChild(canvas);\r\n \r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"thumbnail\");\r\n-        thumbs.appendChild(canvas);\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n \r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const context = canvas.getContext(\"2d\");\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n+      page.render({\r\n+        canvasContext: context,\r\n+        viewport: viewport\r\n+      });\r\n+    });\r\n+  }\r\n+}\r\n \r\n-          page.render({\r\n-            canvasContext: context,\r\n-            viewport: viewport\r\n-          });\r\n-        });\r\n-      }\r\n-    }\r\n+// Zoom controls\r\n+document.getElementById(\"zoomIn\").onclick = () => {\r\n+  scale += 0.2;\r\n+  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+  renderPages(maxVisible);\r\n+};\r\n \r\n-    // Zoom\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n-      renderPages();\r\n-    };\r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        renderPages();\r\n-      }\r\n-    };\r\n+document.getElementById(\"zoomOut\").onclick = () => {\r\n+  if (scale > 0.4) {\r\n+    scale -= 0.2;\r\n+    const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+    renderPages(maxVisible);\r\n+  }\r\n+};\r\n \r\n-    // Close\r\n-    document.getElementById(\"closeBtn\").onclick = () => {\r\n-      document.getElementById(\"container\").style.display = \"none\";\r\n-    };\r\n+// Close viewer\r\n+document.getElementById(\"closeBtn\").onclick = () => {\r\n+  document.getElementById(\"container\").style.display = \"none\";\r\n+};\r\n+\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756975162326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,99 +123,111 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    let pdfDoc = null;\r\n+    let visiblePages = 1; // default limit\r\n+    let currentPage = ;\r\n+    let limitPages = 50; // <-- set how many pages you want to allow\r\n \r\n-let pdfDoc = null;\r\n-let scale = 1.5;          // default zoom\r\n-let currentPage = 1;      // starting page\r\n-let limitPages = 50;      // how many pages to allow preview\r\n+    const pdfViewer = document.getElementById(\"viewer\"); // renamed for scrollable area\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    // Load PDF\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n \r\n-// Load PDF\r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n+      // limit to either user-defined limit or total number of pages\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-  // limit visible pages to user-defined limit\r\n-  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+      renderPages(maxVisible);\r\n+      renderThumbnails(maxVisible);\r\n+    });\r\n \r\n-  renderPages(maxVisible);\r\n-  renderThumbnails(maxVisible);\r\n-});\r\n+    // Render limited pages into scrollable viewer\r\n+    function renderPages(maxVisible) {\r\n+      const viewer = document.getElementById(\"viewer\");\r\n+      viewer.innerHTML = \"\";\r\n \r\n-// Render multiple pages (limited)\r\n-function renderPages(maxVisible) {\r\n-  pdfViewer.innerHTML = \"\";\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        viewer.appendChild(canvas);\r\n \r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    pdfViewer.appendChild(canvas);\r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale: 1.5 });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n \r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const context = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n+          page.render({\r\n+            canvasContext: context,\r\n+            viewport: viewport\r\n+          });\r\n+        });\r\n+      }\r\n+    }\r\n \r\n-      page.render({\r\n-        canvasContext: context,\r\n-        viewport: viewport\r\n-      });\r\n-    });\r\n-  }\r\n-}\r\n+    // function renderSinglePage(num) {\r\n+    //   pdfDoc.getPage(num).then(page => {\r\n+    //     const viewport = page.getViewport({ scale });\r\n+    //     const canvas = document.createElement(\"canvas\");\r\n+    //     const ctx = canvas.getContext(\"2d\");\r\n+    //     canvas.height = viewport.height;\r\n+    //     canvas.width = viewport.width;\r\n+    //     canvas.style.display = \"block\";\r\n+    //     canvas.style.margin = \"20px auto\";\r\n+    //     canvas.style.boxShadow = \"0 4px 12px rgba(0,0,0,0.3)\";\r\n+    //     pdfViewer.appendChild(canvas);\r\n \r\n-// Render thumbnails\r\n-function renderThumbnails(maxVisible) {\r\n-  const thumbs = document.getElementById(\"thumbnails\");\r\n-  thumbs.innerHTML = \"\";\r\n+    //     page.render({ canvasContext: ctx, viewport });\r\n+    //   });\r\n+    // }\r\n \r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"thumbnail\");\r\n-    thumbs.appendChild(canvas);\r\n+    // Render thumbnails\r\n+    function renderThumbnails(maxVisible) {\r\n+      const thumbs = document.getElementById(\"thumbnails\");\r\n+      thumbs.innerHTML = \"\";\r\n \r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const context = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"thumbnail\");\r\n+        thumbs.appendChild(canvas);\r\n \r\n-      page.render({\r\n-        canvasContext: context,\r\n-        viewport: viewport\r\n-      });\r\n-    });\r\n-  }\r\n-}\r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n \r\n-// Zoom controls\r\n-document.getElementById(\"zoomIn\").onclick = () => {\r\n-  scale += 0.2;\r\n-  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n-  renderPages(maxVisible);\r\n-};\r\n+          page.render({\r\n+            canvasContext: context,\r\n+            viewport: viewport\r\n+          });\r\n+        });\r\n+      }\r\n+    }\r\n \r\n-document.getElementById(\"zoomOut\").onclick = () => {\r\n-  if (scale > 0.4) {\r\n-    scale -= 0.2;\r\n-    const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n-    renderPages(maxVisible);\r\n-  }\r\n-};\r\n+    // Zoom\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      renderPages();\r\n+    };\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        renderPages();\r\n+      }\r\n+    };\r\n \r\n-// Close viewer\r\n-document.getElementById(\"closeBtn\").onclick = () => {\r\n-  document.getElementById(\"container\").style.display = \"none\";\r\n-};\r\n-\r\n+    // Close\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n+    };\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756975173602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,10 +125,10 @@\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n-    let visiblePages = 1; // default limit\r\n-    let currentPage = ;\r\n+    let visiblePages = 10; // default limit\r\n+    let currentPage = 1;\r\n     let limitPages = 50; // <-- set how many pages you want to allow\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\"); // renamed for scrollable area\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n"
                },
                {
                    "date": 1756975184931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,44 +170,42 @@\n         });\r\n       }\r\n     }\r\n \r\n-    // function renderSinglePage(num) {\r\n-    //   pdfDoc.getPage(num).then(page => {\r\n-    //     const viewport = page.getViewport({ scale });\r\n-    //     const canvas = document.createElement(\"canvas\");\r\n-    //     const ctx = canvas.getContext(\"2d\");\r\n-    //     canvas.height = viewport.height;\r\n-    //     canvas.width = viewport.width;\r\n-    //     canvas.style.display = \"block\";\r\n-    //     canvas.style.margin = \"20px auto\";\r\n-    //     canvas.style.boxShadow = \"0 4px 12px rgba(0,0,0,0.3)\";\r\n-    //     pdfViewer.appendChild(canvas);\r\n+    function renderSinglePage(num) {\r\n+      pdfDoc.getPage(num).then(page => {\r\n+        const viewport = page.getViewport({ scale });\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        const ctx = canvas.getContext(\"2d\");\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        canvas.style.display = \"block\";\r\n+        canvas.style.margin = \"20px auto\";\r\n+        canvas.style.boxShadow = \"0 4px 12px rgba(0,0,0,0.3)\";\r\n+        pdfViewer.appendChild(canvas);\r\n \r\n-    //     page.render({ canvasContext: ctx, viewport });\r\n-    //   });\r\n-    // }\r\n+        page.render({ canvasContext: ctx, viewport });\r\n+      });\r\n+    }\r\n \r\n     // Render thumbnails\r\n-    function renderThumbnails(maxVisible) {\r\n-      const thumbs = document.getElementById(\"thumbnails\");\r\n-      thumbs.innerHTML = \"\";\r\n-\r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"thumbnail\");\r\n-        thumbs.appendChild(canvas);\r\n-\r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const context = canvas.getContext(\"2d\");\r\n+    function renderThumbnails() {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n           const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n           canvas.height = viewport.height;\r\n           canvas.width = viewport.width;\r\n-\r\n-          page.render({\r\n-            canvasContext: context,\r\n-            viewport: viewport\r\n-          });\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          canvas.onclick = () => {\r\n+            pdfViewer.scrollTo({\r\n+              top: pdfViewer.querySelectorAll(\"canvas\")[i - 1]?.offsetTop || 0,\r\n+              behavior: \"smooth\"\r\n+            });\r\n+          };\r\n+          sidebar.appendChild(canvas);\r\n         });\r\n       }\r\n     }\r\n \r\n"
                },
                {
                    "date": 1756975266070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,109 +123,11 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-    let pdfDoc = null;\r\n-    let visiblePages = 10; // default limit\r\n-    let currentPage = 1;\r\n-    let limitPages = 50; // <-- set how many pages you want to allow\r\n+let startPage = 10;\r\n+let endPage = 50;\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\"); // renamed for scrollable area\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n-\r\n-    // Load PDF\r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n-\r\n-      // limit to either user-defined limit or total number of pages\r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n-\r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n-\r\n-      renderPages(maxVisible);\r\n-      renderThumbnails(maxVisible);\r\n-    });\r\n-\r\n-    // Render limited pages into scrollable viewer\r\n-    function renderPages(maxVisible) {\r\n-      const viewer = document.getElementById(\"viewer\");\r\n-      viewer.innerHTML = \"\";\r\n-\r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        viewer.appendChild(canvas);\r\n-\r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const context = canvas.getContext(\"2d\");\r\n-          const viewport = page.getViewport({ scale: 1.5 });\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-\r\n-          page.render({\r\n-            canvasContext: context,\r\n-            viewport: viewport\r\n-          });\r\n-        });\r\n-      }\r\n-    }\r\n-\r\n-    function renderSinglePage(num) {\r\n-      pdfDoc.getPage(num).then(page => {\r\n-        const viewport = page.getViewport({ scale });\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        const ctx = canvas.getContext(\"2d\");\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        canvas.style.display = \"block\";\r\n-        canvas.style.margin = \"20px auto\";\r\n-        canvas.style.boxShadow = \"0 4px 12px rgba(0,0,0,0.3)\";\r\n-        pdfViewer.appendChild(canvas);\r\n-\r\n-        page.render({ canvasContext: ctx, viewport });\r\n-      });\r\n-    }\r\n-\r\n-    // Render thumbnails\r\n-    function renderThumbnails() {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          canvas.onclick = () => {\r\n-            pdfViewer.scrollTo({\r\n-              top: pdfViewer.querySelectorAll(\"canvas\")[i - 1]?.offsetTop || 0,\r\n-              behavior: \"smooth\"\r\n-            });\r\n-          };\r\n-          sidebar.appendChild(canvas);\r\n-        });\r\n-      }\r\n-    }\r\n-\r\n-    // Zoom\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n-      renderPages();\r\n-    };\r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        renderPages();\r\n-      }\r\n-    };\r\n-\r\n-    // Close\r\n-    document.getElementById(\"closeBtn\").onclick = () => {\r\n-      document.getElementById(\"container\").style.display = \"none\";\r\n-    };\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756975289095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,11 +123,98 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-let startPage = 10;\r\n-let endPage = 50;\r\n+const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+let pdfDoc = null;\r\n+let scale = 1.5;              // default zoom\r\n+let startPage = 10;           // <-- set start page\r\n+let endPage = 50;             // <-- set end page\r\n \r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n+\r\n+// Load PDF\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n+\r\n+  // clamp values so they don't exceed total pages\r\n+  startPage = Math.max(1, startPage);\r\n+  endPage = Math.min(endPage, pdfDoc.numPages);\r\n+\r\n+  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n+\r\n+  renderPages(startPage, endPage);\r\n+  renderThumbnails(startPage, endPage);\r\n+});\r\n+\r\n+// Render range of pages into scrollable viewer\r\n+function renderPages(start, end) {\r\n+  pdfViewer.innerHTML = \"\";\r\n+\r\n+  for (let num = start; num <= end; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    pdfViewer.appendChild(canvas);\r\n+\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+\r\n+      page.render({\r\n+        canvasContext: context,\r\n+        viewport: viewport\r\n+      });\r\n+    });\r\n+  }\r\n+}\r\n+\r\n+// Render thumbnails only for range\r\n+function renderThumbnails(start, end) {\r\n+  sidebar.innerHTML = \"\";\r\n+\r\n+  for (let num = start; num <= end; num++) {\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+\r\n+      canvas.onclick = () => {\r\n+        pdfViewer.scrollTo({\r\n+          top: pdfViewer.querySelectorAll(\"canvas\")[num - start]?.offsetTop || 0,\r\n+          behavior: \"smooth\"\r\n+        });\r\n+      };\r\n+\r\n+      sidebar.appendChild(canvas);\r\n+    });\r\n+  }\r\n+}\r\n+\r\n+// Zoom\r\n+document.getElementById(\"zoomIn\").onclick = () => {\r\n+  scale += 0.2;\r\n+  renderPages(startPage, endPage);\r\n+};\r\n+\r\n+document.getElementById(\"zoomOut\").onclick = () => {\r\n+  if (scale > 0.4) {\r\n+    scale -= 0.2;\r\n+    renderPages(startPage, endPage);\r\n+  }\r\n+};\r\n+\r\n+// Close\r\n+document.getElementById(\"closeBtn\").onclick = () => {\r\n+  document.getElementById(\"container\").style.display = \"none\";\r\n+};\r\n+\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756975314354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,98 +123,98 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-let pdfDoc = null;\r\n-let scale = 1.5;              // default zoom\r\n-let startPage = 10;           // <-- set start page\r\n-let endPage = 50;             // <-- set end page\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;              // default zoom\r\n+    let startPage = 1;           // <-- set start page\r\n+    let endPage = 50;             // <-- set end page\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const pdfViewer = document.getElementById(\"viewer\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-// Load PDF\r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n+    // Load PDF\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n \r\n-  // clamp values so they don't exceed total pages\r\n-  startPage = Math.max(1, startPage);\r\n-  endPage = Math.min(endPage, pdfDoc.numPages);\r\n+      // clamp values so they don't exceed total pages\r\n+      startPage = Math.max(1, startPage);\r\n+      endPage = Math.min(endPage, pdfDoc.numPages);\r\n \r\n-  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n+      pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n \r\n-  renderPages(startPage, endPage);\r\n-  renderThumbnails(startPage, endPage);\r\n-});\r\n+      renderPages(startPage, endPage);\r\n+      renderThumbnails(startPage, endPage);\r\n+    });\r\n \r\n-// Render range of pages into scrollable viewer\r\n-function renderPages(start, end) {\r\n-  pdfViewer.innerHTML = \"\";\r\n+    // Render range of pages into scrollable viewer\r\n+    function renderPages(start, end) {\r\n+      pdfViewer.innerHTML = \"\";\r\n \r\n-  for (let num = start; num <= end; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    pdfViewer.appendChild(canvas);\r\n+      for (let num = start; num <= end; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        pdfViewer.appendChild(canvas);\r\n \r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const context = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n \r\n-      page.render({\r\n-        canvasContext: context,\r\n-        viewport: viewport\r\n-      });\r\n-    });\r\n-  }\r\n-}\r\n+          page.render({\r\n+            canvasContext: context,\r\n+            viewport: viewport\r\n+          });\r\n+        });\r\n+      }\r\n+    }\r\n \r\n-// Render thumbnails only for range\r\n-function renderThumbnails(start, end) {\r\n-  sidebar.innerHTML = \"\";\r\n+    // Render thumbnails only for range\r\n+    function renderThumbnails(start, end) {\r\n+      sidebar.innerHTML = \"\";\r\n \r\n-  for (let num = start; num <= end; num++) {\r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n+      for (let num = start; num <= end; num++) {\r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n \r\n-      canvas.onclick = () => {\r\n-        pdfViewer.scrollTo({\r\n-          top: pdfViewer.querySelectorAll(\"canvas\")[num - start]?.offsetTop || 0,\r\n-          behavior: \"smooth\"\r\n+          canvas.onclick = () => {\r\n+            pdfViewer.scrollTo({\r\n+              top: pdfViewer.querySelectorAll(\"canvas\")[num - start]?.offsetTop || 0,\r\n+              behavior: \"smooth\"\r\n+            });\r\n+          };\r\n+\r\n+          sidebar.appendChild(canvas);\r\n         });\r\n-      };\r\n+      }\r\n+    }\r\n \r\n-      sidebar.appendChild(canvas);\r\n-    });\r\n-  }\r\n-}\r\n+    // Zoom\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      renderPages(startPage, endPage);\r\n+    };\r\n \r\n-// Zoom\r\n-document.getElementById(\"zoomIn\").onclick = () => {\r\n-  scale += 0.2;\r\n-  renderPages(startPage, endPage);\r\n-};\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        renderPages(startPage, endPage);\r\n+      }\r\n+    };\r\n \r\n-document.getElementById(\"zoomOut\").onclick = () => {\r\n-  if (scale > 0.4) {\r\n-    scale -= 0.2;\r\n-    renderPages(startPage, endPage);\r\n-  }\r\n-};\r\n+    // Close\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n+    };\r\n \r\n-// Close\r\n-document.getElementById(\"closeBtn\").onclick = () => {\r\n-  document.getElementById(\"container\").style.display = \"none\";\r\n-};\r\n-\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756975368411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,30 +148,40 @@\n       renderThumbnails(startPage, endPage);\r\n     });\r\n \r\n     // Render range of pages into scrollable viewer\r\n-    function renderPages(start, end) {\r\n-      pdfViewer.innerHTML = \"\";\r\n+ function renderPages(start, end) {\r\n+  pdfViewer.innerHTML = \"\";\r\n \r\n-      for (let num = start; num <= end; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        pdfViewer.appendChild(canvas);\r\n+  const promises = [];\r\n \r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const context = canvas.getContext(\"2d\");\r\n-          const viewport = page.getViewport({ scale });\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n+  for (let num = start; num <= end; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    pdfViewer.appendChild(canvas);\r\n \r\n-          page.render({\r\n-            canvasContext: context,\r\n-            viewport: viewport\r\n-          });\r\n-        });\r\n-      }\r\n-    }\r\n+    const p = pdfDoc.getPage(num).then(page => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n \r\n+      return page.render({\r\n+        canvasContext: context,\r\n+        viewport: viewport\r\n+      }).promise;\r\n+    });\r\n+\r\n+    promises.push(p);\r\n+  }\r\n+\r\n+  // ‚úÖ After all pages render, scroll to the first\r\n+  Promise.all(promises).then(() => {\r\n+    pdfViewer.scrollTo({ top: 0, behavior: \"smooth\" });\r\n+  });\r\n+}\r\n+\r\n+\r\n     // Render thumbnails only for range\r\n     function renderThumbnails(start, end) {\r\n       sidebar.innerHTML = \"\";\r\n \r\n"
                },
                {
                    "date": 1756975444219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,37 +148,39 @@\n       renderThumbnails(startPage, endPage);\r\n     });\r\n \r\n     // Render range of pages into scrollable viewer\r\n- function renderPages(start, end) {\r\n+   function renderPages(start, end) {\r\n   pdfViewer.innerHTML = \"\";\r\n \r\n-  const promises = [];\r\n+  let firstCanvas = null; // keep reference to first page canvas\r\n \r\n   for (let num = start; num <= end; num++) {\r\n     const canvas = document.createElement(\"canvas\");\r\n     canvas.classList.add(\"pdf-page\");\r\n     pdfViewer.appendChild(canvas);\r\n \r\n-    const p = pdfDoc.getPage(num).then(page => {\r\n+    if (num === start) firstCanvas = canvas; // store first page canvas\r\n+\r\n+    pdfDoc.getPage(num).then(page => {\r\n       const context = canvas.getContext(\"2d\");\r\n       const viewport = page.getViewport({ scale });\r\n       canvas.height = viewport.height;\r\n       canvas.width = viewport.width;\r\n \r\n-      return page.render({\r\n+      page.render({\r\n         canvasContext: context,\r\n         viewport: viewport\r\n-      }).promise;\r\n+      });\r\n     });\r\n-\r\n-    promises.push(p);\r\n   }\r\n \r\n-  // ‚úÖ After all pages render, scroll to the first\r\n-  Promise.all(promises).then(() => {\r\n-    pdfViewer.scrollTo({ top: 0, behavior: \"smooth\" });\r\n-  });\r\n+  // ‚úÖ After short delay, scroll to the first page\r\n+  setTimeout(() => {\r\n+    if (firstCanvas) {\r\n+      pdfViewer.scrollTo({ top: firstCanvas.offsetTop, behavior: \"smooth\" });\r\n+    }\r\n+  }, 300);\r\n }\r\n \r\n \r\n     // Render thumbnails only for range\r\n"
                },
                {
                    "date": 1756975462908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n     let scale = 1.5;              // default zoom\r\n-    let startPage = 1;           // <-- set start page\r\n+    let startPage = -1;           // <-- set start page\r\n     let endPage = 50;             // <-- set end page\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n@@ -148,40 +148,40 @@\n       renderThumbnails(startPage, endPage);\r\n     });\r\n \r\n     // Render range of pages into scrollable viewer\r\n-   function renderPages(start, end) {\r\n-  pdfViewer.innerHTML = \"\";\r\n+    function renderPages(start, end) {\r\n+      pdfViewer.innerHTML = \"\";\r\n \r\n-  let firstCanvas = null; // keep reference to first page canvas\r\n+      let firstCanvas = null; // keep reference to first page canvas\r\n \r\n-  for (let num = start; num <= end; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    pdfViewer.appendChild(canvas);\r\n+      for (let num = start; num <= end; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        pdfViewer.appendChild(canvas);\r\n \r\n-    if (num === start) firstCanvas = canvas; // store first page canvas\r\n+        if (num === start) firstCanvas = canvas; // store first page canvas\r\n \r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const context = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n \r\n-      page.render({\r\n-        canvasContext: context,\r\n-        viewport: viewport\r\n-      });\r\n-    });\r\n-  }\r\n+          page.render({\r\n+            canvasContext: context,\r\n+            viewport: viewport\r\n+          });\r\n+        });\r\n+      }\r\n \r\n-  // ‚úÖ After short delay, scroll to the first page\r\n-  setTimeout(() => {\r\n-    if (firstCanvas) {\r\n-      pdfViewer.scrollTo({ top: firstCanvas.offsetTop, behavior: \"smooth\" });\r\n+      // ‚úÖ After short delay, scroll to the first page\r\n+      setTimeout(() => {\r\n+        if (firstCanvas) {\r\n+          pdfViewer.scrollTo({ top: firstCanvas.offsetTop, behavior: \"smooth\" });\r\n+        }\r\n+      }, 300);\r\n     }\r\n-  }, 300);\r\n-}\r\n \r\n \r\n     // Render thumbnails only for range\r\n     function renderThumbnails(start, end) {\r\n"
                },
                {
                    "date": 1756975471050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n     let scale = 1.5;              // default zoom\r\n-    let startPage = -1;           // <-- set start page\r\n+    let startPage = 1;           // <-- set start page\r\n     let endPage = 50;             // <-- set end page\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n"
                },
                {
                    "date": 1756975487469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,10 +126,10 @@\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n     let scale = 1.5;              // default zoom\r\n-    let startPage = 1;           // <-- set start page\r\n-    let endPage = 50;             // <-- set end page\r\n+    let startPage = 50;           // <-- set start page\r\n+    let endPage = 1;             // <-- set end page\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n"
                },
                {
                    "date": 1756975498456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n     let scale = 1.5;              // default zoom\r\n-    let startPage = 50;           // <-- set start page\r\n+    let startPage = 20;           // <-- set start page\r\n     let endPage = 1;             // <-- set end page\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n"
                },
                {
                    "date": 1756975504456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n     let scale = 1.5;              // default zoom\r\n-    let startPage = 20;           // <-- set start page\r\n+    let startPage = ;           // <-- set start page\r\n     let endPage = 1;             // <-- set end page\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n"
                },
                {
                    "date": 1756975562035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,10 +126,10 @@\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n     let scale = 1.5;              // default zoom\r\n-    let startPage = ;           // <-- set start page\r\n-    let endPage = 1;             // <-- set end page\r\n+    let startPage = 1;           // <-- set start page\r\n+    let endPage = 50;             // <-- set end page\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n@@ -148,42 +148,44 @@\n       renderThumbnails(startPage, endPage);\r\n     });\r\n \r\n     // Render range of pages into scrollable viewer\r\n-    function renderPages(start, end) {\r\n-      pdfViewer.innerHTML = \"\";\r\n+   function renderPages(start, end) {\r\n+  pdfViewer.innerHTML = \"\";\r\n \r\n-      let firstCanvas = null; // keep reference to first page canvas\r\n+  let firstCanvas = null;\r\n+  const tasks = [];\r\n \r\n-      for (let num = start; num <= end; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        pdfViewer.appendChild(canvas);\r\n+  for (let num = start; num <= end; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    pdfViewer.appendChild(canvas);\r\n \r\n-        if (num === start) firstCanvas = canvas; // store first page canvas\r\n+    if (num === start) firstCanvas = canvas;\r\n \r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const context = canvas.getContext(\"2d\");\r\n-          const viewport = page.getViewport({ scale });\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n+    const task = pdfDoc.getPage(num).then(page => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n \r\n-          page.render({\r\n-            canvasContext: context,\r\n-            viewport: viewport\r\n-          });\r\n-        });\r\n-      }\r\n+      return page.render({\r\n+        canvasContext: context,\r\n+        viewport: viewport\r\n+      }).promise;\r\n+    });\r\n \r\n-      // ‚úÖ After short delay, scroll to the first page\r\n-      setTimeout(() => {\r\n-        if (firstCanvas) {\r\n-          pdfViewer.scrollTo({ top: firstCanvas.offsetTop, behavior: \"smooth\" });\r\n-        }\r\n-      }, 300);\r\n+    tasks.push(task);\r\n+  }\r\n+\r\n+  // ‚úÖ After all pages are rendered, scroll to the first page\r\n+  Promise.all(tasks).then(() => {\r\n+    if (firstCanvas) {\r\n+      pdfViewer.scrollTo({ top: firstCanvas.offsetTop, behavior: \"instant\" });\r\n     }\r\n+  });\r\n+}\r\n \r\n-\r\n     // Render thumbnails only for range\r\n     function renderThumbnails(start, end) {\r\n       sidebar.innerHTML = \"\";\r\n \r\n"
                },
                {
                    "date": 1756975581424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n     let scale = 1.5;              // default zoom\r\n-    let startPage = 1;           // <-- set start page\r\n+    let startPage = 0;           // <-- set start page\r\n     let endPage = 50;             // <-- set end page\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n@@ -148,43 +148,43 @@\n       renderThumbnails(startPage, endPage);\r\n     });\r\n \r\n     // Render range of pages into scrollable viewer\r\n-   function renderPages(start, end) {\r\n-  pdfViewer.innerHTML = \"\";\r\n+    function renderPages(start, end) {\r\n+      pdfViewer.innerHTML = \"\";\r\n \r\n-  let firstCanvas = null;\r\n-  const tasks = [];\r\n+      let firstCanvas = null;\r\n+      const tasks = [];\r\n \r\n-  for (let num = start; num <= end; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    pdfViewer.appendChild(canvas);\r\n+      for (let num = start; num <= end; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        pdfViewer.appendChild(canvas);\r\n \r\n-    if (num === start) firstCanvas = canvas;\r\n+        if (num === start) firstCanvas = canvas;\r\n \r\n-    const task = pdfDoc.getPage(num).then(page => {\r\n-      const context = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n+        const task = pdfDoc.getPage(num).then(page => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n \r\n-      return page.render({\r\n-        canvasContext: context,\r\n-        viewport: viewport\r\n-      }).promise;\r\n-    });\r\n+          return page.render({\r\n+            canvasContext: context,\r\n+            viewport: viewport\r\n+          }).promise;\r\n+        });\r\n \r\n-    tasks.push(task);\r\n-  }\r\n+        tasks.push(task);\r\n+      }\r\n \r\n-  // ‚úÖ After all pages are rendered, scroll to the first page\r\n-  Promise.all(tasks).then(() => {\r\n-    if (firstCanvas) {\r\n-      pdfViewer.scrollTo({ top: firstCanvas.offsetTop, behavior: \"instant\" });\r\n+      // ‚úÖ After all pages are rendered, scroll to the first page\r\n+      Promise.all(tasks).then(() => {\r\n+        if (firstCanvas) {\r\n+          pdfViewer.scrollTo({ top: firstCanvas.offsetTop, behavior: \"instant\" });\r\n+        }\r\n+      });\r\n     }\r\n-  });\r\n-}\r\n \r\n     // Render thumbnails only for range\r\n     function renderThumbnails(start, end) {\r\n       sidebar.innerHTML = \"\";\r\n"
                },
                {
                    "date": 1756975781967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,14 +123,40 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;              // default zoom\r\n-    let startPage = 0;           // <-- set start page\r\n-    let endPage = 50;             // <-- set end page\r\n+   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n \r\n+let startPage = 1;       // where to begin\r\n+let endPage = 200;       // where to end (but limited below)\r\n+let maxPages = 50;       // ‚úÖ hard cap on number of pages shown\r\n+\r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n+\r\n+// Load PDF\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n+\r\n+  // clamp values\r\n+  startPage = Math.max(1, startPage);\r\n+  endPage = Math.min(endPage, pdfDoc.numPages);\r\n+\r\n+  // apply hard limit\r\n+  if (endPage - startPage + 1 > maxPages) {\r\n+    endPage = startPage + maxPages - 1;\r\n+  }\r\n+\r\n+  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n+\r\n+  renderPages(startPage, endPage);\r\n+  renderThumbnails(startPage, endPage);\r\n+});\r\n+\r\n+\r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n"
                },
                {
                    "date": 1756975794314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,32 +131,8 @@\n let startPage = 1;       // where to begin\r\n let endPage = 200;       // where to end (but limited below)\r\n let maxPages = 50;       // ‚úÖ hard cap on number of pages shown\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n-\r\n-// Load PDF\r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n-\r\n-  // clamp values\r\n-  startPage = Math.max(1, startPage);\r\n-  endPage = Math.min(endPage, pdfDoc.numPages);\r\n-\r\n-  // apply hard limit\r\n-  if (endPage - startPage + 1 > maxPages) {\r\n-    endPage = startPage + maxPages - 1;\r\n-  }\r\n-\r\n-  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n-\r\n-  renderPages(startPage, endPage);\r\n-  renderThumbnails(startPage, endPage);\r\n-});\r\n-\r\n-\r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n"
                },
                {
                    "date": 1756975825861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,96 +123,96 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n \r\n-let startPage = 1;       // where to begin\r\n-let endPage = 200;       // where to end (but limited below)\r\n-let maxPages = 50;       // ‚úÖ hard cap on number of pages shown\r\n+    let startPage = 1;       // where to begin\r\n+    let endPage = 200;       // where to end (but limited below)\r\n+    let maxPages = 50;       // ‚úÖ hard cap on number of pages shown\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    // Load PDF\r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n+   pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n \r\n-      // clamp values so they don't exceed total pages\r\n-      startPage = Math.max(1, startPage);\r\n-      endPage = Math.min(endPage, pdfDoc.numPages);\r\n+  // clamp values\r\n+  startPage = Math.max(1, startPage);\r\n+  endPage = Math.min(endPage, pdfDoc.numPages);\r\n \r\n-      pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n+  // apply hard limit\r\n+  if (endPage - startPage + 1 > maxPages) {\r\n+    endPage = startPage + maxPages - 1;\r\n+  }\r\n \r\n-      renderPages(startPage, endPage);\r\n-      renderThumbnails(startPage, endPage);\r\n-    });\r\n+  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n \r\n-    // Render range of pages into scrollable viewer\r\n-    function renderPages(start, end) {\r\n-      pdfViewer.innerHTML = \"\";\r\n+  renderPages(startPage, endPage);\r\n+  renderThumbnails(startPage, endPage);\r\n+});\r\n \r\n-      let firstCanvas = null;\r\n-      const tasks = [];\r\n+// Render limited range of pages\r\n+function renderPages(start, end) {\r\n+  pdfViewer.innerHTML = \"\";\r\n \r\n-      for (let num = start; num <= end; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        pdfViewer.appendChild(canvas);\r\n+  // ‚úÖ Render first page immediately\r\n+  renderSinglePage(start, () => {\r\n+    // Then render the rest\r\n+    for (let num = start + 1; num <= end; num++) {\r\n+      renderSinglePage(num);\r\n+    }\r\n+  });\r\n+}\r\n \r\n-        if (num === start) firstCanvas = canvas;\r\n+function renderSinglePage(num, callback) {\r\n+  const canvas = document.createElement(\"canvas\");\r\n+  canvas.classList.add(\"pdf-page\");\r\n+  pdfViewer.appendChild(canvas);\r\n \r\n-        const task = pdfDoc.getPage(num).then(page => {\r\n-          const context = canvas.getContext(\"2d\");\r\n-          const viewport = page.getViewport({ scale });\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n+  pdfDoc.getPage(num).then(page => {\r\n+    const context = canvas.getContext(\"2d\");\r\n+    const viewport = page.getViewport({ scale });\r\n+    canvas.height = viewport.height;\r\n+    canvas.width = viewport.width;\r\n \r\n-          return page.render({\r\n-            canvasContext: context,\r\n-            viewport: viewport\r\n-          }).promise;\r\n-        });\r\n+    page.render({\r\n+      canvasContext: context,\r\n+      viewport: viewport\r\n+    }).promise.then(() => {\r\n+      if (callback) callback();\r\n+    });\r\n+  });\r\n+}\r\n \r\n-        tasks.push(task);\r\n-      }\r\n+// Render thumbnails\r\n+function renderThumbnails(start, end) {\r\n+  sidebar.innerHTML = \"\";\r\n \r\n-      // ‚úÖ After all pages are rendered, scroll to the first page\r\n-      Promise.all(tasks).then(() => {\r\n-        if (firstCanvas) {\r\n-          pdfViewer.scrollTo({ top: firstCanvas.offsetTop, behavior: \"instant\" });\r\n-        }\r\n-      });\r\n-    }\r\n+  for (let num = start; num <= end; num++) {\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n \r\n-    // Render thumbnails only for range\r\n-    function renderThumbnails(start, end) {\r\n-      sidebar.innerHTML = \"\";\r\n+      canvas.onclick = () => {\r\n+        pdfViewer.scrollTo({\r\n+          top: pdfViewer.querySelectorAll(\"canvas\")[num - start]?.offsetTop || 0,\r\n+          behavior: \"smooth\"\r\n+        });\r\n+      };\r\n \r\n-      for (let num = start; num <= end; num++) {\r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n+    });\r\n+  }\r\n+}\r\n \r\n-          canvas.onclick = () => {\r\n-            pdfViewer.scrollTo({\r\n-              top: pdfViewer.querySelectorAll(\"canvas\")[num - start]?.offsetTop || 0,\r\n-              behavior: \"smooth\"\r\n-            });\r\n-          };\r\n-\r\n-          sidebar.appendChild(canvas);\r\n-        });\r\n-      }\r\n-    }\r\n-\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n       renderPages(startPage, endPage);\r\n"
                },
                {
                    "date": 1756975851975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,91 +128,91 @@\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n \r\n     let startPage = 1;       // where to begin\r\n-    let endPage = 200;       // where to end (but limited below)\r\n+    let endPage = 1;       // where to end (but limited below)\r\n     let maxPages = 50;       // ‚úÖ hard cap on number of pages shown\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-   pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n \r\n-  // clamp values\r\n-  startPage = Math.max(1, startPage);\r\n-  endPage = Math.min(endPage, pdfDoc.numPages);\r\n+      // clamp values\r\n+      startPage = Math.max(1, startPage);\r\n+      endPage = Math.min(endPage, pdfDoc.numPages);\r\n \r\n-  // apply hard limit\r\n-  if (endPage - startPage + 1 > maxPages) {\r\n-    endPage = startPage + maxPages - 1;\r\n-  }\r\n+      // apply hard limit\r\n+      if (endPage - startPage + 1 > maxPages) {\r\n+        endPage = startPage + maxPages - 1;\r\n+      }\r\n \r\n-  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n+      pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n \r\n-  renderPages(startPage, endPage);\r\n-  renderThumbnails(startPage, endPage);\r\n-});\r\n+      renderPages(startPage, endPage);\r\n+      renderThumbnails(startPage, endPage);\r\n+    });\r\n \r\n-// Render limited range of pages\r\n-function renderPages(start, end) {\r\n-  pdfViewer.innerHTML = \"\";\r\n+    // Render limited range of pages\r\n+    function renderPages(start, end) {\r\n+      pdfViewer.innerHTML = \"\";\r\n \r\n-  // ‚úÖ Render first page immediately\r\n-  renderSinglePage(start, () => {\r\n-    // Then render the rest\r\n-    for (let num = start + 1; num <= end; num++) {\r\n-      renderSinglePage(num);\r\n+      // ‚úÖ Render first page immediately\r\n+      renderSinglePage(start, () => {\r\n+        // Then render the rest\r\n+        for (let num = start + 1; num <= end; num++) {\r\n+          renderSinglePage(num);\r\n+        }\r\n+      });\r\n     }\r\n-  });\r\n-}\r\n \r\n-function renderSinglePage(num, callback) {\r\n-  const canvas = document.createElement(\"canvas\");\r\n-  canvas.classList.add(\"pdf-page\");\r\n-  pdfViewer.appendChild(canvas);\r\n+    function renderSinglePage(num, callback) {\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      canvas.classList.add(\"pdf-page\");\r\n+      pdfViewer.appendChild(canvas);\r\n \r\n-  pdfDoc.getPage(num).then(page => {\r\n-    const context = canvas.getContext(\"2d\");\r\n-    const viewport = page.getViewport({ scale });\r\n-    canvas.height = viewport.height;\r\n-    canvas.width = viewport.width;\r\n+      pdfDoc.getPage(num).then(page => {\r\n+        const context = canvas.getContext(\"2d\");\r\n+        const viewport = page.getViewport({ scale });\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n \r\n-    page.render({\r\n-      canvasContext: context,\r\n-      viewport: viewport\r\n-    }).promise.then(() => {\r\n-      if (callback) callback();\r\n-    });\r\n-  });\r\n-}\r\n+        page.render({\r\n+          canvasContext: context,\r\n+          viewport: viewport\r\n+        }).promise.then(() => {\r\n+          if (callback) callback();\r\n+        });\r\n+      });\r\n+    }\r\n \r\n-// Render thumbnails\r\n-function renderThumbnails(start, end) {\r\n-  sidebar.innerHTML = \"\";\r\n+    // Render thumbnails\r\n+    function renderThumbnails(start, end) {\r\n+      sidebar.innerHTML = \"\";\r\n \r\n-  for (let num = start; num <= end; num++) {\r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n+      for (let num = start; num <= end; num++) {\r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n \r\n-      canvas.onclick = () => {\r\n-        pdfViewer.scrollTo({\r\n-          top: pdfViewer.querySelectorAll(\"canvas\")[num - start]?.offsetTop || 0,\r\n-          behavior: \"smooth\"\r\n+          canvas.onclick = () => {\r\n+            pdfViewer.scrollTo({\r\n+              top: pdfViewer.querySelectorAll(\"canvas\")[num - start]?.offsetTop || 0,\r\n+              behavior: \"smooth\"\r\n+            });\r\n+          };\r\n+\r\n+          sidebar.appendChild(canvas);\r\n         });\r\n-      };\r\n+      }\r\n+    }\r\n \r\n-      sidebar.appendChild(canvas);\r\n-    });\r\n-  }\r\n-}\r\n-\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n       renderPages(startPage, endPage);\r\n"
                },
                {
                    "date": 1756976029982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,95 +124,95 @@\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n \r\n-    let startPage = 1;       // where to begin\r\n-    let endPage = 1;       // where to end (but limited below)\r\n-    let maxPages = 50;       // ‚úÖ hard cap on number of pages shown\r\n+let startPage = 1;       // where to begin\r\n+let endPage = 200;       // where to end\r\n+let maxPages = 50;       // ‚úÖ hard cap on number of pages shown\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n+// Load PDF\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n \r\n-      // clamp values\r\n-      startPage = Math.max(1, startPage);\r\n-      endPage = Math.min(endPage, pdfDoc.numPages);\r\n+  // clamp values\r\n+  startPage = Math.max(1, startPage);\r\n+  endPage = Math.min(endPage, pdfDoc.numPages);\r\n \r\n-      // apply hard limit\r\n-      if (endPage - startPage + 1 > maxPages) {\r\n-        endPage = startPage + maxPages - 1;\r\n-      }\r\n+  // apply hard limit\r\n+  if (endPage - startPage + 1 > maxPages) {\r\n+    endPage = startPage + maxPages - 1;\r\n+  }\r\n \r\n-      pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n+  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n \r\n-      renderPages(startPage, endPage);\r\n-      renderThumbnails(startPage, endPage);\r\n-    });\r\n+  renderPagesSequential(startPage, endPage);\r\n+  renderThumbnails(startPage, endPage);\r\n+});\r\n \r\n-    // Render limited range of pages\r\n-    function renderPages(start, end) {\r\n-      pdfViewer.innerHTML = \"\";\r\n+// ‚úÖ Render sequentially so first page always loads first\r\n+async function renderPagesSequential(start, end) {\r\n+  pdfViewer.innerHTML = \"\";\r\n \r\n-      // ‚úÖ Render first page immediately\r\n-      renderSinglePage(start, () => {\r\n-        // Then render the rest\r\n-        for (let num = start + 1; num <= end; num++) {\r\n-          renderSinglePage(num);\r\n-        }\r\n-      });\r\n-    }\r\n+  for (let num = start; num <= end; num++) {\r\n+    await renderSinglePage(num);\r\n+  }\r\n \r\n-    function renderSinglePage(num, callback) {\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      canvas.classList.add(\"pdf-page\");\r\n-      pdfViewer.appendChild(canvas);\r\n+  // scroll to first page after all render\r\n+  pdfViewer.scrollTo({ top: 0, behavior: \"instant\" });\r\n+}\r\n \r\n-      pdfDoc.getPage(num).then(page => {\r\n-        const context = canvas.getContext(\"2d\");\r\n-        const viewport = page.getViewport({ scale });\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n+function renderSinglePage(num) {\r\n+  return new Promise(resolve => {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    pdfViewer.appendChild(canvas);\r\n \r\n-        page.render({\r\n-          canvasContext: context,\r\n-          viewport: viewport\r\n-        }).promise.then(() => {\r\n-          if (callback) callback();\r\n-        });\r\n-      });\r\n-    }\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n \r\n-    // Render thumbnails\r\n-    function renderThumbnails(start, end) {\r\n-      sidebar.innerHTML = \"\";\r\n+      page.render({\r\n+        canvasContext: context,\r\n+        viewport: viewport\r\n+      }).promise.then(() => resolve());\r\n+    });\r\n+  });\r\n+}\r\n \r\n-      for (let num = start; num <= end; num++) {\r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n+// Render thumbnails\r\n+function renderThumbnails(start, end) {\r\n+  sidebar.innerHTML = \"\";\r\n \r\n-          canvas.onclick = () => {\r\n-            pdfViewer.scrollTo({\r\n-              top: pdfViewer.querySelectorAll(\"canvas\")[num - start]?.offsetTop || 0,\r\n-              behavior: \"smooth\"\r\n-            });\r\n-          };\r\n+  for (let num = start; num <= end; num++) {\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n \r\n-          sidebar.appendChild(canvas);\r\n+      canvas.onclick = () => {\r\n+        pdfViewer.scrollTo({\r\n+          top: pdfViewer.querySelectorAll(\"canvas\")[num - start]?.offsetTop || 0,\r\n+          behavior: \"smooth\"\r\n         });\r\n-      }\r\n-    }\r\n+      };\r\n \r\n+      sidebar.appendChild(canvas);\r\n+    });\r\n+  }\r\n+}\r\n+\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n       renderPages(startPage, endPage);\r\n"
                },
                {
                    "date": 1756976075785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,96 +123,87 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n let pdfDoc = null;\r\n-let scale = 1.5;\r\n+let scale = 1.2;\r\n \r\n-let startPage = 1;       // where to begin\r\n-let endPage = 200;       // where to end\r\n-let maxPages = 50;       // ‚úÖ hard cap on number of pages shown\r\n-\r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n+const mainCanvas = document.getElementById(\"mainCanvas\");\r\n+const mainCtx = mainCanvas.getContext(\"2d\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+const viewer = document.querySelector(\".viewer\");\r\n \r\n+// Page limits\r\n+let startPage = 1;\r\n+let limitPages = 50; // only render 50 pages\r\n+let endPage;\r\n+\r\n // Load PDF\r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n+  endPage = Math.min(startPage + limitPages - 1, pdfDoc.numPages);\r\n \r\n-  // clamp values\r\n-  startPage = Math.max(1, startPage);\r\n-  endPage = Math.min(endPage, pdfDoc.numPages);\r\n-\r\n-  // apply hard limit\r\n-  if (endPage - startPage + 1 > maxPages) {\r\n-    endPage = startPage + maxPages - 1;\r\n-  }\r\n-\r\n   pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n-\r\n-  renderPagesSequential(startPage, endPage);\r\n-  renderThumbnails(startPage, endPage);\r\n+  renderPages();\r\n+  renderThumbnails();\r\n });\r\n \r\n-// ‚úÖ Render sequentially so first page always loads first\r\n-async function renderPagesSequential(start, end) {\r\n-  pdfViewer.innerHTML = \"\";\r\n-\r\n-  for (let num = start; num <= end; num++) {\r\n-    await renderSinglePage(num);\r\n-  }\r\n-\r\n-  // scroll to first page after all render\r\n-  pdfViewer.scrollTo({ top: 0, behavior: \"instant\" });\r\n-}\r\n-\r\n-function renderSinglePage(num) {\r\n-  return new Promise(resolve => {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    pdfViewer.appendChild(canvas);\r\n-\r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const context = canvas.getContext(\"2d\");\r\n+// Render a range of pages\r\n+function renderPages() {\r\n+  viewer.innerHTML = \"\"; // clear old pages\r\n+  for (let i = startPage; i <= endPage; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n       const viewport = page.getViewport({ scale });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n       canvas.height = viewport.height;\r\n       canvas.width = viewport.width;\r\n \r\n-      page.render({\r\n-        canvasContext: context,\r\n-        viewport: viewport\r\n-      }).promise.then(() => resolve());\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      viewer.appendChild(canvas);\r\n+\r\n+      // Highlight first page on load\r\n+      if (i === startPage) {\r\n+        highlightThumbnail(i);\r\n+      }\r\n     });\r\n-  });\r\n+  }\r\n+\r\n+  // ‚úÖ Always reset scroll to top after rendering\r\n+  viewer.scrollTop = 0;\r\n }\r\n \r\n-// Render thumbnails\r\n-function renderThumbnails(start, end) {\r\n+// Render thumbnails in sidebar\r\n+function renderThumbnails() {\r\n   sidebar.innerHTML = \"\";\r\n-\r\n-  for (let num = start; num <= end; num++) {\r\n-    pdfDoc.getPage(num).then(page => {\r\n+  for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n       const viewport = page.getViewport({ scale: 0.2 });\r\n       const canvas = document.createElement(\"canvas\");\r\n       const ctx = canvas.getContext(\"2d\");\r\n       canvas.height = viewport.height;\r\n       canvas.width = viewport.width;\r\n+\r\n       page.render({ canvasContext: ctx, viewport });\r\n-\r\n       canvas.onclick = () => {\r\n-        pdfViewer.scrollTo({\r\n-          top: pdfViewer.querySelectorAll(\"canvas\")[num - start]?.offsetTop || 0,\r\n-          behavior: \"smooth\"\r\n-        });\r\n+        viewer.scrollTop = viewer.querySelectorAll(\"canvas\")[i - startPage]?.offsetTop || 0;\r\n+        highlightThumbnail(i);\r\n       };\r\n-\r\n       sidebar.appendChild(canvas);\r\n     });\r\n   }\r\n }\r\n \r\n+// Highlight active thumbnail\r\n+function highlightThumbnail(num) {\r\n+  const canvases = sidebar.querySelectorAll(\"canvas\");\r\n+  canvases.forEach((c, idx) => {\r\n+    c.classList.toggle(\"active\", idx + 1 === num);\r\n+  });\r\n+}\r\n+\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n       renderPages(startPage, endPage);\r\n"
                },
                {
                    "date": 1756976131791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+  const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n let pdfDoc = null;\r\n let scale = 1.2;\r\n \r\n const mainCanvas = document.getElementById(\"mainCanvas\");\r\n"
                },
                {
                    "date": 1756976182777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,90 +119,91 @@\n     <div id=\"viewer\">\r\n       <canvas id=\"mainCanvas\"></canvas>\r\n     </div>\r\n   </div>\r\n+  <a href=\"\"></a>\r\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-  const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-let pdfDoc = null;\r\n-let scale = 1.2;\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    let pdfDoc = null;\r\n+    let scale = 1.2;\r\n \r\n-const mainCanvas = document.getElementById(\"mainCanvas\");\r\n-const mainCtx = mainCanvas.getContext(\"2d\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const viewer = document.querySelector(\".viewer\");\r\n+    const mainCanvas = document.getElementById(\"mainCanvas\");\r\n+    const mainCtx = mainCanvas.getContext(\"2d\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const viewer = document.querySelector(\".viewer\");\r\n \r\n-// Page limits\r\n-let startPage = 1;\r\n-let limitPages = 50; // only render 50 pages\r\n-let endPage;\r\n+    // Page limits\r\n+    let startPage = 1;\r\n+    let limitPages = 50; // only render 50 pages\r\n+    let endPage;\r\n \r\n-// Load PDF\r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n-  endPage = Math.min(startPage + limitPages - 1, pdfDoc.numPages);\r\n+    // Load PDF\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n+      endPage = Math.min(startPage + limitPages - 1, pdfDoc.numPages);\r\n \r\n-  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n-  renderPages();\r\n-  renderThumbnails();\r\n-});\r\n+      pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n+      renderPages();\r\n+      renderThumbnails();\r\n+    });\r\n \r\n-// Render a range of pages\r\n-function renderPages() {\r\n-  viewer.innerHTML = \"\"; // clear old pages\r\n-  for (let i = startPage; i <= endPage; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n+    // Render a range of pages\r\n+    function renderPages() {\r\n+      viewer.innerHTML = \"\"; // clear old pages\r\n+      for (let i = startPage; i <= endPage; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n \r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      viewer.appendChild(canvas);\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          viewer.appendChild(canvas);\r\n \r\n-      // Highlight first page on load\r\n-      if (i === startPage) {\r\n-        highlightThumbnail(i);\r\n+          // Highlight first page on load\r\n+          if (i === startPage) {\r\n+            highlightThumbnail(i);\r\n+          }\r\n+        });\r\n       }\r\n-    });\r\n-  }\r\n \r\n-  // ‚úÖ Always reset scroll to top after rendering\r\n-  viewer.scrollTop = 0;\r\n-}\r\n+      // ‚úÖ Always reset scroll to top after rendering\r\n+      viewer.scrollTop = 0;\r\n+    }\r\n \r\n-// Render thumbnails in sidebar\r\n-function renderThumbnails() {\r\n-  sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n+    // Render thumbnails in sidebar\r\n+    function renderThumbnails() {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n \r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      canvas.onclick = () => {\r\n-        viewer.scrollTop = viewer.querySelectorAll(\"canvas\")[i - startPage]?.offsetTop || 0;\r\n-        highlightThumbnail(i);\r\n-      };\r\n-      sidebar.appendChild(canvas);\r\n-    });\r\n-  }\r\n-}\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          canvas.onclick = () => {\r\n+            viewer.scrollTop = viewer.querySelectorAll(\"canvas\")[i - startPage]?.offsetTop || 0;\r\n+            highlightThumbnail(i);\r\n+          };\r\n+          sidebar.appendChild(canvas);\r\n+        });\r\n+      }\r\n+    }\r\n \r\n-// Highlight active thumbnail\r\n-function highlightThumbnail(num) {\r\n-  const canvases = sidebar.querySelectorAll(\"canvas\");\r\n-  canvases.forEach((c, idx) => {\r\n-    c.classList.toggle(\"active\", idx + 1 === num);\r\n-  });\r\n-}\r\n+    // Highlight active thumbnail\r\n+    function highlightThumbnail(num) {\r\n+      const canvases = sidebar.querySelectorAll(\"canvas\");\r\n+      canvases.forEach((c, idx) => {\r\n+        c.classList.toggle(\"active\", idx + 1 === num);\r\n+      });\r\n+    }\r\n \r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n"
                },
                {
                    "date": 1756976191078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n     <div id=\"viewer\">\r\n       <canvas id=\"mainCanvas\"></canvas>\r\n     </div>\r\n   </div>\r\n-  <a href=\"\"></a>\r\n+  <a href=\"></a>\r\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n"
                },
                {
                    "date": 1756976219476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,91 +119,90 @@\n     <div id=\"viewer\">\r\n       <canvas id=\"mainCanvas\"></canvas>\r\n     </div>\r\n   </div>\r\n-  <a href=\"></a>\r\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-    let pdfDoc = null;\r\n-    let scale = 1.2;\r\n+   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+let pdfDoc = null;\r\n+let scale = 1.2;\r\n \r\n-    const mainCanvas = document.getElementById(\"mainCanvas\");\r\n-    const mainCtx = mainCanvas.getContext(\"2d\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const viewer = document.querySelector(\".viewer\");\r\n+const mainCanvas = document.getElementById(\"mainCanvas\");\r\n+const mainCtx = mainCanvas.getContext(\"2d\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const viewer = document.querySelector(\".viewer\");\r\n \r\n-    // Page limits\r\n-    let startPage = 1;\r\n-    let limitPages = 50; // only render 50 pages\r\n-    let endPage;\r\n+// Page limits\r\n+let startPage = 1;\r\n+let limitPages = 50; // only render 50 pages\r\n+let endPage;\r\n \r\n-    // Load PDF\r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n-      endPage = Math.min(startPage + limitPages - 1, pdfDoc.numPages);\r\n+// Load PDF\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n+  endPage = Math.min(startPage + limitPages - 1, pdfDoc.numPages);\r\n \r\n-      pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n-      renderPages();\r\n-      renderThumbnails();\r\n-    });\r\n+  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n+  renderPages();\r\n+  renderThumbnails();\r\n+});\r\n \r\n-    // Render a range of pages\r\n-    function renderPages() {\r\n-      viewer.innerHTML = \"\"; // clear old pages\r\n-      for (let i = startPage; i <= endPage; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n+// Render a range of pages\r\n+function renderPages() {\r\n+  viewer.innerHTML = \"\"; // clear old pages\r\n+  for (let i = startPage; i <= endPage; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n \r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          viewer.appendChild(canvas);\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      viewer.appendChild(canvas);\r\n \r\n-          // Highlight first page on load\r\n-          if (i === startPage) {\r\n-            highlightThumbnail(i);\r\n-          }\r\n-        });\r\n+      // Highlight first page on load\r\n+      if (i === startPage) {\r\n+        highlightThumbnail(i);\r\n       }\r\n+    });\r\n+  }\r\n \r\n-      // ‚úÖ Always reset scroll to top after rendering\r\n-      viewer.scrollTop = 0;\r\n-    }\r\n+  // ‚úÖ Always reset scroll to top after rendering\r\n+  viewer.scrollTop = 0;\r\n+}\r\n \r\n-    // Render thumbnails in sidebar\r\n-    function renderThumbnails() {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n+// Render thumbnails in sidebar\r\n+function renderThumbnails() {\r\n+  sidebar.innerHTML = \"\";\r\n+  for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n \r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          canvas.onclick = () => {\r\n-            viewer.scrollTop = viewer.querySelectorAll(\"canvas\")[i - startPage]?.offsetTop || 0;\r\n-            highlightThumbnail(i);\r\n-          };\r\n-          sidebar.appendChild(canvas);\r\n-        });\r\n-      }\r\n-    }\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      canvas.onclick = () => {\r\n+        viewer.scrollTop = viewer.querySelectorAll(\"canvas\")[i - startPage]?.offsetTop || 0;\r\n+        highlightThumbnail(i);\r\n+      };\r\n+      sidebar.appendChild(canvas);\r\n+    });\r\n+  }\r\n+}\r\n \r\n-    // Highlight active thumbnail\r\n-    function highlightThumbnail(num) {\r\n-      const canvases = sidebar.querySelectorAll(\"canvas\");\r\n-      canvases.forEach((c, idx) => {\r\n-        c.classList.toggle(\"active\", idx + 1 === num);\r\n-      });\r\n-    }\r\n+// Highlight active thumbnail\r\n+function highlightThumbnail(num) {\r\n+  const canvases = sidebar.querySelectorAll(\"canvas\");\r\n+  canvases.forEach((c, idx) => {\r\n+    c.classList.toggle(\"active\", idx + 1 === num);\r\n+  });\r\n+}\r\n \r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n"
                },
                {
                    "date": 1756976282303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,87 +123,87 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-let pdfDoc = null;\r\n-let scale = 1.2;\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n \r\n-const mainCanvas = document.getElementById(\"mainCanvas\");\r\n-const mainCtx = mainCanvas.getContext(\"2d\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const viewer = document.querySelector(\".viewer\");\r\n+    let startPage = 1;       // where to begin\r\n+    let endPage = 200;       // where to end\r\n+    let maxPages = 50;       // ‚úÖ hard cap on number of pages shown\r\n \r\n-// Page limits\r\n-let startPage = 1;\r\n-let limitPages = 50; // only render 50 pages\r\n-let endPage;\r\n+    const pdfViewer = document.getElementById(\"viewer\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-// Load PDF\r\n+    // Load PDF\r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n   endPage = Math.min(startPage + limitPages - 1, pdfDoc.numPages);\r\n \r\n   pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n-  renderPages();\r\n-  renderThumbnails();\r\n+  renderPages(startPage, endPage); // always begins from first page in range\r\n+  renderThumbnails(startPage, endPage);\r\n });\r\n \r\n-// Render a range of pages\r\n-function renderPages() {\r\n-  viewer.innerHTML = \"\"; // clear old pages\r\n-  for (let i = startPage; i <= endPage; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n+    // ‚úÖ Render sequentially so first page always loads first\r\n+    async function renderPagesSequential(start, end) {\r\n+      pdfViewer.innerHTML = \"\";\r\n \r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      viewer.appendChild(canvas);\r\n-\r\n-      // Highlight first page on load\r\n-      if (i === startPage) {\r\n-        highlightThumbnail(i);\r\n+      for (let num = start; num <= end; num++) {\r\n+        await renderSinglePage(num);\r\n       }\r\n-    });\r\n-  }\r\n \r\n-  // ‚úÖ Always reset scroll to top after rendering\r\n-  viewer.scrollTop = 0;\r\n-}\r\n+      // scroll to first page after all render\r\n+      pdfViewer.scrollTo({ top: 0, behavior: \"instant\" });\r\n+    }\r\n \r\n-// Render thumbnails in sidebar\r\n-function renderThumbnails() {\r\n-  sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n+    function renderSinglePage(num) {\r\n+      return new Promise(resolve => {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        pdfViewer.appendChild(canvas);\r\n \r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      canvas.onclick = () => {\r\n-        viewer.scrollTop = viewer.querySelectorAll(\"canvas\")[i - startPage]?.offsetTop || 0;\r\n-        highlightThumbnail(i);\r\n-      };\r\n-      sidebar.appendChild(canvas);\r\n-    });\r\n-  }\r\n-}\r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n \r\n-// Highlight active thumbnail\r\n-function highlightThumbnail(num) {\r\n-  const canvases = sidebar.querySelectorAll(\"canvas\");\r\n-  canvases.forEach((c, idx) => {\r\n-    c.classList.toggle(\"active\", idx + 1 === num);\r\n-  });\r\n-}\r\n+          page.render({\r\n+            canvasContext: context,\r\n+            viewport: viewport\r\n+          }).promise.then(() => resolve());\r\n+        });\r\n+      });\r\n+    }\r\n \r\n+    // Render thumbnails\r\n+    function renderThumbnails(start, end) {\r\n+      sidebar.innerHTML = \"\";\r\n+\r\n+      for (let num = start; num <= end; num++) {\r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+\r\n+          canvas.onclick = () => {\r\n+            pdfViewer.scrollTo({\r\n+              top: pdfViewer.querySelectorAll(\"canvas\")[num - start]?.offsetTop || 0,\r\n+              behavior: \"smooth\"\r\n+            });\r\n+          };\r\n+\r\n+          sidebar.appendChild(canvas);\r\n+        });\r\n+      }\r\n+    }\r\n+\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n       renderPages(startPage, endPage);\r\n"
                },
                {
                    "date": 1756976314237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,22 +130,23 @@\n \r\n     let startPage = 1;       // where to begin\r\n     let endPage = 200;       // where to end\r\n     let maxPages = 50;       // ‚úÖ hard cap on number of pages shown\r\n+    let limitPages = 50;\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n     // Load PDF\r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n-  endPage = Math.min(startPage + limitPages - 1, pdfDoc.numPages);\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n+      endPage = Math.min(startPage + limitPages - 1, pdfDoc.numPages);\r\n \r\n-  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n-  renderPages(startPage, endPage); // always begins from first page in range\r\n-  renderThumbnails(startPage, endPage);\r\n-});\r\n+      pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n+      renderPages(startPage, endPage); // always begins from first page in range\r\n+      renderThumbnails(startPage, endPage);\r\n+    });\r\n \r\n     // ‚úÖ Render sequentially so first page always loads first\r\n     async function renderPagesSequential(start, end) {\r\n       pdfViewer.innerHTML = \"\";\r\n"
                },
                {
                    "date": 1756976356471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,88 +123,66 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n+   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n-    let startPage = 1;       // where to begin\r\n-    let endPage = 200;       // where to end\r\n-    let maxPages = 50;       // ‚úÖ hard cap on number of pages shown\r\n-    let limitPages = 50;\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+// page range variables\r\n+let startPage = 1;          // always start here\r\n+let limitPages = 50;        // max pages to render\r\n+let endPage = null;         // will be calculated\r\n \r\n-    // Load PDF\r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n-      endPage = Math.min(startPage + limitPages - 1, pdfDoc.numPages);\r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-      pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n-      renderPages(startPage, endPage); // always begins from first page in range\r\n-      renderThumbnails(startPage, endPage);\r\n-    });\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n+  endPage = Math.min(startPage + limitPages - 1, pdfDoc.numPages);\r\n \r\n-    // ‚úÖ Render sequentially so first page always loads first\r\n-    async function renderPagesSequential(start, end) {\r\n-      pdfViewer.innerHTML = \"\";\r\n+  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n+  renderPages(startPage, endPage);\r\n+  renderThumbnails(startPage, endPage);\r\n+});\r\n \r\n-      for (let num = start; num <= end; num++) {\r\n-        await renderSinglePage(num);\r\n-      }\r\n+// render limited range of pages\r\n+function renderPages(start, end) {\r\n+  pdfViewer.innerHTML = \"\";\r\n+  for (let num = start; num <= end; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    pdfViewer.appendChild(canvas);\r\n \r\n-      // scroll to first page after all render\r\n-      pdfViewer.scrollTo({ top: 0, behavior: \"instant\" });\r\n-    }\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: context, viewport });\r\n+    });\r\n+  }\r\n+}\r\n \r\n-    function renderSinglePage(num) {\r\n-      return new Promise(resolve => {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        pdfViewer.appendChild(canvas);\r\n+// thumbnails in sidebar (respecting range)\r\n+function renderThumbnails(start, end) {\r\n+  sidebar.innerHTML = \"\";\r\n+  for (let i = start; i <= end; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n+    });\r\n+  }\r\n+}\r\n \r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const context = canvas.getContext(\"2d\");\r\n-          const viewport = page.getViewport({ scale });\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n \r\n-          page.render({\r\n-            canvasContext: context,\r\n-            viewport: viewport\r\n-          }).promise.then(() => resolve());\r\n-        });\r\n-      });\r\n-    }\r\n-\r\n-    // Render thumbnails\r\n-    function renderThumbnails(start, end) {\r\n-      sidebar.innerHTML = \"\";\r\n-\r\n-      for (let num = start; num <= end; num++) {\r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-\r\n-          canvas.onclick = () => {\r\n-            pdfViewer.scrollTo({\r\n-              top: pdfViewer.querySelectorAll(\"canvas\")[num - start]?.offsetTop || 0,\r\n-              behavior: \"smooth\"\r\n-            });\r\n-          };\r\n-\r\n-          sidebar.appendChild(canvas);\r\n-        });\r\n-      }\r\n-    }\r\n-\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n       renderPages(startPage, endPage);\r\n"
                },
                {
                    "date": 1756976388720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,64 +123,64 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n \r\n-// page range variables\r\n-let startPage = 1;          // always start here\r\n-let limitPages = 50;        // max pages to render\r\n-let endPage = null;         // will be calculated\r\n+    // page range variables\r\n+    let startPage = 10;          // always start here\r\n+    let limitPages = 50;        // max pages to render\r\n+    let endPage = null;         // will be calculated\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const pdfViewer = document.getElementById(\"viewer\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n-  endPage = Math.min(startPage + limitPages - 1, pdfDoc.numPages);\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n+      endPage = Math.min(startPage + limitPages - 1, pdfDoc.numPages);\r\n \r\n-  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n-  renderPages(startPage, endPage);\r\n-  renderThumbnails(startPage, endPage);\r\n-});\r\n+      pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n+      renderPages(startPage, endPage);\r\n+      renderThumbnails(startPage, endPage);\r\n+    });\r\n \r\n-// render limited range of pages\r\n-function renderPages(start, end) {\r\n-  pdfViewer.innerHTML = \"\";\r\n-  for (let num = start; num <= end; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    pdfViewer.appendChild(canvas);\r\n+    // render limited range of pages\r\n+    function renderPages(start, end) {\r\n+      pdfViewer.innerHTML = \"\";\r\n+      for (let num = start; num <= end; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        pdfViewer.appendChild(canvas);\r\n \r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const context = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: context, viewport });\r\n-    });\r\n-  }\r\n-}\r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: context, viewport });\r\n+        });\r\n+      }\r\n+    }\r\n \r\n-// thumbnails in sidebar (respecting range)\r\n-function renderThumbnails(start, end) {\r\n-  sidebar.innerHTML = \"\";\r\n-  for (let i = start; i <= end; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      sidebar.appendChild(canvas);\r\n-    });\r\n-  }\r\n-}\r\n+    // thumbnails in sidebar (respecting range)\r\n+    function renderThumbnails(start, end) {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = start; i <= end; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n+        });\r\n+      }\r\n+    }\r\n \r\n \r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n"
                },
                {
                    "date": 1756976402191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n \r\n     // page range variables\r\n-    let startPage = 10;          // always start here\r\n+    let startPage = 1;          // always start here\r\n     let limitPages = 50;        // max pages to render\r\n     let endPage = null;         // will be calculated\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n"
                },
                {
                    "date": 1756976458133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,66 +123,64 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+  const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n+let limitPages = 50; // <-- only show first 50 pages max\r\n \r\n-    // page range variables\r\n-    let startPage = 1;          // always start here\r\n-    let limitPages = 50;        // max pages to render\r\n-    let endPage = null;         // will be calculated\r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n \r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n-      endPage = Math.min(startPage + limitPages - 1, pdfDoc.numPages);\r\n+  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-      pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n-      renderPages(startPage, endPage);\r\n-      renderThumbnails(startPage, endPage);\r\n-    });\r\n+  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+  renderPages(maxVisible);\r\n+  renderThumbnails(maxVisible);\r\n+});\r\n \r\n-    // render limited range of pages\r\n-    function renderPages(start, end) {\r\n-      pdfViewer.innerHTML = \"\";\r\n-      for (let num = start; num <= end; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        pdfViewer.appendChild(canvas);\r\n+// Render limited pages\r\n+function renderPages(maxVisible) {\r\n+  pdfViewer.innerHTML = \"\";\r\n \r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const context = canvas.getContext(\"2d\");\r\n-          const viewport = page.getViewport({ scale });\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: context, viewport });\r\n-        });\r\n-      }\r\n-    }\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    pdfViewer.appendChild(canvas);\r\n \r\n-    // thumbnails in sidebar (respecting range)\r\n-    function renderThumbnails(start, end) {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = start; i <= end; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n-        });\r\n-      }\r\n-    }\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: context, viewport });\r\n+    });\r\n+  }\r\n+}\r\n \r\n+// Render thumbnails for limited pages\r\n+function renderThumbnails(maxVisible) {\r\n+  sidebar.innerHTML = \"\";\r\n+  for (let i = 1; i <= maxVisible; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n+    });\r\n+  }\r\n+}\r\n \r\n+\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n       renderPages(startPage, endPage);\r\n"
                },
                {
                    "date": 1756976529269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,24 +125,33 @@\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n+const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+\r\n let pdfDoc = null;\r\n let scale = 1.5;\r\n-let limitPages = 50; // <-- only show first 50 pages max\r\n+let limitPages = 50; // show max 50 pages\r\n \r\n const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n \r\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n-  renderPages(maxVisible);\r\n-  renderThumbnails(maxVisible);\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    pdfViewer.appendChild(canvas);\r\n+\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+    });\r\n+  }\r\n });\r\n \r\n // Render limited pages\r\n function renderPages(maxVisible) {\r\n"
                },
                {
                    "date": 1756976538043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,33 +125,24 @@\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n-const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-\r\n let pdfDoc = null;\r\n let scale = 1.5;\r\n-let limitPages = 50; // show max 50 pages\r\n+let limitPages = 50; // <-- only show first 50 pages max\r\n \r\n const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n \r\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    pdfViewer.appendChild(canvas);\r\n-\r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n-    });\r\n-  }\r\n+  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+  renderPages(maxVisible);\r\n+  renderThumbnails(maxVisible);\r\n });\r\n \r\n // Render limited pages\r\n function renderPages(maxVisible) {\r\n"
                },
                {
                    "date": 1756976551046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,14 +127,9 @@\n   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n let pdfDoc = null;\r\n let scale = 1.5;\r\n-let limitPages = 50; // <-- only show first 50 pages max\r\n-\r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n-\r\n+let limitPages = 50; // show max 50 pages\r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n \r\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n"
                },
                {
                    "date": 1756976560625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,14 @@\n   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n let pdfDoc = null;\r\n let scale = 1.5;\r\n-let limitPages = 50; // show max 50 pages\r\n+let limitPages = 50; // <-- only show first 50 pages max\r\n+\r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n+\r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n \r\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n"
                },
                {
                    "date": 1756976645150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,8 @@\n   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n let pdfDoc = null;\r\n let scale = 1.5;\r\n-let limitPages = 50; // <-- only show first 50 pages max\r\n \r\n const pdfViewer = document.getElementById(\"viewer\");\r\n const sidebar = document.getElementById(\"sidebar\");\r\n const pageInfo = document.getElementById(\"pageInfo\");\r\n"
                },
                {
                    "date": 1756976657663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,63 +123,69 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-  const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const pdfViewer = document.getElementById(\"viewer\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+   pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n \r\n-  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n-\r\n-  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n-  renderPages(maxVisible);\r\n-  renderThumbnails(maxVisible);\r\n-});\r\n-\r\n-// Render limited pages\r\n-function renderPages(maxVisible) {\r\n-  pdfViewer.innerHTML = \"\";\r\n-\r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n+  for (let num = 1; num <= pdfDoc.numPages; num++) {\r\n     const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n     pdfViewer.appendChild(canvas);\r\n \r\n     pdfDoc.getPage(num).then(page => {\r\n-      const context = canvas.getContext(\"2d\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n       const viewport = page.getViewport({ scale });\r\n       canvas.height = viewport.height;\r\n       canvas.width = viewport.width;\r\n-      page.render({ canvasContext: context, viewport });\r\n-    });\r\n-  }\r\n-}\r\n-\r\n-// Render thumbnails for limited pages\r\n-function renderThumbnails(maxVisible) {\r\n-  sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= maxVisible; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n       page.render({ canvasContext: ctx, viewport });\r\n-      sidebar.appendChild(canvas);\r\n     });\r\n   }\r\n-}\r\n+});\r\n+    // Render limited pages\r\n+    function renderPages(maxVisible) {\r\n+      pdfViewer.innerHTML = \"\";\r\n \r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        pdfViewer.appendChild(canvas);\r\n \r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: context, viewport });\r\n+        });\r\n+      }\r\n+    }\r\n+\r\n+    // Render thumbnails for limited pages\r\n+    function renderThumbnails(maxVisible) {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = 1; i <= maxVisible; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n+        });\r\n+      }\r\n+    }\r\n+\r\n+\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n       renderPages(startPage, endPage);\r\n"
                },
                {
                    "date": 1756976705408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,67 +123,66 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-   pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+// Load PDF\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n \r\n-  for (let num = 1; num <= pdfDoc.numPages; num++) {\r\n+  // Default: render all pages\r\n+  renderPages(pdfDoc.numPages);\r\n+  renderThumbnails(pdfDoc.numPages);\r\n+\r\n+  // Update info\r\n+  pageInfo.textContent = `1 - ${pdfDoc.numPages} / ${pdfDoc.numPages}`;\r\n+});\r\n+\r\n+// Render pages (can be all or limited)\r\n+function renderPages(maxVisible) {\r\n+  pdfViewer.innerHTML = \"\";\r\n+\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n     const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n     pdfViewer.appendChild(canvas);\r\n \r\n     pdfDoc.getPage(num).then(page => {\r\n-      const ctx = canvas.getContext(\"2d\");\r\n+      const context = canvas.getContext(\"2d\");\r\n       const viewport = page.getViewport({ scale });\r\n       canvas.height = viewport.height;\r\n       canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n+\r\n+      page.render({ canvasContext: context, viewport });\r\n     });\r\n   }\r\n-});\r\n-    // Render limited pages\r\n-    function renderPages(maxVisible) {\r\n-      pdfViewer.innerHTML = \"\";\r\n+}\r\n \r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        pdfViewer.appendChild(canvas);\r\n+// Render thumbnails (can be all or limited)\r\n+function renderThumbnails(maxVisible) {\r\n+  sidebar.innerHTML = \"\";\r\n \r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const context = canvas.getContext(\"2d\");\r\n-          const viewport = page.getViewport({ scale });\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: context, viewport });\r\n-        });\r\n-      }\r\n-    }\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n \r\n-    // Render thumbnails for limited pages\r\n-    function renderThumbnails(maxVisible) {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = 1; i <= maxVisible; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n-        });\r\n-      }\r\n-    }\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n+    });\r\n+  }\r\n+}\r\n \r\n \r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n"
                },
                {
                    "date": 1756976784097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,68 +123,87 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-\r\n+   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n let pdfDoc = null;\r\n let scale = 1.5;\r\n \r\n const pdfViewer = document.getElementById(\"viewer\");\r\n const sidebar = document.getElementById(\"sidebar\");\r\n const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-// Load PDF\r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+// Load PDF and ensure page 1 is rendered first\r\n+pdfjsLib.getDocument(url).promise.then(async pdf => {\r\n   pdfDoc = pdf;\r\n+  pageInfo.textContent = `1 - ${pdfDoc.numPages} / ${pdfDoc.numPages}`;\r\n \r\n-  // Default: render all pages\r\n-  renderPages(pdfDoc.numPages);\r\n-  renderThumbnails(pdfDoc.numPages);\r\n+  // Render page 1 and wait for it to finish painting\r\n+  await renderPageAndAppend(1);\r\n \r\n-  // Update info\r\n-  pageInfo.textContent = `1 - ${pdfDoc.numPages} / ${pdfDoc.numPages}`;\r\n+  // Then render the remaining pages sequentially (2..N)\r\n+  renderRemainingPages(2);\r\n+\r\n+  // Thumbnails (render in background)\r\n+  renderThumbnails();\r\n });\r\n \r\n-// Render pages (can be all or limited)\r\n-function renderPages(maxVisible) {\r\n-  pdfViewer.innerHTML = \"\";\r\n-\r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n+// Renders a single page and appends its canvas to pdfViewer; resolves when rendering finishes\r\n+function renderPageAndAppend(pageNum) {\r\n+  return pdfDoc.getPage(pageNum).then(page => {\r\n     const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n+    canvas.className = \"pdf-page\";\r\n     pdfViewer.appendChild(canvas);\r\n \r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const context = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n+    const ctx = canvas.getContext(\"2d\");\r\n+    const viewport = page.getViewport({ scale });\r\n \r\n-      page.render({ canvasContext: context, viewport });\r\n-    });\r\n+    canvas.width = viewport.width;\r\n+    canvas.height = viewport.height;\r\n+\r\n+    return page.render({ canvasContext: ctx, viewport }).promise;\r\n+  });\r\n+}\r\n+\r\n+// Render remaining pages sequentially to preserve ordering and avoid race conditions\r\n+async function renderRemainingPages(startNum) {\r\n+  for (let num = startNum; num <= pdfDoc.numPages; num++) {\r\n+    try {\r\n+      await renderPageAndAppend(num);\r\n+    } catch (err) {\r\n+      console.error(\"Error rendering page\", num, err);\r\n+    }\r\n   }\r\n }\r\n \r\n-// Render thumbnails (can be all or limited)\r\n-function renderThumbnails(maxVisible) {\r\n+// Thumbnails (renders small canvases; clickable to scroll to that page)\r\n+function renderThumbnails() {\r\n+  if (!sidebar) return;\r\n   sidebar.innerHTML = \"\";\r\n-\r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    pdfDoc.getPage(num).then(page => {\r\n+  for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n+    // render thumbnails without awaiting (keeps UI snappy)\r\n+    pdfDoc.getPage(i).then(page => {\r\n       const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n+      const tCanvas = document.createElement(\"canvas\");\r\n+      tCanvas.className = \"thumb\";\r\n+      tCanvas.width = viewport.width;\r\n+      tCanvas.height = viewport.height;\r\n+      const tCtx = tCanvas.getContext(\"2d\");\r\n \r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      sidebar.appendChild(canvas);\r\n-    });\r\n+      page.render({ canvasContext: tCtx, viewport });\r\n+\r\n+      // click handler scrolls to the right canvas (no auto-scroll on load)\r\n+      tCanvas.addEventListener(\"click\", () => {\r\n+        const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n+        const target = canvases[i - 1]; // index matches page number - 1\r\n+        if (target) target.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n+      });\r\n+\r\n+      sidebar.appendChild(tCanvas);\r\n+    }).catch(e => console.error(\"thumb err\", i, e));\r\n   }\r\n }\r\n \r\n-\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n       renderPages(startPage, endPage);\r\n"
                },
                {
                    "date": 1756976993522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,87 +123,69 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-   const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n \r\n-// Load PDF and ensure page 1 is rendered first\r\n-pdfjsLib.getDocument(url).promise.then(async pdf => {\r\n+    const pdfViewer = document.getElementById(\"viewer\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n+\r\n+   pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n-  pageInfo.textContent = `1 - ${pdfDoc.numPages} / ${pdfDoc.numPages}`;\r\n \r\n-  // Render page 1 and wait for it to finish painting\r\n-  await renderPageAndAppend(1);\r\n-\r\n-  // Then render the remaining pages sequentially (2..N)\r\n-  renderRemainingPages(2);\r\n-\r\n-  // Thumbnails (render in background)\r\n-  renderThumbnails();\r\n-});\r\n-\r\n-// Renders a single page and appends its canvas to pdfViewer; resolves when rendering finishes\r\n-function renderPageAndAppend(pageNum) {\r\n-  return pdfDoc.getPage(pageNum).then(page => {\r\n+  for (let num = 1; num <= pdfDoc.numPages; num++) {\r\n     const canvas = document.createElement(\"canvas\");\r\n-    canvas.className = \"pdf-page\";\r\n     pdfViewer.appendChild(canvas);\r\n \r\n-    const ctx = canvas.getContext(\"2d\");\r\n-    const viewport = page.getViewport({ scale });\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+    });\r\n+  }\r\n+});\r\n+    // Render limited pages\r\n+    function renderPages(maxVisible) {\r\n+      pdfViewer.innerHTML = \"\";\r\n \r\n-    canvas.width = viewport.width;\r\n-    canvas.height = viewport.height;\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        pdfViewer.appendChild(canvas);\r\n \r\n-    return page.render({ canvasContext: ctx, viewport }).promise;\r\n-  });\r\n-}\r\n+        pdfDoc.getPage(num).then(page => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: context, viewport });\r\n+        });\r\n+      }\r\n+    }\r\n \r\n-// Render remaining pages sequentially to preserve ordering and avoid race conditions\r\n-async function renderRemainingPages(startNum) {\r\n-  for (let num = startNum; num <= pdfDoc.numPages; num++) {\r\n-    try {\r\n-      await renderPageAndAppend(num);\r\n-    } catch (err) {\r\n-      console.error(\"Error rendering page\", num, err);\r\n+    // Render thumbnails for limited pages\r\n+    function renderThumbnails(maxVisible) {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = 1; i <= maxVisible; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n+        });\r\n+      }\r\n     }\r\n-  }\r\n-}\r\n \r\n-// Thumbnails (renders small canvases; clickable to scroll to that page)\r\n-function renderThumbnails() {\r\n-  if (!sidebar) return;\r\n-  sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n-    // render thumbnails without awaiting (keeps UI snappy)\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const tCanvas = document.createElement(\"canvas\");\r\n-      tCanvas.className = \"thumb\";\r\n-      tCanvas.width = viewport.width;\r\n-      tCanvas.height = viewport.height;\r\n-      const tCtx = tCanvas.getContext(\"2d\");\r\n \r\n-      page.render({ canvasContext: tCtx, viewport });\r\n-\r\n-      // click handler scrolls to the right canvas (no auto-scroll on load)\r\n-      tCanvas.addEventListener(\"click\", () => {\r\n-        const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n-        const target = canvases[i - 1]; // index matches page number - 1\r\n-        if (target) target.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n-      });\r\n-\r\n-      sidebar.appendChild(tCanvas);\r\n-    }).catch(e => console.error(\"thumb err\", i, e));\r\n-  }\r\n-}\r\n-\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n       renderPages(startPage, endPage);\r\n"
                },
                {
                    "date": 1756977087378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,24 +132,18 @@\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-   pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n \r\n-  for (let num = 1; num <= pdfDoc.numPages; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    pdfViewer.appendChild(canvas);\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+      renderPages(maxVisible);\r\n+      renderThumbnails(maxVisible);\r\n     });\r\n-  }\r\n-});\r\n+\r\n     // Render limited pages\r\n     function renderPages(maxVisible) {\r\n       pdfViewer.innerHTML = \"\";\r\n \r\n"
                },
                {
                    "date": 1756977094317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,61 +123,61 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+  const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n \r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n-      renderPages(maxVisible);\r\n-      renderThumbnails(maxVisible);\r\n-    });\r\n+  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+  renderPages(maxVisible);\r\n+  renderThumbnails(maxVisible);\r\n+});\r\n \r\n-    // Render limited pages\r\n-    function renderPages(maxVisible) {\r\n-      pdfViewer.innerHTML = \"\";\r\n+// Render limited pages\r\n+function renderPages(maxVisible) {\r\n+  pdfViewer.innerHTML = \"\";\r\n \r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        pdfViewer.appendChild(canvas);\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    pdfViewer.appendChild(canvas);\r\n \r\n-        pdfDoc.getPage(num).then(page => {\r\n-          const context = canvas.getContext(\"2d\");\r\n-          const viewport = page.getViewport({ scale });\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: context, viewport });\r\n-        });\r\n-      }\r\n-    }\r\n+    pdfDoc.getPage(num).then(page => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: context, viewport });\r\n+    });\r\n+  }\r\n+}\r\n \r\n-    // Render thumbnails for limited pages\r\n-    function renderThumbnails(maxVisible) {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = 1; i <= maxVisible; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n-        });\r\n-      }\r\n-    }\r\n+// Render thumbnails for limited pages\r\n+function renderThumbnails(maxVisible) {\r\n+  sidebar.innerHTML = \"\";\r\n+  for (let i = 1; i <= maxVisible; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n+    });\r\n+  }\r\n+}\r\n \r\n \r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n"
                },
                {
                    "date": 1756977237904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,47 +123,66 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-  const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+  <script>\r\n+const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n let pdfDoc = null;\r\n let scale = 1.5;\r\n+let limitPages = 50; // max pages to allow\r\n \r\n const pdfViewer = document.getElementById(\"viewer\");\r\n const sidebar = document.getElementById(\"sidebar\");\r\n const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n-\r\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n   pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n-  renderPages(maxVisible);\r\n-  renderThumbnails(maxVisible);\r\n-});\r\n \r\n-// Render limited pages\r\n-function renderPages(maxVisible) {\r\n-  pdfViewer.innerHTML = \"\";\r\n-\r\n+  // Create empty canvases first\r\n   for (let num = 1; num <= maxVisible; num++) {\r\n     const canvas = document.createElement(\"canvas\");\r\n     canvas.classList.add(\"pdf-page\");\r\n+    canvas.dataset.pageNumber = num; // tag page number\r\n     pdfViewer.appendChild(canvas);\r\n+  }\r\n \r\n-    pdfDoc.getPage(num).then(page => {\r\n-      const context = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: context, viewport });\r\n+  // Lazy load when in view\r\n+  setupLazyLoading(maxVisible);\r\n+  renderThumbnails(maxVisible);\r\n+});\r\n+\r\n+// Lazy rendering with IntersectionObserver\r\n+function setupLazyLoading(maxVisible) {\r\n+  const observer = new IntersectionObserver(entries => {\r\n+    entries.forEach(entry => {\r\n+      if (entry.isIntersecting) {\r\n+        const canvas = entry.target;\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+\r\n+        // Render only if not already rendered\r\n+        if (!canvas.dataset.rendered) {\r\n+          pdfDoc.getPage(pageNum).then(page => {\r\n+            const context = canvas.getContext(\"2d\");\r\n+            const viewport = page.getViewport({ scale });\r\n+            canvas.height = viewport.height;\r\n+            canvas.width = viewport.width;\r\n+            page.render({ canvasContext: context, viewport });\r\n+            canvas.dataset.rendered = \"true\";\r\n+          });\r\n+        }\r\n+      }\r\n     });\r\n-  }\r\n+  }, { root: pdfViewer, threshold: 0.1 });\r\n+\r\n+  // Observe all canvases\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n }\r\n \r\n-// Render thumbnails for limited pages\r\n+// Render thumbnails\r\n function renderThumbnails(maxVisible) {\r\n   sidebar.innerHTML = \"\";\r\n   for (let i = 1; i <= maxVisible; i++) {\r\n     pdfDoc.getPage(i).then(page => {\r\n@@ -173,30 +192,52 @@\n       canvas.height = viewport.height;\r\n       canvas.width = viewport.width;\r\n       page.render({ canvasContext: ctx, viewport });\r\n       sidebar.appendChild(canvas);\r\n+\r\n+      // Scroll to corresponding page\r\n+      canvas.onclick = () => {\r\n+        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+      };\r\n     });\r\n   }\r\n }\r\n \r\n+// Zoom\r\n+document.getElementById(\"zoomIn\").onclick = () => {\r\n+  scale += 0.2;\r\n+  rerenderVisiblePages();\r\n+};\r\n \r\n-    // Zoom\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n-      renderPages(startPage, endPage);\r\n-    };\r\n+document.getElementById(\"zoomOut\").onclick = () => {\r\n+  if (scale > 0.4) {\r\n+    scale -= 0.2;\r\n+    rerenderVisiblePages();\r\n+  }\r\n+};\r\n \r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        renderPages(startPage, endPage);\r\n-      }\r\n-    };\r\n+// Rerender only visible pages on zoom\r\n+function rerenderVisiblePages() {\r\n+  const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n+  canvases.forEach(canvas => {\r\n+    if (canvas.dataset.rendered) {\r\n+      const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+      pdfDoc.getPage(pageNum).then(page => {\r\n+        const context = canvas.getContext(\"2d\");\r\n+        const viewport = page.getViewport({ scale });\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        page.render({ canvasContext: context, viewport });\r\n+      });\r\n+    }\r\n+  });\r\n+}\r\n \r\n-    // Close\r\n-    document.getElementById(\"closeBtn\").onclick = () => {\r\n-      document.getElementById(\"container\").style.display = \"none\";\r\n-    };\r\n+// Close\r\n+document.getElementById(\"closeBtn\").onclick = () => {\r\n+  document.getElementById(\"container\").style.display = \"none\";\r\n+};\r\n \r\n   </script>\r\n \r\n </body>\r\n"
                },
                {
                    "date": 1756977248786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,10 +122,9 @@\n   </div>\r\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n-  <script>\r\n-  <script>\r\n+<script>\r\n const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n let pdfDoc = null;\r\n let scale = 1.5;\r\n@@ -237,9 +236,7 @@\n document.getElementById(\"closeBtn\").onclick = () => {\r\n   document.getElementById(\"container\").style.display = \"none\";\r\n };\r\n \r\n-  </script>\r\n-\r\n </body>\r\n \r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756977263574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n   </div>\r\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n-<script>\r\n+  <script>\r\n const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n let pdfDoc = null;\r\n let scale = 1.5;\r\n@@ -235,8 +235,9 @@\n // Close\r\n document.getElementById(\"closeBtn\").onclick = () => {\r\n   document.getElementById(\"container\").style.display = \"none\";\r\n };\r\n+</script>\r\n \r\n </body>\r\n \r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756977409915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,121 +123,121 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n \r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n-let limitPages = 50; // max pages to allow\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n+    let limitPages = 50; // max pages to allow\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const pdfViewer = document.getElementById(\"viewer\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n-  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // Create empty canvases first\r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    canvas.dataset.pageNumber = num; // tag page number\r\n-    pdfViewer.appendChild(canvas);\r\n-  }\r\n+      // Create empty canvases first\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        canvas.dataset.pageNumber = num; // tag page number\r\n+        pdfViewer.appendChild(canvas);\r\n+      }\r\n \r\n-  // Lazy load when in view\r\n-  setupLazyLoading(maxVisible);\r\n-  renderThumbnails(maxVisible);\r\n-});\r\n+      // Lazy load when in view\r\n+      setupLazyLoading(maxVisible);\r\n+      renderThumbnails(maxVisible);\r\n+    });\r\n \r\n-// Lazy rendering with IntersectionObserver\r\n-function setupLazyLoading(maxVisible) {\r\n-  const observer = new IntersectionObserver(entries => {\r\n-    entries.forEach(entry => {\r\n-      if (entry.isIntersecting) {\r\n-        const canvas = entry.target;\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+    // Lazy rendering with IntersectionObserver\r\n+    function setupLazyLoading(maxVisible) {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-        // Render only if not already rendered\r\n-        if (!canvas.dataset.rendered) {\r\n+            // Render only if not already rendered\r\n+            if (!canvas.dataset.rendered) {\r\n+              pdfDoc.getPage(pageNum).then(page => {\r\n+                const context = canvas.getContext(\"2d\");\r\n+                const viewport = page.getViewport({ scale });\r\n+                canvas.height = viewport.height;\r\n+                canvas.width = viewport.width;\r\n+                page.render({ canvasContext: context, viewport });\r\n+                canvas.dataset.rendered = \"true\";\r\n+              });\r\n+            }\r\n+          }\r\n+        });\r\n+      }, { root: pdfViewer, threshold: 0.1 });\r\n+\r\n+      // Observe all canvases\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+    }\r\n+\r\n+    // Render thumbnails\r\n+    function renderThumbnails(maxVisible) {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = 1; i <= maxVisible; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n+\r\n+          // Scroll to corresponding page\r\n+          canvas.onclick = () => {\r\n+            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+          };\r\n+        });\r\n+      }\r\n+    }\r\n+\r\n+    // Zoom\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      rerenderVisiblePages();\r\n+    };\r\n+\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        rerenderVisiblePages();\r\n+      }\r\n+    };\r\n+\r\n+    // Rerender only visible pages on zoom\r\n+    function rerenderVisiblePages() {\r\n+      const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n+      canvases.forEach(canvas => {\r\n+        if (canvas.dataset.rendered) {\r\n+          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n           pdfDoc.getPage(pageNum).then(page => {\r\n             const context = canvas.getContext(\"2d\");\r\n             const viewport = page.getViewport({ scale });\r\n             canvas.height = viewport.height;\r\n             canvas.width = viewport.width;\r\n             page.render({ canvasContext: context, viewport });\r\n-            canvas.dataset.rendered = \"true\";\r\n           });\r\n         }\r\n-      }\r\n-    });\r\n-  }, { root: pdfViewer, threshold: 0.1 });\r\n-\r\n-  // Observe all canvases\r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-}\r\n-\r\n-// Render thumbnails\r\n-function renderThumbnails(maxVisible) {\r\n-  sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= maxVisible; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      sidebar.appendChild(canvas);\r\n-\r\n-      // Scroll to corresponding page\r\n-      canvas.onclick = () => {\r\n-        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-      };\r\n-    });\r\n-  }\r\n-}\r\n-\r\n-// Zoom\r\n-document.getElementById(\"zoomIn\").onclick = () => {\r\n-  scale += 0.2;\r\n-  rerenderVisiblePages();\r\n-};\r\n-\r\n-document.getElementById(\"zoomOut\").onclick = () => {\r\n-  if (scale > 0.4) {\r\n-    scale -= 0.2;\r\n-    rerenderVisiblePages();\r\n-  }\r\n-};\r\n-\r\n-// Rerender only visible pages on zoom\r\n-function rerenderVisiblePages() {\r\n-  const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n-  canvases.forEach(canvas => {\r\n-    if (canvas.dataset.rendered) {\r\n-      const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-      pdfDoc.getPage(pageNum).then(page => {\r\n-        const context = canvas.getContext(\"2d\");\r\n-        const viewport = page.getViewport({ scale });\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        page.render({ canvasContext: context, viewport });\r\n       });\r\n     }\r\n-  });\r\n-}\r\n \r\n-// Close\r\n-document.getElementById(\"closeBtn\").onclick = () => {\r\n-  document.getElementById(\"container\").style.display = \"none\";\r\n-};\r\n-</script>\r\n+    // Close\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n+    };\r\n+  </script>\r\n \r\n </body>\r\n \r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756977433085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    let limitPages = 50; // max pages to allow\r\n+    // let limitPages = 50; // max pages to allow\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n"
                },
                {
                    "date": 1756977438916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    // let limitPages = 50; // max pages to allow\r\n+    let limitPages = 50; // max pages to allow\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n"
                },
                {
                    "date": 1756977491341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,120 +123,117 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n+   <script>\r\n+  const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n \r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n-    let limitPages = 50; // max pages to allow\r\n+  let pdfDoc = null;\r\n+  let scale = 1.5;\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+  const pdfViewer = document.getElementById(\"viewer\");\r\n+  const sidebar = document.getElementById(\"sidebar\");\r\n+  const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+  pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+    pdfDoc = pdf;\r\n \r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+    pageInfo.textContent = `1 - ${pdfDoc.numPages} / ${pdfDoc.numPages}`;\r\n \r\n-      // Create empty canvases first\r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        canvas.dataset.pageNumber = num; // tag page number\r\n-        pdfViewer.appendChild(canvas);\r\n-      }\r\n+    // Create empty canvases for ALL pages\r\n+    for (let num = 1; num <= pdfDoc.numPages; num++) {\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      canvas.classList.add(\"pdf-page\");\r\n+      canvas.dataset.pageNumber = num; // tag page number\r\n+      pdfViewer.appendChild(canvas);\r\n+    }\r\n \r\n-      // Lazy load when in view\r\n-      setupLazyLoading(maxVisible);\r\n-      renderThumbnails(maxVisible);\r\n-    });\r\n+    // Lazy load setup\r\n+    setupLazyLoading();\r\n+    renderThumbnails();\r\n+  });\r\n \r\n-    // Lazy rendering with IntersectionObserver\r\n-    function setupLazyLoading(maxVisible) {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+  // Lazy rendering with IntersectionObserver\r\n+  function setupLazyLoading() {\r\n+    const observer = new IntersectionObserver(entries => {\r\n+      entries.forEach(entry => {\r\n+        if (entry.isIntersecting) {\r\n+          const canvas = entry.target;\r\n+          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-            // Render only if not already rendered\r\n-            if (!canvas.dataset.rendered) {\r\n-              pdfDoc.getPage(pageNum).then(page => {\r\n-                const context = canvas.getContext(\"2d\");\r\n-                const viewport = page.getViewport({ scale });\r\n-                canvas.height = viewport.height;\r\n-                canvas.width = viewport.width;\r\n-                page.render({ canvasContext: context, viewport });\r\n-                canvas.dataset.rendered = \"true\";\r\n-              });\r\n-            }\r\n+          if (!canvas.dataset.rendered) {\r\n+            pdfDoc.getPage(pageNum).then(page => {\r\n+              const context = canvas.getContext(\"2d\");\r\n+              const viewport = page.getViewport({ scale });\r\n+              canvas.height = viewport.height;\r\n+              canvas.width = viewport.width;\r\n+              page.render({ canvasContext: context, viewport });\r\n+              canvas.dataset.rendered = \"true\";\r\n+            });\r\n           }\r\n-        });\r\n-      }, { root: pdfViewer, threshold: 0.1 });\r\n+        }\r\n+      });\r\n+    }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-      // Observe all canvases\r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-    }\r\n+    pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+  }\r\n \r\n-    // Render thumbnails\r\n-    function renderThumbnails(maxVisible) {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = 1; i <= maxVisible; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n+  // Render thumbnails for all pages\r\n+  function renderThumbnails() {\r\n+    sidebar.innerHTML = \"\";\r\n+    for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n+      pdfDoc.getPage(i).then(page => {\r\n+        const viewport = page.getViewport({ scale: 0.2 });\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        const ctx = canvas.getContext(\"2d\");\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        page.render({ canvasContext: ctx, viewport });\r\n+        sidebar.appendChild(canvas);\r\n \r\n-          // Scroll to corresponding page\r\n-          canvas.onclick = () => {\r\n-            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-          };\r\n-        });\r\n-      }\r\n+        // Scroll to page when thumbnail clicked\r\n+        canvas.onclick = () => {\r\n+          const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+          if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+        };\r\n+      });\r\n     }\r\n+  }\r\n \r\n-    // Zoom\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n+  // Zoom controls\r\n+  document.getElementById(\"zoomIn\").onclick = () => {\r\n+    scale += 0.2;\r\n+    rerenderVisiblePages();\r\n+  };\r\n+\r\n+  document.getElementById(\"zoomOut\").onclick = () => {\r\n+    if (scale > 0.4) {\r\n+      scale -= 0.2;\r\n       rerenderVisiblePages();\r\n-    };\r\n+    }\r\n+  };\r\n \r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        rerenderVisiblePages();\r\n+  // Rerender only visible pages on zoom\r\n+  function rerenderVisiblePages() {\r\n+    const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n+    canvases.forEach(canvas => {\r\n+      if (canvas.dataset.rendered) {\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+        pdfDoc.getPage(pageNum).then(page => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: context, viewport });\r\n+        });\r\n       }\r\n-    };\r\n+    });\r\n+  }\r\n \r\n-    // Rerender only visible pages on zoom\r\n-    function rerenderVisiblePages() {\r\n-      const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n-      canvases.forEach(canvas => {\r\n-        if (canvas.dataset.rendered) {\r\n-          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-          pdfDoc.getPage(pageNum).then(page => {\r\n-            const context = canvas.getContext(\"2d\");\r\n-            const viewport = page.getViewport({ scale });\r\n-            canvas.height = viewport.height;\r\n-            canvas.width = viewport.width;\r\n-            page.render({ canvasContext: context, viewport });\r\n-          });\r\n-        }\r\n-      });\r\n-    }\r\n-\r\n-    // Close\r\n-    document.getElementById(\"closeBtn\").onclick = () => {\r\n-      document.getElementById(\"container\").style.display = \"none\";\r\n-    };\r\n+  // Close\r\n+  document.getElementById(\"closeBtn\").onclick = () => {\r\n+    document.getElementById(\"container\").style.display = \"none\";\r\n+  };\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756977512763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,10 +123,9 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-   <script>\r\n-  const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n+    const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n \r\n   let pdfDoc = null;\r\n   let scale = 1.5;\r\n \r\n"
                },
                {
                    "date": 1756977546349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,114 +125,118 @@\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n     const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n \r\n-  let pdfDoc = null;\r\n-  let scale = 1.5;\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n+    let limitPages = 50; // max pages to allow\r\n \r\n-  const pdfViewer = document.getElementById(\"viewer\");\r\n-  const sidebar = document.getElementById(\"sidebar\");\r\n-  const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const pdfViewer = document.getElementById(\"viewer\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-  pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-    pdfDoc = pdf;\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-    pageInfo.textContent = `1 - ${pdfDoc.numPages} / ${pdfDoc.numPages}`;\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-    // Create empty canvases for ALL pages\r\n-    for (let num = 1; num <= pdfDoc.numPages; num++) {\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      canvas.classList.add(\"pdf-page\");\r\n-      canvas.dataset.pageNumber = num; // tag page number\r\n-      pdfViewer.appendChild(canvas);\r\n-    }\r\n+      // Create empty canvases first\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        canvas.dataset.pageNumber = num; // tag page number\r\n+        pdfViewer.appendChild(canvas);\r\n+      }\r\n \r\n-    // Lazy load setup\r\n-    setupLazyLoading();\r\n-    renderThumbnails();\r\n-  });\r\n+      // Lazy load when in view\r\n+      setupLazyLoading(maxVisible);\r\n+      renderThumbnails(maxVisible);\r\n+    });\r\n \r\n-  // Lazy rendering with IntersectionObserver\r\n-  function setupLazyLoading() {\r\n-    const observer = new IntersectionObserver(entries => {\r\n-      entries.forEach(entry => {\r\n-        if (entry.isIntersecting) {\r\n-          const canvas = entry.target;\r\n-          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+    // Lazy rendering with IntersectionObserver\r\n+    function setupLazyLoading(maxVisible) {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-          if (!canvas.dataset.rendered) {\r\n-            pdfDoc.getPage(pageNum).then(page => {\r\n-              const context = canvas.getContext(\"2d\");\r\n-              const viewport = page.getViewport({ scale });\r\n-              canvas.height = viewport.height;\r\n-              canvas.width = viewport.width;\r\n-              page.render({ canvasContext: context, viewport });\r\n-              canvas.dataset.rendered = \"true\";\r\n-            });\r\n+            // Render only if not already rendered\r\n+            if (!canvas.dataset.rendered) {\r\n+              pdfDoc.getPage(pageNum).then(page => {\r\n+                const context = canvas.getContext(\"2d\");\r\n+                const viewport = page.getViewport({ scale });\r\n+                canvas.height = viewport.height;\r\n+                canvas.width = viewport.width;\r\n+                page.render({ canvasContext: context, viewport });\r\n+                canvas.dataset.rendered = \"true\";\r\n+              });\r\n+            }\r\n           }\r\n-        }\r\n-      });\r\n-    }, { root: pdfViewer, threshold: 0.1 });\r\n+        });\r\n+      }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-    pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-  }\r\n+      // Observe all canvases\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+    }\r\n \r\n-  // Render thumbnails for all pages\r\n-  function renderThumbnails() {\r\n-    sidebar.innerHTML = \"\";\r\n-    for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n-      pdfDoc.getPage(i).then(page => {\r\n-        const viewport = page.getViewport({ scale: 0.2 });\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        const ctx = canvas.getContext(\"2d\");\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        page.render({ canvasContext: ctx, viewport });\r\n-        sidebar.appendChild(canvas);\r\n+    // Render thumbnails\r\n+    function renderThumbnails(maxVisible) {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = 1; i <= maxVisible; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n \r\n-        // Scroll to page when thumbnail clicked\r\n-        canvas.onclick = () => {\r\n-          const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-          if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-        };\r\n-      });\r\n+          // Scroll to corresponding page\r\n+          canvas.onclick = () => {\r\n+            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+          };\r\n+        });\r\n+      }\r\n     }\r\n-  }\r\n \r\n-  // Zoom controls\r\n-  document.getElementById(\"zoomIn\").onclick = () => {\r\n-    scale += 0.2;\r\n-    rerenderVisiblePages();\r\n-  };\r\n-\r\n-  document.getElementById(\"zoomOut\").onclick = () => {\r\n-    if (scale > 0.4) {\r\n-      scale -= 0.2;\r\n+    // Zoom\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n       rerenderVisiblePages();\r\n-    }\r\n-  };\r\n+    };\r\n \r\n-  // Rerender only visible pages on zoom\r\n-  function rerenderVisiblePages() {\r\n-    const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n-    canvases.forEach(canvas => {\r\n-      if (canvas.dataset.rendered) {\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-        pdfDoc.getPage(pageNum).then(page => {\r\n-          const context = canvas.getContext(\"2d\");\r\n-          const viewport = page.getViewport({ scale });\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: context, viewport });\r\n-        });\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        rerenderVisiblePages();\r\n       }\r\n-    });\r\n-  }\r\n+    };\r\n \r\n-  // Close\r\n-  document.getElementById(\"closeBtn\").onclick = () => {\r\n-    document.getElementById(\"container\").style.display = \"none\";\r\n-  };\r\n+    // Rerender only visible pages on zoom\r\n+    function rerenderVisiblePages() {\r\n+      const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n+      canvases.forEach(canvas => {\r\n+        if (canvas.dataset.rendered) {\r\n+          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+          pdfDoc.getPage(pageNum).then(page => {\r\n+            const context = canvas.getContext(\"2d\");\r\n+            const viewport = page.getViewport({ scale });\r\n+            canvas.height = viewport.height;\r\n+            canvas.width = viewport.width;\r\n+            page.render({ canvasContext: context, viewport });\r\n+          });\r\n+        }\r\n+      });\r\n+    }\r\n+\r\n+    // Close\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n+    };\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756977553004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    let limitPages = 50; // max pages to allow\r\n+    let limitPages = 1; // max pages to allow\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n"
                },
                {
                    "date": 1756977644946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,31 +129,29 @@\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n     let limitPages = 1; // max pages to allow\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+  pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n+  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    canvas.dataset.pageNumber = num;\r\n+    pdfViewer.appendChild(canvas);\r\n+  }\r\n \r\n-      // Create empty canvases first\r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        canvas.dataset.pageNumber = num; // tag page number\r\n-        pdfViewer.appendChild(canvas);\r\n-      }\r\n+  // Make sure viewer starts at first page\r\n+  pdfViewer.scrollTop = 0;\r\n \r\n-      // Lazy load when in view\r\n-      setupLazyLoading(maxVisible);\r\n-      renderThumbnails(maxVisible);\r\n-    });\r\n+  setupLazyLoading(maxVisible);\r\n+  renderThumbnails(maxVisible);\r\n+});\r\n \r\n+\r\n     // Lazy rendering with IntersectionObserver\r\n     function setupLazyLoading(maxVisible) {\r\n       const observer = new IntersectionObserver(entries => {\r\n         entries.forEach(entry => {\r\n"
                },
                {
                    "date": 1756977657463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,29 +127,29 @@\n     const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    let limitPages = 1; // max pages to allow\r\n+    let limitPages = ; // max pages to allow\r\n \r\n-  pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n-  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    canvas.dataset.pageNumber = num;\r\n-    pdfViewer.appendChild(canvas);\r\n-  }\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        canvas.dataset.pageNumber = num;\r\n+        pdfViewer.appendChild(canvas);\r\n+      }\r\n \r\n-  // Make sure viewer starts at first page\r\n-  pdfViewer.scrollTop = 0;\r\n+      // Make sure viewer starts at first page\r\n+      pdfViewer.scrollTop = 0;\r\n \r\n-  setupLazyLoading(maxVisible);\r\n-  renderThumbnails(maxVisible);\r\n-});\r\n+      setupLazyLoading(maxVisible);\r\n+      renderThumbnails(maxVisible);\r\n+    });\r\n \r\n \r\n     // Lazy rendering with IntersectionObserver\r\n     function setupLazyLoading(maxVisible) {\r\n"
                },
                {
                    "date": 1756977674609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,12 @@\n     const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    let limitPages = ; // max pages to allow\r\n+    let limitPages = 1; \r\n+const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n+\r\n     pdfjsLib.getDocument(url).promise.then(pdf => {\r\n       pdfDoc = pdf;\r\n       const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n"
                },
                {
                    "date": 1756977692247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,10 @@\n     const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    let limitPages = 1; \r\n-const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+    let limitPages = 50;\r\n+    const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n \r\n     pdfjsLib.getDocument(url).promise.then(pdf => {\r\n       pdfDoc = pdf;\r\n"
                },
                {
                    "date": 1756977750380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,122 +122,123 @@\n   </div>\r\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n-  <script>\r\n-    const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n+ const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n \r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n-    let limitPages = 50;\r\n-    const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n+let limitPages = 50; // max pages to allow\r\n \r\n+// ‚úÖ get references from DOM\r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n \r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+  // ‚úÖ only compute maxVisible after pdfDoc is loaded\r\n+  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        canvas.dataset.pageNumber = num;\r\n-        pdfViewer.appendChild(canvas);\r\n-      }\r\n+  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-      // Make sure viewer starts at first page\r\n-      pdfViewer.scrollTop = 0;\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    canvas.dataset.pageNumber = num;\r\n+    pdfViewer.appendChild(canvas);\r\n+  }\r\n \r\n-      setupLazyLoading(maxVisible);\r\n-      renderThumbnails(maxVisible);\r\n-    });\r\n+  // Always start at first page\r\n+  pdfViewer.scrollTop = 0;\r\n \r\n+  setupLazyLoading(maxVisible);\r\n+  renderThumbnails(maxVisible);\r\n+});\r\n \r\n-    // Lazy rendering with IntersectionObserver\r\n-    function setupLazyLoading(maxVisible) {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+// Lazy rendering with IntersectionObserver\r\n+function setupLazyLoading(maxVisible) {\r\n+  const observer = new IntersectionObserver(entries => {\r\n+    entries.forEach(entry => {\r\n+      if (entry.isIntersecting) {\r\n+        const canvas = entry.target;\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-            // Render only if not already rendered\r\n-            if (!canvas.dataset.rendered) {\r\n-              pdfDoc.getPage(pageNum).then(page => {\r\n-                const context = canvas.getContext(\"2d\");\r\n-                const viewport = page.getViewport({ scale });\r\n-                canvas.height = viewport.height;\r\n-                canvas.width = viewport.width;\r\n-                page.render({ canvasContext: context, viewport });\r\n-                canvas.dataset.rendered = \"true\";\r\n-              });\r\n-            }\r\n-          }\r\n-        });\r\n-      }, { root: pdfViewer, threshold: 0.1 });\r\n-\r\n-      // Observe all canvases\r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-    }\r\n-\r\n-    // Render thumbnails\r\n-    function renderThumbnails(maxVisible) {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = 1; i <= maxVisible; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n-\r\n-          // Scroll to corresponding page\r\n-          canvas.onclick = () => {\r\n-            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-          };\r\n-        });\r\n-      }\r\n-    }\r\n-\r\n-    // Zoom\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n-      rerenderVisiblePages();\r\n-    };\r\n-\r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        rerenderVisiblePages();\r\n-      }\r\n-    };\r\n-\r\n-    // Rerender only visible pages on zoom\r\n-    function rerenderVisiblePages() {\r\n-      const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n-      canvases.forEach(canvas => {\r\n-        if (canvas.dataset.rendered) {\r\n-          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+        if (!canvas.dataset.rendered) {\r\n           pdfDoc.getPage(pageNum).then(page => {\r\n             const context = canvas.getContext(\"2d\");\r\n             const viewport = page.getViewport({ scale });\r\n             canvas.height = viewport.height;\r\n             canvas.width = viewport.width;\r\n             page.render({ canvasContext: context, viewport });\r\n+            canvas.dataset.rendered = \"true\";\r\n           });\r\n         }\r\n+      }\r\n+    });\r\n+  }, { root: pdfViewer, threshold: 0.1 });\r\n+\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+}\r\n+\r\n+// Render thumbnails\r\n+function renderThumbnails(maxVisible) {\r\n+  sidebar.innerHTML = \"\";\r\n+  for (let i = 1; i <= maxVisible; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n+\r\n+      // Scroll to page\r\n+      canvas.onclick = () => {\r\n+        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+      };\r\n+    });\r\n+  }\r\n+}\r\n+\r\n+// Zoom\r\n+document.getElementById(\"zoomIn\").onclick = () => {\r\n+  scale += 0.2;\r\n+  rerenderVisiblePages();\r\n+};\r\n+\r\n+document.getElementById(\"zoomOut\").onclick = () => {\r\n+  if (scale > 0.4) {\r\n+    scale -= 0.2;\r\n+    rerenderVisiblePages();\r\n+  }\r\n+};\r\n+\r\n+// Rerender only visible pages on zoom\r\n+function rerenderVisiblePages() {\r\n+  const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n+  canvases.forEach(canvas => {\r\n+    if (canvas.dataset.rendered) {\r\n+      const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+      pdfDoc.getPage(pageNum).then(page => {\r\n+        const context = canvas.getContext(\"2d\");\r\n+        const viewport = page.getViewport({ scale });\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        page.render({ canvasContext: context, viewport });\r\n       });\r\n     }\r\n+  });\r\n+}\r\n \r\n-    // Close\r\n-    document.getElementById(\"closeBtn\").onclick = () => {\r\n-      document.getElementById(\"container\").style.display = \"none\";\r\n-    };\r\n-  </script>\r\n+// Close\r\n+document.getElementById(\"closeBtn\").onclick = () => {\r\n+  document.getElementById(\"container\").style.display = \"none\";\r\n+};\r\n \r\n+\r\n </body>\r\n \r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756977765963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,10 @@\n   </div>\r\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n- const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n+  <script>\r\n+   const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n \r\n let pdfDoc = null;\r\n let scale = 1.5;\r\n let limitPages = 50; // max pages to allow\r\n@@ -237,8 +238,9 @@\n document.getElementById(\"closeBtn\").onclick = () => {\r\n   document.getElementById(\"container\").style.display = \"none\";\r\n };\r\n \r\n+  </script>\r\n \r\n </body>\r\n \r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756977785824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,122 +123,122 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-   const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n+    const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n \r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n-let limitPages = 50; // max pages to allow\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n+    let limitPages = 1; // max pages to allow\r\n \r\n-// ‚úÖ get references from DOM\r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    // ‚úÖ get references from DOM\r\n+    const pdfViewer = document.getElementById(\"viewer\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n \r\n-  // ‚úÖ only compute maxVisible after pdfDoc is loaded\r\n-  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+      // ‚úÖ only compute maxVisible after pdfDoc is loaded\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    canvas.dataset.pageNumber = num;\r\n-    pdfViewer.appendChild(canvas);\r\n-  }\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        canvas.dataset.pageNumber = num;\r\n+        pdfViewer.appendChild(canvas);\r\n+      }\r\n \r\n-  // Always start at first page\r\n-  pdfViewer.scrollTop = 0;\r\n+      // Always start at first page\r\n+      pdfViewer.scrollTop = 0;\r\n \r\n-  setupLazyLoading(maxVisible);\r\n-  renderThumbnails(maxVisible);\r\n-});\r\n+      setupLazyLoading(maxVisible);\r\n+      renderThumbnails(maxVisible);\r\n+    });\r\n \r\n-// Lazy rendering with IntersectionObserver\r\n-function setupLazyLoading(maxVisible) {\r\n-  const observer = new IntersectionObserver(entries => {\r\n-    entries.forEach(entry => {\r\n-      if (entry.isIntersecting) {\r\n-        const canvas = entry.target;\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+    // Lazy rendering with IntersectionObserver\r\n+    function setupLazyLoading(maxVisible) {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-        if (!canvas.dataset.rendered) {\r\n+            if (!canvas.dataset.rendered) {\r\n+              pdfDoc.getPage(pageNum).then(page => {\r\n+                const context = canvas.getContext(\"2d\");\r\n+                const viewport = page.getViewport({ scale });\r\n+                canvas.height = viewport.height;\r\n+                canvas.width = viewport.width;\r\n+                page.render({ canvasContext: context, viewport });\r\n+                canvas.dataset.rendered = \"true\";\r\n+              });\r\n+            }\r\n+          }\r\n+        });\r\n+      }, { root: pdfViewer, threshold: 0.1 });\r\n+\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+    }\r\n+\r\n+    // Render thumbnails\r\n+    function renderThumbnails(maxVisible) {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = 1; i <= maxVisible; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n+\r\n+          // Scroll to page\r\n+          canvas.onclick = () => {\r\n+            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+          };\r\n+        });\r\n+      }\r\n+    }\r\n+\r\n+    // Zoom\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      rerenderVisiblePages();\r\n+    };\r\n+\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        rerenderVisiblePages();\r\n+      }\r\n+    };\r\n+\r\n+    // Rerender only visible pages on zoom\r\n+    function rerenderVisiblePages() {\r\n+      const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n+      canvases.forEach(canvas => {\r\n+        if (canvas.dataset.rendered) {\r\n+          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n           pdfDoc.getPage(pageNum).then(page => {\r\n             const context = canvas.getContext(\"2d\");\r\n             const viewport = page.getViewport({ scale });\r\n             canvas.height = viewport.height;\r\n             canvas.width = viewport.width;\r\n             page.render({ canvasContext: context, viewport });\r\n-            canvas.dataset.rendered = \"true\";\r\n           });\r\n         }\r\n-      }\r\n-    });\r\n-  }, { root: pdfViewer, threshold: 0.1 });\r\n-\r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-}\r\n-\r\n-// Render thumbnails\r\n-function renderThumbnails(maxVisible) {\r\n-  sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= maxVisible; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      sidebar.appendChild(canvas);\r\n-\r\n-      // Scroll to page\r\n-      canvas.onclick = () => {\r\n-        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-      };\r\n-    });\r\n-  }\r\n-}\r\n-\r\n-// Zoom\r\n-document.getElementById(\"zoomIn\").onclick = () => {\r\n-  scale += 0.2;\r\n-  rerenderVisiblePages();\r\n-};\r\n-\r\n-document.getElementById(\"zoomOut\").onclick = () => {\r\n-  if (scale > 0.4) {\r\n-    scale -= 0.2;\r\n-    rerenderVisiblePages();\r\n-  }\r\n-};\r\n-\r\n-// Rerender only visible pages on zoom\r\n-function rerenderVisiblePages() {\r\n-  const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n-  canvases.forEach(canvas => {\r\n-    if (canvas.dataset.rendered) {\r\n-      const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-      pdfDoc.getPage(pageNum).then(page => {\r\n-        const context = canvas.getContext(\"2d\");\r\n-        const viewport = page.getViewport({ scale });\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        page.render({ canvasContext: context, viewport });\r\n       });\r\n     }\r\n-  });\r\n-}\r\n \r\n-// Close\r\n-document.getElementById(\"closeBtn\").onclick = () => {\r\n-  document.getElementById(\"container\").style.display = \"none\";\r\n-};\r\n+    // Close\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n+    };\r\n \r\n   </script>\r\n \r\n </body>\r\n"
                },
                {
                    "date": 1756977877624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/c++ the complete reference, 4th edition - herbert schildt.pdf\";\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n     let limitPages = 1; // max pages to allow\r\n"
                },
                {
                    "date": 1756977886514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    let limitPages = 1; // max pages to allow\r\n+    let limitPages = 50; // max pages to allow\r\n \r\n     // ‚úÖ get references from DOM\r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n"
                },
                {
                    "date": 1756977966809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,30 +134,40 @@\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n \r\n-      // ‚úÖ only compute maxVisible after pdfDoc is loaded\r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        canvas.dataset.pageNumber = num;\r\n-        pdfViewer.appendChild(canvas);\r\n-      }\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    canvas.dataset.pageNumber = num;\r\n+    pdfViewer.appendChild(canvas);\r\n+  }\r\n \r\n-      // Always start at first page\r\n-      pdfViewer.scrollTop = 0;\r\n+  // ‚úÖ Always render page 1 immediately\r\n+  pdfDoc.getPage(1).then(page => {\r\n+    const canvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n+    const context = canvas.getContext(\"2d\");\r\n+    const viewport = page.getViewport({ scale });\r\n+    canvas.height = viewport.height;\r\n+    canvas.width = viewport.width;\r\n+    page.render({ canvasContext: context, viewport });\r\n+    canvas.dataset.rendered = \"true\";\r\n+  });\r\n \r\n-      setupLazyLoading(maxVisible);\r\n-      renderThumbnails(maxVisible);\r\n-    });\r\n+  // Always start at first page\r\n+  pdfViewer.scrollTop = 0;\r\n \r\n+  setupLazyLoading(maxVisible);\r\n+  renderThumbnails(maxVisible);\r\n+});\r\n+\r\n     // Lazy rendering with IntersectionObserver\r\n     function setupLazyLoading(maxVisible) {\r\n       const observer = new IntersectionObserver(entries => {\r\n         entries.forEach(entry => {\r\n"
                },
                {
                    "date": 1756977988019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,39 +134,39 @@\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n \r\n-  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+      pageInfo.textContent = `10 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    canvas.dataset.pageNumber = num;\r\n-    pdfViewer.appendChild(canvas);\r\n-  }\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        canvas.dataset.pageNumber = num;\r\n+        pdfViewer.appendChild(canvas);\r\n+      }\r\n \r\n-  // ‚úÖ Always render page 1 immediately\r\n-  pdfDoc.getPage(1).then(page => {\r\n-    const canvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n-    const context = canvas.getContext(\"2d\");\r\n-    const viewport = page.getViewport({ scale });\r\n-    canvas.height = viewport.height;\r\n-    canvas.width = viewport.width;\r\n-    page.render({ canvasContext: context, viewport });\r\n-    canvas.dataset.rendered = \"true\";\r\n-  });\r\n+      // ‚úÖ Always render page 1 immediately\r\n+      pdfDoc.getPage(1).then(page => {\r\n+        const canvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n+        const context = canvas.getContext(\"2d\");\r\n+        const viewport = page.getViewport({ scale });\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        page.render({ canvasContext: context, viewport });\r\n+        canvas.dataset.rendered = \"true\";\r\n+      });\r\n \r\n-  // Always start at first page\r\n-  pdfViewer.scrollTop = 0;\r\n+      // Always start at first page\r\n+      pdfViewer.scrollTop = 0;\r\n \r\n-  setupLazyLoading(maxVisible);\r\n-  renderThumbnails(maxVisible);\r\n-});\r\n+      setupLazyLoading(maxVisible);\r\n+      renderThumbnails(maxVisible);\r\n+    });\r\n \r\n     // Lazy rendering with IntersectionObserver\r\n     function setupLazyLoading(maxVisible) {\r\n       const observer = new IntersectionObserver(entries => {\r\n"
                },
                {
                    "date": 1756977994973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n       pdfDoc = pdf;\r\n \r\n       const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-      pageInfo.textContent = `10 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+      pageInfo.textContent = ` - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n       for (let num = 1; num <= maxVisible; num++) {\r\n         const canvas = document.createElement(\"canvas\");\r\n         canvas.classList.add(\"pdf-page\");\r\n"
                },
                {
                    "date": 1756978008306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n       pdfDoc = pdf;\r\n \r\n       const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-      pageInfo.textContent = ` - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n       for (let num = 1; num <= maxVisible; num++) {\r\n         const canvas = document.createElement(\"canvas\");\r\n         canvas.classList.add(\"pdf-page\");\r\n"
                },
                {
                    "date": 1756978031747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    let limitPages = 50; // max pages to allow\r\n+    let limitPages = 20; // max pages to allow\r\n \r\n     // ‚úÖ get references from DOM\r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n"
                },
                {
                    "date": 1756978038741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    let limitPages = 20; // max pages to allow\r\n+    let limitPages = 1; // max pages to allow\r\n \r\n     // ‚úÖ get references from DOM\r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n"
                },
                {
                    "date": 1756978133919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,12 @@\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    let limitPages = 1; // max pages to allow\r\n+   let startPage = 1;  \r\n \r\n+// new variable for max pages to render\r\n+let maxRenderPages = 50;  \r\n     // ‚úÖ get references from DOM\r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n"
                },
                {
                    "date": 1756978151394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,49 +127,49 @@\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-   let startPage = 1;  \r\n+    let startPage = 1;\r\n \r\n-// new variable for max pages to render\r\n-let maxRenderPages = 50;  \r\n+    // new variable for max pages to render\r\n+    let maxRenderPages = 50;\r\n     // ‚úÖ get references from DOM\r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n \r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+  const endPage = Math.min(maxRenderPages, pdfDoc.numPages);\r\n+  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n \r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+  // Create canvases for each page up to limit\r\n+  for (let num = startPage; num <= endPage; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    canvas.dataset.pageNumber = num;\r\n+    pdfViewer.appendChild(canvas);\r\n+  }\r\n \r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        canvas.dataset.pageNumber = num;\r\n-        pdfViewer.appendChild(canvas);\r\n-      }\r\n+  // ‚úÖ Render the first page right away\r\n+  pdfDoc.getPage(startPage).then(page => {\r\n+    const canvas = pdfViewer.querySelector(`[data-page-number='${startPage}']`);\r\n+    const context = canvas.getContext(\"2d\");\r\n+    const viewport = page.getViewport({ scale });\r\n+    canvas.height = viewport.height;\r\n+    canvas.width = viewport.width;\r\n+    page.render({ canvasContext: context, viewport });\r\n+    canvas.dataset.rendered = \"true\";\r\n+  });\r\n \r\n-      // ‚úÖ Always render page 1 immediately\r\n-      pdfDoc.getPage(1).then(page => {\r\n-        const canvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n-        const context = canvas.getContext(\"2d\");\r\n-        const viewport = page.getViewport({ scale });\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        page.render({ canvasContext: context, viewport });\r\n-        canvas.dataset.rendered = \"true\";\r\n-      });\r\n+  // Reset scroll to top\r\n+  pdfViewer.scrollTop = 0;\r\n \r\n-      // Always start at first page\r\n-      pdfViewer.scrollTop = 0;\r\n+  setupLazyLoading(endPage);\r\n+  renderThumbnails(endPage);\r\n+});\r\n \r\n-      setupLazyLoading(maxVisible);\r\n-      renderThumbnails(maxVisible);\r\n-    });\r\n-\r\n     // Lazy rendering with IntersectionObserver\r\n     function setupLazyLoading(maxVisible) {\r\n       const observer = new IntersectionObserver(entries => {\r\n         entries.forEach(entry => {\r\n"
                },
                {
                    "date": 1756978190359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,40 +136,40 @@\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n \r\n-  const endPage = Math.min(maxRenderPages, pdfDoc.numPages);\r\n-  pageInfo.textContent = `${startPage} - ${endPage} / ${pdfDoc.numPages}`;\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-  // Create canvases for each page up to limit\r\n-  for (let num = startPage; num <= endPage; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    canvas.dataset.pageNumber = num;\r\n-    pdfViewer.appendChild(canvas);\r\n-  }\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // ‚úÖ Render the first page right away\r\n-  pdfDoc.getPage(startPage).then(page => {\r\n-    const canvas = pdfViewer.querySelector(`[data-page-number='${startPage}']`);\r\n-    const context = canvas.getContext(\"2d\");\r\n-    const viewport = page.getViewport({ scale });\r\n-    canvas.height = viewport.height;\r\n-    canvas.width = viewport.width;\r\n-    page.render({ canvasContext: context, viewport });\r\n-    canvas.dataset.rendered = \"true\";\r\n-  });\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        canvas.dataset.pageNumber = num;\r\n+        pdfViewer.appendChild(canvas);\r\n+      }\r\n \r\n-  // Reset scroll to top\r\n-  pdfViewer.scrollTop = 0;\r\n+      // ‚úÖ Always render page 1 immediately\r\n+      pdfDoc.getPage(1).then(page => {\r\n+        const canvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n+        const context = canvas.getContext(\"2d\");\r\n+        const viewport = page.getViewport({ scale });\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        page.render({ canvasContext: context, viewport });\r\n+        canvas.dataset.rendered = \"true\";\r\n+      });\r\n \r\n-  setupLazyLoading(endPage);\r\n-  renderThumbnails(endPage);\r\n-});\r\n+      // Always start at first page\r\n+      pdfViewer.scrollTop = 0;\r\n \r\n+      setupLazyLoading(maxVisible);\r\n+      renderThumbnails(maxVisible);\r\n+    });\r\n+\r\n     // Lazy rendering with IntersectionObserver\r\n     function setupLazyLoading(maxVisible) {\r\n       const observer = new IntersectionObserver(entries => {\r\n         entries.forEach(entry => {\r\n"
                },
                {
                    "date": 1756978201606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,12 +127,10 @@\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    let startPage = 1;\r\n+    let limitPages = 1; // max pages to allow\r\n \r\n-    // new variable for max pages to render\r\n-    let maxRenderPages = 50;\r\n     // ‚úÖ get references from DOM\r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n"
                },
                {
                    "date": 1756978369458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,64 +134,66 @@\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n \r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        canvas.dataset.pageNumber = num;\r\n-        pdfViewer.appendChild(canvas);\r\n-      }\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    canvas.dataset.pageNumber = num;\r\n+    pdfViewer.appendChild(canvas);\r\n+  }\r\n \r\n-      // ‚úÖ Always render page 1 immediately\r\n-      pdfDoc.getPage(1).then(page => {\r\n-        const canvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n-        const context = canvas.getContext(\"2d\");\r\n-        const viewport = page.getViewport({ scale });\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        page.render({ canvasContext: context, viewport });\r\n-        canvas.dataset.rendered = \"true\";\r\n-      });\r\n+  // ‚úÖ Always render page 1 immediately\r\n+  pdfDoc.getPage(1).then(page => {\r\n+    const canvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n+    const context = canvas.getContext(\"2d\");\r\n+    const viewport = page.getViewport({ scale });\r\n+    canvas.height = viewport.height;\r\n+    canvas.width = viewport.width;\r\n+    page.render({ canvasContext: context, viewport });\r\n+    canvas.dataset.rendered = \"true\";\r\n+    console.log(\"Loaded page:\", 1); // üëà log first page\r\n+  });\r\n \r\n-      // Always start at first page\r\n-      pdfViewer.scrollTop = 0;\r\n+  // Always start at first page\r\n+  pdfViewer.scrollTop = 0;\r\n \r\n-      setupLazyLoading(maxVisible);\r\n-      renderThumbnails(maxVisible);\r\n-    });\r\n+  setupLazyLoading(maxVisible);\r\n+  renderThumbnails(maxVisible);\r\n+});\r\n \r\n-    // Lazy rendering with IntersectionObserver\r\n-    function setupLazyLoading(maxVisible) {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+// Lazy rendering with IntersectionObserver\r\n+function setupLazyLoading(maxVisible) {\r\n+  const observer = new IntersectionObserver(entries => {\r\n+    entries.forEach(entry => {\r\n+      if (entry.isIntersecting) {\r\n+        const canvas = entry.target;\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-            if (!canvas.dataset.rendered) {\r\n-              pdfDoc.getPage(pageNum).then(page => {\r\n-                const context = canvas.getContext(\"2d\");\r\n-                const viewport = page.getViewport({ scale });\r\n-                canvas.height = viewport.height;\r\n-                canvas.width = viewport.width;\r\n-                page.render({ canvasContext: context, viewport });\r\n-                canvas.dataset.rendered = \"true\";\r\n-              });\r\n-            }\r\n-          }\r\n-        });\r\n-      }, { root: pdfViewer, threshold: 0.1 });\r\n+        if (!canvas.dataset.rendered) {\r\n+          pdfDoc.getPage(pageNum).then(page => {\r\n+            const context = canvas.getContext(\"2d\");\r\n+            const viewport = page.getViewport({ scale });\r\n+            canvas.height = viewport.height;\r\n+            canvas.width = viewport.width;\r\n+            page.render({ canvasContext: context, viewport });\r\n+            canvas.dataset.rendered = \"true\";\r\n+            console.log(\"Loaded page:\", pageNum); // üëà log lazy loaded page\r\n+          });\r\n+        }\r\n+      }\r\n+    });\r\n+  }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-    }\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+}\r\n \r\n     // Render thumbnails\r\n     function renderThumbnails(maxVisible) {\r\n       sidebar.innerHTML = \"\";\r\n"
                },
                {
                    "date": 1756978387654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,73 +127,73 @@\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    let limitPages = 1; // max pages to allow\r\n+    let limitPages = 50; // max pages to allow\r\n \r\n     // ‚úÖ get references from DOM\r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n \r\n-  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    canvas.dataset.pageNumber = num;\r\n-    pdfViewer.appendChild(canvas);\r\n-  }\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        canvas.dataset.pageNumber = num;\r\n+        pdfViewer.appendChild(canvas);\r\n+      }\r\n \r\n-  // ‚úÖ Always render page 1 immediately\r\n-  pdfDoc.getPage(1).then(page => {\r\n-    const canvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n-    const context = canvas.getContext(\"2d\");\r\n-    const viewport = page.getViewport({ scale });\r\n-    canvas.height = viewport.height;\r\n-    canvas.width = viewport.width;\r\n-    page.render({ canvasContext: context, viewport });\r\n-    canvas.dataset.rendered = \"true\";\r\n-    console.log(\"Loaded page:\", 1); // üëà log first page\r\n-  });\r\n+      // ‚úÖ Always render page 1 immediately\r\n+      pdfDoc.getPage(1).then(page => {\r\n+        const canvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n+        const context = canvas.getContext(\"2d\");\r\n+        const viewport = page.getViewport({ scale });\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        page.render({ canvasContext: context, viewport });\r\n+        canvas.dataset.rendered = \"true\";\r\n+        console.log(\"Loaded page:\", 1); // üëà log first page\r\n+      });\r\n \r\n-  // Always start at first page\r\n-  pdfViewer.scrollTop = 0;\r\n+      // Always start at first page\r\n+      pdfViewer.scrollTop = 0;\r\n \r\n-  setupLazyLoading(maxVisible);\r\n-  renderThumbnails(maxVisible);\r\n-});\r\n+      setupLazyLoading(maxVisible);\r\n+      renderThumbnails(maxVisible);\r\n+    });\r\n \r\n-// Lazy rendering with IntersectionObserver\r\n-function setupLazyLoading(maxVisible) {\r\n-  const observer = new IntersectionObserver(entries => {\r\n-    entries.forEach(entry => {\r\n-      if (entry.isIntersecting) {\r\n-        const canvas = entry.target;\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+    // Lazy rendering with IntersectionObserver\r\n+    function setupLazyLoading(maxVisible) {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-        if (!canvas.dataset.rendered) {\r\n-          pdfDoc.getPage(pageNum).then(page => {\r\n-            const context = canvas.getContext(\"2d\");\r\n-            const viewport = page.getViewport({ scale });\r\n-            canvas.height = viewport.height;\r\n-            canvas.width = viewport.width;\r\n-            page.render({ canvasContext: context, viewport });\r\n-            canvas.dataset.rendered = \"true\";\r\n-            console.log(\"Loaded page:\", pageNum); // üëà log lazy loaded page\r\n-          });\r\n-        }\r\n-      }\r\n-    });\r\n-  }, { root: pdfViewer, threshold: 0.1 });\r\n+            if (!canvas.dataset.rendered) {\r\n+              pdfDoc.getPage(pageNum).then(page => {\r\n+                const context = canvas.getContext(\"2d\");\r\n+                const viewport = page.getViewport({ scale });\r\n+                canvas.height = viewport.height;\r\n+                canvas.width = viewport.width;\r\n+                page.render({ canvasContext: context, viewport });\r\n+                canvas.dataset.rendered = \"true\";\r\n+                console.log(\"Loaded page:\", pageNum); // üëà log lazy loaded page\r\n+              });\r\n+            }\r\n+          }\r\n+        });\r\n+      }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-}\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+    }\r\n \r\n     // Render thumbnails\r\n     function renderThumbnails(maxVisible) {\r\n       sidebar.innerHTML = \"\";\r\n"
                },
                {
                    "date": 1756978503618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,33 +168,41 @@\n       renderThumbnails(maxVisible);\r\n     });\r\n \r\n     // Lazy rendering with IntersectionObserver\r\n-    function setupLazyLoading(maxVisible) {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+function setupLazyLoading(maxVisible) {\r\n+  const observer = new IntersectionObserver(entries => {\r\n+    entries.forEach(entry => {\r\n+      if (entry.isIntersecting) {\r\n+        const canvas = entry.target;\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-            if (!canvas.dataset.rendered) {\r\n-              pdfDoc.getPage(pageNum).then(page => {\r\n-                const context = canvas.getContext(\"2d\");\r\n-                const viewport = page.getViewport({ scale });\r\n-                canvas.height = viewport.height;\r\n-                canvas.width = viewport.width;\r\n-                page.render({ canvasContext: context, viewport });\r\n-                canvas.dataset.rendered = \"true\";\r\n-                console.log(\"Loaded page:\", pageNum); // üëà log lazy loaded page\r\n-              });\r\n-            }\r\n-          }\r\n-        });\r\n-      }, { root: pdfViewer, threshold: 0.1 });\r\n+        // üëá skip page 1 because we already rendered it\r\n+        if (pageNum === 1) return;\r\n \r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-    }\r\n+        if (!canvas.dataset.rendered) {\r\n+          pdfDoc.getPage(pageNum).then(page => {\r\n+            const context = canvas.getContext(\"2d\");\r\n+            const viewport = page.getViewport({ scale });\r\n+            canvas.height = viewport.height;\r\n+            canvas.width = viewport.width;\r\n \r\n+            // render & log\r\n+            const renderTask = page.render({ canvasContext: context, viewport });\r\n+            renderTask.promise.then(() => {\r\n+              canvas.dataset.rendered = \"true\";\r\n+              console.log(\"Loaded page:\", pageNum);\r\n+            });\r\n+          });\r\n+        }\r\n+      }\r\n+    });\r\n+  }, { root: pdfViewer, threshold: 0.1 });\r\n+\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+}\r\n+\r\n+\r\n     // Render thumbnails\r\n     function renderThumbnails(maxVisible) {\r\n       sidebar.innerHTML = \"\";\r\n       for (let i = 1; i <= maxVisible; i++) {\r\n"
                },
                {
                    "date": 1756978550908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,73 +134,76 @@\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n+  pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n+  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    canvas.dataset.pageNumber = num;\r\n+    pdfViewer.appendChild(canvas);\r\n+  }\r\n \r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        canvas.dataset.pageNumber = num;\r\n-        pdfViewer.appendChild(canvas);\r\n-      }\r\n+  // ‚úÖ force scroll to top after canvases are in DOM\r\n+  requestAnimationFrame(() => {\r\n+    pdfViewer.scrollTop = 0;\r\n+  });\r\n \r\n-      // ‚úÖ Always render page 1 immediately\r\n-      pdfDoc.getPage(1).then(page => {\r\n-        const canvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n-        const context = canvas.getContext(\"2d\");\r\n-        const viewport = page.getViewport({ scale });\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        page.render({ canvasContext: context, viewport });\r\n-        canvas.dataset.rendered = \"true\";\r\n-        console.log(\"Loaded page:\", 1); // üëà log first page\r\n-      });\r\n+  // render first page immediately\r\n+  const firstCanvas = pdfViewer.querySelector(`[data-page-number='1']`);\r\n+  pdfDoc.getPage(1).then(page => {\r\n+    const context = firstCanvas.getContext(\"2d\");\r\n+    const viewport = page.getViewport({ scale });\r\n+    firstCanvas.height = viewport.height;\r\n+    firstCanvas.width = viewport.width;\r\n+    page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n+      firstCanvas.dataset.rendered = \"true\";\r\n+      console.log(\"Loaded page:\", 1);\r\n+    });\r\n+  });\r\n \r\n-      // Always start at first page\r\n-      pdfViewer.scrollTop = 0;\r\n+  setupLazyLoading(maxVisible);\r\n+  renderThumbnails(maxVisible);\r\n+});\r\n \r\n-      setupLazyLoading(maxVisible);\r\n-      renderThumbnails(maxVisible);\r\n-    });\r\n \r\n     // Lazy rendering with IntersectionObserver\r\n-function setupLazyLoading(maxVisible) {\r\n-  const observer = new IntersectionObserver(entries => {\r\n-    entries.forEach(entry => {\r\n-      if (entry.isIntersecting) {\r\n-        const canvas = entry.target;\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+    function setupLazyLoading(maxVisible) {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-        // üëá skip page 1 because we already rendered it\r\n-        if (pageNum === 1) return;\r\n+            // üëá skip page 1 because we already rendered it\r\n+            if (pageNum === 1) return;\r\n \r\n-        if (!canvas.dataset.rendered) {\r\n-          pdfDoc.getPage(pageNum).then(page => {\r\n-            const context = canvas.getContext(\"2d\");\r\n-            const viewport = page.getViewport({ scale });\r\n-            canvas.height = viewport.height;\r\n-            canvas.width = viewport.width;\r\n+            if (!canvas.dataset.rendered) {\r\n+              pdfDoc.getPage(pageNum).then(page => {\r\n+                const context = canvas.getContext(\"2d\");\r\n+                const viewport = page.getViewport({ scale });\r\n+                canvas.height = viewport.height;\r\n+                canvas.width = viewport.width;\r\n \r\n-            // render & log\r\n-            const renderTask = page.render({ canvasContext: context, viewport });\r\n-            renderTask.promise.then(() => {\r\n-              canvas.dataset.rendered = \"true\";\r\n-              console.log(\"Loaded page:\", pageNum);\r\n-            });\r\n-          });\r\n-        }\r\n-      }\r\n-    });\r\n-  }, { root: pdfViewer, threshold: 0.1 });\r\n+                // render & log\r\n+                const renderTask = page.render({ canvasContext: context, viewport });\r\n+                renderTask.promise.then(() => {\r\n+                  canvas.dataset.rendered = \"true\";\r\n+                  console.log(\"Loaded page:\", pageNum);\r\n+                });\r\n+              });\r\n+            }\r\n+          }\r\n+        });\r\n+      }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-}\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+    }\r\n \r\n \r\n     // Render thumbnails\r\n     function renderThumbnails(maxVisible) {\r\n"
                },
                {
                    "date": 1756978684773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,33 +140,37 @@\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n   pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n+  // Create canvases\r\n   for (let num = 1; num <= maxVisible; num++) {\r\n     const canvas = document.createElement(\"canvas\");\r\n     canvas.classList.add(\"pdf-page\");\r\n     canvas.dataset.pageNumber = num;\r\n     pdfViewer.appendChild(canvas);\r\n   }\r\n \r\n-  // ‚úÖ force scroll to top after canvases are in DOM\r\n-  requestAnimationFrame(() => {\r\n-    pdfViewer.scrollTop = 0;\r\n-  });\r\n-\r\n-  // render first page immediately\r\n-  const firstCanvas = pdfViewer.querySelector(`[data-page-number='1']`);\r\n+  // ‚úÖ Render page 1 immediately\r\n+  const firstCanvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n   pdfDoc.getPage(1).then(page => {\r\n     const context = firstCanvas.getContext(\"2d\");\r\n     const viewport = page.getViewport({ scale });\r\n     firstCanvas.height = viewport.height;\r\n     firstCanvas.width = viewport.width;\r\n     page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n       firstCanvas.dataset.rendered = \"true\";\r\n-      console.log(\"Loaded page:\", 1);\r\n+      console.log(\"‚úÖ Forced render page 1\");\r\n     });\r\n   });\r\n \r\n+  // ‚úÖ After DOM paint, ensure scroll is at top\r\n+  requestAnimationFrame(() => {\r\n+    pdfViewer.scrollTop = 0;\r\n+    const firstCanvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n+    if (firstCanvas) firstCanvas.scrollIntoView({ behavior: \"instant\" });\r\n+  });\r\n+\r\n+  // Continue lazy load for the rest\r\n   setupLazyLoading(maxVisible);\r\n   renderThumbnails(maxVisible);\r\n });\r\n \r\n"
                },
                {
                    "date": 1756978814393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-  pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n   pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n@@ -157,59 +157,22 @@\n     firstCanvas.height = viewport.height;\r\n     firstCanvas.width = viewport.width;\r\n     page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n       firstCanvas.dataset.rendered = \"true\";\r\n-      console.log(\"‚úÖ Forced render page 1\");\r\n+      console.log(\"‚úÖ Page 1 rendered immediately in viewer\");\r\n     });\r\n   });\r\n \r\n-  // ‚úÖ After DOM paint, ensure scroll is at top\r\n+  // Ensure viewer starts at top\r\n   requestAnimationFrame(() => {\r\n     pdfViewer.scrollTop = 0;\r\n-    const firstCanvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n-    if (firstCanvas) firstCanvas.scrollIntoView({ behavior: \"instant\" });\r\n   });\r\n \r\n-  // Continue lazy load for the rest\r\n+  // Lazy load the rest\r\n   setupLazyLoading(maxVisible);\r\n   renderThumbnails(maxVisible);\r\n });\r\n \r\n-\r\n-    // Lazy rendering with IntersectionObserver\r\n-    function setupLazyLoading(maxVisible) {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-\r\n-            // üëá skip page 1 because we already rendered it\r\n-            if (pageNum === 1) return;\r\n-\r\n-            if (!canvas.dataset.rendered) {\r\n-              pdfDoc.getPage(pageNum).then(page => {\r\n-                const context = canvas.getContext(\"2d\");\r\n-                const viewport = page.getViewport({ scale });\r\n-                canvas.height = viewport.height;\r\n-                canvas.width = viewport.width;\r\n-\r\n-                // render & log\r\n-                const renderTask = page.render({ canvasContext: context, viewport });\r\n-                renderTask.promise.then(() => {\r\n-                  canvas.dataset.rendered = \"true\";\r\n-                  console.log(\"Loaded page:\", pageNum);\r\n-                });\r\n-              });\r\n-            }\r\n-          }\r\n-        });\r\n-      }, { root: pdfViewer, threshold: 0.1 });\r\n-\r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-    }\r\n-\r\n-\r\n     // Render thumbnails\r\n     function renderThumbnails(maxVisible) {\r\n       sidebar.innerHTML = \"\";\r\n       for (let i = 1; i <= maxVisible; i++) {\r\n"
                },
                {
                    "date": 1756978879648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,8 +171,43 @@\n   setupLazyLoading(maxVisible);\r\n   renderThumbnails(maxVisible);\r\n });\r\n \r\n+\r\n+    // Lazy rendering with IntersectionObserver\r\n+    function setupLazyLoading(maxVisible) {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+\r\n+            // üëá skip page 1 because we already rendered it\r\n+            if (pageNum === 1) return;\r\n+\r\n+            if (!canvas.dataset.rendered) {\r\n+              pdfDoc.getPage(pageNum).then(page => {\r\n+                const context = canvas.getContext(\"2d\");\r\n+                const viewport = page.getViewport({ scale });\r\n+                canvas.height = viewport.height;\r\n+                canvas.width = viewport.width;\r\n+\r\n+                // render & log\r\n+                const renderTask = page.render({ canvasContext: context, viewport });\r\n+                renderTask.promise.then(() => {\r\n+                  canvas.dataset.rendered = \"true\";\r\n+                  console.log(\"Loaded page:\", pageNum);\r\n+                });\r\n+              });\r\n+            }\r\n+          }\r\n+        });\r\n+      }, { root: pdfViewer, threshold: 0.1 });\r\n+\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+    }\r\n+\r\n+\r\n     // Render thumbnails\r\n     function renderThumbnails(maxVisible) {\r\n       sidebar.innerHTML = \"\";\r\n       for (let i = 1; i <= maxVisible; i++) {\r\n"
                },
                {
                    "date": 1756979002899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,27 +148,25 @@\n     canvas.dataset.pageNumber = num;\r\n     pdfViewer.appendChild(canvas);\r\n   }\r\n \r\n-  // ‚úÖ Render page 1 immediately\r\n-  const firstCanvas = pdfViewer.querySelector(\"[data-page-number='1']\");\r\n+  // ‚úÖ Force render page 1 immediately\r\n+  const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n   pdfDoc.getPage(1).then(page => {\r\n     const context = firstCanvas.getContext(\"2d\");\r\n     const viewport = page.getViewport({ scale });\r\n     firstCanvas.height = viewport.height;\r\n     firstCanvas.width = viewport.width;\r\n     page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n       firstCanvas.dataset.rendered = \"true\";\r\n-      console.log(\"‚úÖ Page 1 rendered immediately in viewer\");\r\n+      console.log(\"‚úÖ Forced render of data-page-number=1\");\r\n     });\r\n   });\r\n \r\n-  // Ensure viewer starts at top\r\n-  requestAnimationFrame(() => {\r\n-    pdfViewer.scrollTop = 0;\r\n-  });\r\n+  // Scroll to top so page 1 is in view\r\n+  pdfViewer.scrollTop = 0;\r\n \r\n-  // Lazy load the rest\r\n+  // Then lazy load the rest\r\n   setupLazyLoading(maxVisible);\r\n   renderThumbnails(maxVisible);\r\n });\r\n \r\n"
                },
                {
                    "date": 1756979070151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,33 +140,33 @@\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n   pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // Create canvases\r\n+  // Create canvases in order\r\n   for (let num = 1; num <= maxVisible; num++) {\r\n     const canvas = document.createElement(\"canvas\");\r\n     canvas.classList.add(\"pdf-page\");\r\n     canvas.dataset.pageNumber = num;\r\n     pdfViewer.appendChild(canvas);\r\n   }\r\n \r\n-  // ‚úÖ Force render page 1 immediately\r\n+  // ‚úÖ Force render page 1 before lazy load\r\n   const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n   pdfDoc.getPage(1).then(page => {\r\n     const context = firstCanvas.getContext(\"2d\");\r\n     const viewport = page.getViewport({ scale });\r\n     firstCanvas.height = viewport.height;\r\n     firstCanvas.width = viewport.width;\r\n     page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n       firstCanvas.dataset.rendered = \"true\";\r\n-      console.log(\"‚úÖ Forced render of data-page-number=1\");\r\n+      console.log(\"‚úÖ Forced render: data-page-number=1\");\r\n     });\r\n   });\r\n \r\n-  // Scroll to top so page 1 is in view\r\n+  // ‚úÖ Make sure viewer starts at top\r\n   pdfViewer.scrollTop = 0;\r\n \r\n-  // Then lazy load the rest\r\n+  // Now lazy load the rest (2 ‚Üí maxVisible)\r\n   setupLazyLoading(maxVisible);\r\n   renderThumbnails(maxVisible);\r\n });\r\n \r\n"
                },
                {
                    "date": 1756979082854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,78 +134,72 @@\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n-  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // Create canvases in order\r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    canvas.dataset.pageNumber = num;\r\n-    pdfViewer.appendChild(canvas);\r\n-  }\r\n+      // Create canvases in order\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        canvas.dataset.pageNumber = num;\r\n+        pdfViewer.appendChild(canvas);\r\n+      }\r\n \r\n-  // ‚úÖ Force render page 1 before lazy load\r\n-  const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n-  pdfDoc.getPage(1).then(page => {\r\n-    const context = firstCanvas.getContext(\"2d\");\r\n-    const viewport = page.getViewport({ scale });\r\n-    firstCanvas.height = viewport.height;\r\n-    firstCanvas.width = viewport.width;\r\n-    page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n-      firstCanvas.dataset.rendered = \"true\";\r\n-      console.log(\"‚úÖ Forced render: data-page-number=1\");\r\n-    });\r\n-  });\r\n+      // ‚úÖ Force render page 1 before lazy load\r\n+      const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n+      pdfDoc.getPage(1).then(page => {\r\n+        const context = firstCanvas.getContext(\"2d\");\r\n+        const viewport = page.getViewport({ scale });\r\n+        firstCanvas.height = viewport.height;\r\n+        firstCanvas.width = viewport.width;\r\n+        page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n+          firstCanvas.dataset.rendered = \"true\";\r\n+          console.log(\"‚úÖ Forced render: data-page-number=1\");\r\n+        });\r\n+      });\r\n \r\n-  // ‚úÖ Make sure viewer starts at top\r\n-  pdfViewer.scrollTop = 0;\r\n+      // ‚úÖ Make sure viewer starts at top\r\n+      pdfViewer.scrollTop = 0;\r\n \r\n-  // Now lazy load the rest (2 ‚Üí maxVisible)\r\n-  setupLazyLoading(maxVisible);\r\n-  renderThumbnails(maxVisible);\r\n-});\r\n+      // Now lazy load the rest (2 ‚Üí maxVisible)\r\n+      setupLazyLoading(maxVisible);\r\n+      renderThumbnails(maxVisible);\r\n+    });\r\n \r\n \r\n     // Lazy rendering with IntersectionObserver\r\n-    function setupLazyLoading(maxVisible) {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+function setupLazyLoading(maxVisible) {\r\n+  const observer = new IntersectionObserver(entries => {\r\n+    entries.forEach(entry => {\r\n+      if (entry.isIntersecting) {\r\n+        const canvas = entry.target;\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-            // üëá skip page 1 because we already rendered it\r\n-            if (pageNum === 1) return;\r\n+        if (pageNum === 1) return; // ‚úÖ skip page 1 (already rendered)\r\n \r\n-            if (!canvas.dataset.rendered) {\r\n-              pdfDoc.getPage(pageNum).then(page => {\r\n-                const context = canvas.getContext(\"2d\");\r\n-                const viewport = page.getViewport({ scale });\r\n-                canvas.height = viewport.height;\r\n-                canvas.width = viewport.width;\r\n+        if (!canvas.dataset.rendered) {\r\n+          pdfDoc.getPage(pageNum).then(page => {\r\n+            const context = canvas.getContext(\"2d\");\r\n+            const viewport = page.getViewport({ scale });\r\n+            canvas.height = viewport.height;\r\n+            canvas.width = viewport.width;\r\n+            page.render({ canvasContext: context, viewport });\r\n+            canvas.dataset.rendered = \"true\";\r\n+            console.log(\"Lazy loaded page:\", pageNum);\r\n+          });\r\n+        }\r\n+      }\r\n+    });\r\n+  }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-                // render & log\r\n-                const renderTask = page.render({ canvasContext: context, viewport });\r\n-                renderTask.promise.then(() => {\r\n-                  canvas.dataset.rendered = \"true\";\r\n-                  console.log(\"Loaded page:\", pageNum);\r\n-                });\r\n-              });\r\n-            }\r\n-          }\r\n-        });\r\n-      }, { root: pdfViewer, threshold: 0.1 });\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+}\r\n \r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-    }\r\n-\r\n-\r\n     // Render thumbnails\r\n     function renderThumbnails(maxVisible) {\r\n       sidebar.innerHTML = \"\";\r\n       for (let i = 1; i <= maxVisible; i++) {\r\n"
                },
                {
                    "date": 1756979244929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,36 +169,58 @@\n       setupLazyLoading(maxVisible);\r\n       renderThumbnails(maxVisible);\r\n     });\r\n \r\n+    // Force the first page (data-page-number=\"1\") to load and show\r\n+function loadFirstPage() {\r\n+  const firstPage = document.querySelector('.pdf-page[data-page-number=\"1\"]');\r\n+  if (firstPage) {\r\n+    // Scroll into view\r\n+    firstPage.scrollIntoView({ behavior: \"smooth\" });\r\n \r\n+    // Optional: Highlight or log it\r\n+    console.log(\"Loaded first page:\", firstPage.dataset.pageNumber);\r\n+  }\r\n+}\r\n+\r\n+// After PDF renders\r\n+pdfjsLib.getDocument(url).promise.then(doc => {\r\n+  pdfDoc = doc;\r\n+  renderPages(); // your function that loops through pages\r\n+\r\n+  // Ensure first page is shown once rendering starts\r\n+  setTimeout(loadFirstPage, 300);\r\n+});\r\n+\r\n+\r\n+\r\n     // Lazy rendering with IntersectionObserver\r\n-function setupLazyLoading(maxVisible) {\r\n-  const observer = new IntersectionObserver(entries => {\r\n-    entries.forEach(entry => {\r\n-      if (entry.isIntersecting) {\r\n-        const canvas = entry.target;\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+    function setupLazyLoading(maxVisible) {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-        if (pageNum === 1) return; // ‚úÖ skip page 1 (already rendered)\r\n+            if (pageNum === 1) return; // ‚úÖ skip page 1 (already rendered)\r\n \r\n-        if (!canvas.dataset.rendered) {\r\n-          pdfDoc.getPage(pageNum).then(page => {\r\n-            const context = canvas.getContext(\"2d\");\r\n-            const viewport = page.getViewport({ scale });\r\n-            canvas.height = viewport.height;\r\n-            canvas.width = viewport.width;\r\n-            page.render({ canvasContext: context, viewport });\r\n-            canvas.dataset.rendered = \"true\";\r\n-            console.log(\"Lazy loaded page:\", pageNum);\r\n-          });\r\n-        }\r\n-      }\r\n-    });\r\n-  }, { root: pdfViewer, threshold: 0.1 });\r\n+            if (!canvas.dataset.rendered) {\r\n+              pdfDoc.getPage(pageNum).then(page => {\r\n+                const context = canvas.getContext(\"2d\");\r\n+                const viewport = page.getViewport({ scale });\r\n+                canvas.height = viewport.height;\r\n+                canvas.width = viewport.width;\r\n+                page.render({ canvasContext: context, viewport });\r\n+                canvas.dataset.rendered = \"true\";\r\n+                console.log(\"Lazy loaded page:\", pageNum);\r\n+              });\r\n+            }\r\n+          }\r\n+        });\r\n+      }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-}\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+    }\r\n \r\n     // Render thumbnails\r\n     function renderThumbnails(maxVisible) {\r\n       sidebar.innerHTML = \"\";\r\n"
                },
                {
                    "date": 1756979263173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,30 +170,43 @@\n       renderThumbnails(maxVisible);\r\n     });\r\n \r\n     // Force the first page (data-page-number=\"1\") to load and show\r\n-function loadFirstPage() {\r\n-  const firstPage = document.querySelector('.pdf-page[data-page-number=\"1\"]');\r\n-  if (firstPage) {\r\n-    // Scroll into view\r\n-    firstPage.scrollIntoView({ behavior: \"smooth\" });\r\n+    function loadFirstPage() {\r\n+      const firstPage = document.querySelector('.pdf-page[data-page-number=\"1\"]');\r\n+      if (firstPage) {\r\n+        // Scroll into view\r\n+        firstPage.scrollIntoView({ behavior: \"smooth\" });\r\n \r\n-    // Optional: Highlight or log it\r\n-    console.log(\"Loaded first page:\", firstPage.dataset.pageNumber);\r\n+        // Optional: Highlight or log it\r\n+        console.log(\"Loaded first page:\", firstPage.dataset.pageNumber);\r\n+      }\r\n+    }\r\n+\r\n+    function renderPages() {\r\n+  for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale: 1.5 });\r\n+      const canvas = document.querySelector(`.pdf-page[data-page-number=\"${i}\"]`);\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+    });\r\n   }\r\n }\r\n \r\n-// After PDF renders\r\n-pdfjsLib.getDocument(url).promise.then(doc => {\r\n-  pdfDoc = doc;\r\n-  renderPages(); // your function that loops through pages\r\n \r\n-  // Ensure first page is shown once rendering starts\r\n-  setTimeout(loadFirstPage, 300);\r\n-});\r\n+    // After PDF renders\r\n+    pdfjsLib.getDocument(url).promise.then(doc => {\r\n+      pdfDoc = doc;\r\n+      renderPages(); // your function that loops through pages\r\n \r\n+      // Ensure first page is shown once rendering starts\r\n+      setTimeout(loadFirstPage, 300);\r\n+    });\r\n \r\n \r\n+\r\n     // Lazy rendering with IntersectionObserver\r\n     function setupLazyLoading(maxVisible) {\r\n       const observer = new IntersectionObserver(entries => {\r\n         entries.forEach(entry => {\r\n"
                },
                {
                    "date": 1756979359029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,174 +123,138 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n-    let limitPages = 50; // max pages to allow\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n+let limitPages = 50; // max pages to allow\r\n \r\n-    // ‚úÖ get references from DOM\r\n-    const pdfViewer = document.getElementById(\"viewer\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+// ‚úÖ get references from DOM\r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+  pdfDoc = pdf;\r\n+  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n \r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-      // Create canvases in order\r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        canvas.dataset.pageNumber = num;\r\n-        pdfViewer.appendChild(canvas);\r\n-      }\r\n+  // Create canvases in order\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    canvas.dataset.pageNumber = num;\r\n+    pdfViewer.appendChild(canvas);\r\n+  }\r\n \r\n-      // ‚úÖ Force render page 1 before lazy load\r\n-      const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n-      pdfDoc.getPage(1).then(page => {\r\n-        const context = firstCanvas.getContext(\"2d\");\r\n-        const viewport = page.getViewport({ scale });\r\n-        firstCanvas.height = viewport.height;\r\n-        firstCanvas.width = viewport.width;\r\n-        page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n-          firstCanvas.dataset.rendered = \"true\";\r\n-          console.log(\"‚úÖ Forced render: data-page-number=1\");\r\n-        });\r\n-      });\r\n+  // ‚úÖ Force render page 1 immediately\r\n+  const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n+  pdfDoc.getPage(1).then(page => {\r\n+    const context = firstCanvas.getContext(\"2d\");\r\n+    const viewport = page.getViewport({ scale });\r\n+    firstCanvas.height = viewport.height;\r\n+    firstCanvas.width = viewport.width;\r\n+    page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n+      firstCanvas.dataset.rendered = \"true\";\r\n+      console.log(\"‚úÖ Forced render: page 1\");\r\n+    });\r\n+  });\r\n \r\n-      // ‚úÖ Make sure viewer starts at top\r\n-      pdfViewer.scrollTop = 0;\r\n+  // ‚úÖ Start at the top\r\n+  pdfViewer.scrollTop = 0;\r\n \r\n-      // Now lazy load the rest (2 ‚Üí maxVisible)\r\n-      setupLazyLoading(maxVisible);\r\n-      renderThumbnails(maxVisible);\r\n-    });\r\n+  // Lazy load the rest (2 ‚Üí maxVisible)\r\n+  setupLazyLoading(maxVisible);\r\n+  renderThumbnails(maxVisible);\r\n+});\r\n \r\n-    // Force the first page (data-page-number=\"1\") to load and show\r\n-    function loadFirstPage() {\r\n-      const firstPage = document.querySelector('.pdf-page[data-page-number=\"1\"]');\r\n-      if (firstPage) {\r\n-        // Scroll into view\r\n-        firstPage.scrollIntoView({ behavior: \"smooth\" });\r\n+// Lazy rendering with IntersectionObserver\r\n+function setupLazyLoading(maxVisible) {\r\n+  const observer = new IntersectionObserver(entries => {\r\n+    entries.forEach(entry => {\r\n+      if (entry.isIntersecting) {\r\n+        const canvas = entry.target;\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-        // Optional: Highlight or log it\r\n-        console.log(\"Loaded first page:\", firstPage.dataset.pageNumber);\r\n+        if (pageNum === 1) return; // skip page 1 (already rendered)\r\n+\r\n+        if (!canvas.dataset.rendered) {\r\n+          pdfDoc.getPage(pageNum).then(page => {\r\n+            const context = canvas.getContext(\"2d\");\r\n+            const viewport = page.getViewport({ scale });\r\n+            canvas.height = viewport.height;\r\n+            canvas.width = viewport.width;\r\n+            page.render({ canvasContext: context, viewport });\r\n+            canvas.dataset.rendered = \"true\";\r\n+            console.log(\"Lazy loaded page:\", pageNum);\r\n+          });\r\n+        }\r\n       }\r\n-    }\r\n+    });\r\n+  }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-    function renderPages() {\r\n-  for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+}\r\n+\r\n+// Render thumbnails\r\n+function renderThumbnails(maxVisible) {\r\n+  sidebar.innerHTML = \"\";\r\n+  for (let i = 1; i <= maxVisible; i++) {\r\n     pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 1.5 });\r\n-      const canvas = document.querySelector(`.pdf-page[data-page-number=\"${i}\"]`);\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n       const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n \r\n-      page.render({ canvasContext: ctx, viewport });\r\n+      // Scroll to page\r\n+      canvas.onclick = () => {\r\n+        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+      };\r\n     });\r\n   }\r\n }\r\n \r\n+// Zoom\r\n+document.getElementById(\"zoomIn\").onclick = () => {\r\n+  scale += 0.2;\r\n+  rerenderVisiblePages();\r\n+};\r\n \r\n-    // After PDF renders\r\n-    pdfjsLib.getDocument(url).promise.then(doc => {\r\n-      pdfDoc = doc;\r\n-      renderPages(); // your function that loops through pages\r\n+document.getElementById(\"zoomOut\").onclick = () => {\r\n+  if (scale > 0.4) {\r\n+    scale -= 0.2;\r\n+    rerenderVisiblePages();\r\n+  }\r\n+};\r\n \r\n-      // Ensure first page is shown once rendering starts\r\n-      setTimeout(loadFirstPage, 300);\r\n-    });\r\n-\r\n-\r\n-\r\n-    // Lazy rendering with IntersectionObserver\r\n-    function setupLazyLoading(maxVisible) {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-\r\n-            if (pageNum === 1) return; // ‚úÖ skip page 1 (already rendered)\r\n-\r\n-            if (!canvas.dataset.rendered) {\r\n-              pdfDoc.getPage(pageNum).then(page => {\r\n-                const context = canvas.getContext(\"2d\");\r\n-                const viewport = page.getViewport({ scale });\r\n-                canvas.height = viewport.height;\r\n-                canvas.width = viewport.width;\r\n-                page.render({ canvasContext: context, viewport });\r\n-                canvas.dataset.rendered = \"true\";\r\n-                console.log(\"Lazy loaded page:\", pageNum);\r\n-              });\r\n-            }\r\n-          }\r\n-        });\r\n-      }, { root: pdfViewer, threshold: 0.1 });\r\n-\r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-    }\r\n-\r\n-    // Render thumbnails\r\n-    function renderThumbnails(maxVisible) {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = 1; i <= maxVisible; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n-\r\n-          // Scroll to page\r\n-          canvas.onclick = () => {\r\n-            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-          };\r\n-        });\r\n-      }\r\n-    }\r\n-\r\n-    // Zoom\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n-      rerenderVisiblePages();\r\n-    };\r\n-\r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        rerenderVisiblePages();\r\n-      }\r\n-    };\r\n-\r\n-    // Rerender only visible pages on zoom\r\n-    function rerenderVisiblePages() {\r\n-      const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n-      canvases.forEach(canvas => {\r\n-        if (canvas.dataset.rendered) {\r\n-          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-          pdfDoc.getPage(pageNum).then(page => {\r\n-            const context = canvas.getContext(\"2d\");\r\n-            const viewport = page.getViewport({ scale });\r\n-            canvas.height = viewport.height;\r\n-            canvas.width = viewport.width;\r\n-            page.render({ canvasContext: context, viewport });\r\n-          });\r\n-        }\r\n+// Rerender only visible pages on zoom\r\n+function rerenderVisiblePages() {\r\n+  const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n+  canvases.forEach(canvas => {\r\n+    if (canvas.dataset.rendered) {\r\n+      const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+      pdfDoc.getPage(pageNum).then(page => {\r\n+        const context = canvas.getContext(\"2d\");\r\n+        const viewport = page.getViewport({ scale });\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        page.render({ canvasContext: context, viewport });\r\n       });\r\n     }\r\n+  });\r\n+}\r\n \r\n-    // Close\r\n-    document.getElementById(\"closeBtn\").onclick = () => {\r\n-      document.getElementById(\"container\").style.display = \"none\";\r\n-    };\r\n+// Close\r\n+document.getElementById(\"closeBtn\").onclick = () => {\r\n+  document.getElementById(\"container\").style.display = \"none\";\r\n+};\r\n \r\n   </script>\r\n \r\n </body>\r\n"
                },
                {
                    "date": 1756979833783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,48 +129,55 @@\n let pdfDoc = null;\r\n let scale = 1.5;\r\n let limitPages = 50; // max pages to allow\r\n \r\n-// ‚úÖ get references from DOM\r\n const pdfViewer = document.getElementById(\"viewer\");\r\n const sidebar = document.getElementById(\"sidebar\");\r\n const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n-\r\n   pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // Create canvases in order\r\n+  // Use existing canvases if they exist, otherwise create them\r\n   for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    canvas.dataset.pageNumber = num;\r\n-    pdfViewer.appendChild(canvas);\r\n+    let canvas = pdfViewer.querySelector(`[data-page-number=\"${num}\"]`);\r\n+    if (!canvas) {\r\n+      canvas = document.createElement(\"canvas\");\r\n+      canvas.classList.add(\"pdf-page\");\r\n+      canvas.dataset.pageNumber = num;\r\n+      pdfViewer.appendChild(canvas);\r\n+    }\r\n   }\r\n \r\n-  // ‚úÖ Force render page 1 immediately\r\n+  // Render page 1 immediately\r\n   const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n-  pdfDoc.getPage(1).then(page => {\r\n-    const context = firstCanvas.getContext(\"2d\");\r\n-    const viewport = page.getViewport({ scale });\r\n-    firstCanvas.height = viewport.height;\r\n-    firstCanvas.width = viewport.width;\r\n-    page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n-      firstCanvas.dataset.rendered = \"true\";\r\n-      console.log(\"‚úÖ Forced render: page 1\");\r\n-    });\r\n-  });\r\n+  renderPage(1, firstCanvas);\r\n \r\n-  // ‚úÖ Start at the top\r\n+  // Start at the top\r\n   pdfViewer.scrollTop = 0;\r\n \r\n   // Lazy load the rest (2 ‚Üí maxVisible)\r\n   setupLazyLoading(maxVisible);\r\n+\r\n+  // Render thumbnails in sidebar\r\n   renderThumbnails(maxVisible);\r\n });\r\n \r\n+function renderPage(pageNum, canvas) {\r\n+  pdfDoc.getPage(pageNum).then(page => {\r\n+    const context = canvas.getContext(\"2d\");\r\n+    const viewport = page.getViewport({ scale });\r\n+    canvas.height = viewport.height;\r\n+    canvas.width = viewport.width;\r\n+    page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n+      canvas.dataset.rendered = \"true\";\r\n+      console.log(`‚úÖ Rendered page ${pageNum}`);\r\n+    });\r\n+  });\r\n+}\r\n+\r\n // Lazy rendering with IntersectionObserver\r\n function setupLazyLoading(maxVisible) {\r\n   const observer = new IntersectionObserver(entries => {\r\n     entries.forEach(entry => {\r\n@@ -180,26 +187,18 @@\n \r\n         if (pageNum === 1) return; // skip page 1 (already rendered)\r\n \r\n         if (!canvas.dataset.rendered) {\r\n-          pdfDoc.getPage(pageNum).then(page => {\r\n-            const context = canvas.getContext(\"2d\");\r\n-            const viewport = page.getViewport({ scale });\r\n-            canvas.height = viewport.height;\r\n-            canvas.width = viewport.width;\r\n-            page.render({ canvasContext: context, viewport });\r\n-            canvas.dataset.rendered = \"true\";\r\n-            console.log(\"Lazy loaded page:\", pageNum);\r\n-          });\r\n+          renderPage(pageNum, canvas);\r\n         }\r\n       }\r\n     });\r\n   }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n   pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n }\r\n \r\n-// Render thumbnails\r\n+// Render thumbnails in sidebar\r\n function renderThumbnails(maxVisible) {\r\n   sidebar.innerHTML = \"\";\r\n   for (let i = 1; i <= maxVisible; i++) {\r\n     pdfDoc.getPage(i).then(page => {\r\n@@ -210,51 +209,51 @@\n       canvas.width = viewport.width;\r\n       page.render({ canvasContext: ctx, viewport });\r\n       sidebar.appendChild(canvas);\r\n \r\n-      // Scroll to page\r\n       canvas.onclick = () => {\r\n         const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n         if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n       };\r\n     });\r\n   }\r\n }\r\n \r\n-// Zoom\r\n-document.getElementById(\"zoomIn\").onclick = () => {\r\n-  scale += 0.2;\r\n-  rerenderVisiblePages();\r\n-};\r\n \r\n-document.getElementById(\"zoomOut\").onclick = () => {\r\n-  if (scale > 0.4) {\r\n-    scale -= 0.2;\r\n-    rerenderVisiblePages();\r\n-  }\r\n-};\r\n+    // Zoom\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      rerenderVisiblePages();\r\n+    };\r\n \r\n-// Rerender only visible pages on zoom\r\n-function rerenderVisiblePages() {\r\n-  const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n-  canvases.forEach(canvas => {\r\n-    if (canvas.dataset.rendered) {\r\n-      const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-      pdfDoc.getPage(pageNum).then(page => {\r\n-        const context = canvas.getContext(\"2d\");\r\n-        const viewport = page.getViewport({ scale });\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        page.render({ canvasContext: context, viewport });\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        rerenderVisiblePages();\r\n+      }\r\n+    };\r\n+\r\n+    // Rerender only visible pages on zoom\r\n+    function rerenderVisiblePages() {\r\n+      const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n+      canvases.forEach(canvas => {\r\n+        if (canvas.dataset.rendered) {\r\n+          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+          pdfDoc.getPage(pageNum).then(page => {\r\n+            const context = canvas.getContext(\"2d\");\r\n+            const viewport = page.getViewport({ scale });\r\n+            canvas.height = viewport.height;\r\n+            canvas.width = viewport.width;\r\n+            page.render({ canvasContext: context, viewport });\r\n+          });\r\n+        }\r\n       });\r\n     }\r\n-  });\r\n-}\r\n \r\n-// Close\r\n-document.getElementById(\"closeBtn\").onclick = () => {\r\n-  document.getElementById(\"container\").style.display = \"none\";\r\n-};\r\n+    // Close\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n+    };\r\n \r\n   </script>\r\n \r\n </body>\r\n"
                },
                {
                    "date": 1756979945063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,101 +123,101 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n-let limitPages = 50; // max pages to allow\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n+    let limitPages = 50; // max pages to allow\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const pdfViewer = document.getElementById(\"viewer\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n   pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // Use existing canvases if they exist, otherwise create them\r\n+  // ‚úÖ Remove any existing canvases\r\n+  pdfViewer.querySelectorAll('.pdf-page').forEach(c => c.remove());\r\n+\r\n+  // ‚úÖ Create canvases dynamically\r\n   for (let num = 1; num <= maxVisible; num++) {\r\n-    let canvas = pdfViewer.querySelector(`[data-page-number=\"${num}\"]`);\r\n-    if (!canvas) {\r\n-      canvas = document.createElement(\"canvas\");\r\n-      canvas.classList.add(\"pdf-page\");\r\n-      canvas.dataset.pageNumber = num;\r\n-      pdfViewer.appendChild(canvas);\r\n-    }\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    canvas.dataset.pageNumber = num;\r\n+    pdfViewer.appendChild(canvas);\r\n   }\r\n \r\n-  // Render page 1 immediately\r\n+  // ‚úÖ Force render page 1 immediately\r\n   const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n   renderPage(1, firstCanvas);\r\n \r\n   // Start at the top\r\n   pdfViewer.scrollTop = 0;\r\n \r\n-  // Lazy load the rest (2 ‚Üí maxVisible)\r\n+  // Lazy load the rest\r\n   setupLazyLoading(maxVisible);\r\n \r\n-  // Render thumbnails in sidebar\r\n+  // Render sidebar thumbnails\r\n   renderThumbnails(maxVisible);\r\n });\r\n \r\n-function renderPage(pageNum, canvas) {\r\n-  pdfDoc.getPage(pageNum).then(page => {\r\n-    const context = canvas.getContext(\"2d\");\r\n-    const viewport = page.getViewport({ scale });\r\n-    canvas.height = viewport.height;\r\n-    canvas.width = viewport.width;\r\n-    page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n-      canvas.dataset.rendered = \"true\";\r\n-      console.log(`‚úÖ Rendered page ${pageNum}`);\r\n-    });\r\n-  });\r\n-}\r\n+    function renderPage(pageNum, canvas) {\r\n+      pdfDoc.getPage(pageNum).then(page => {\r\n+        const context = canvas.getContext(\"2d\");\r\n+        const viewport = page.getViewport({ scale });\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n+          canvas.dataset.rendered = \"true\";\r\n+          console.log(`‚úÖ Rendered page ${pageNum}`);\r\n+        });\r\n+      });\r\n+    }\r\n \r\n-// Lazy rendering with IntersectionObserver\r\n-function setupLazyLoading(maxVisible) {\r\n-  const observer = new IntersectionObserver(entries => {\r\n-    entries.forEach(entry => {\r\n-      if (entry.isIntersecting) {\r\n-        const canvas = entry.target;\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+    // Lazy rendering with IntersectionObserver\r\n+    function setupLazyLoading(maxVisible) {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-        if (pageNum === 1) return; // skip page 1 (already rendered)\r\n+            if (pageNum === 1) return; // skip page 1 (already rendered)\r\n \r\n-        if (!canvas.dataset.rendered) {\r\n-          renderPage(pageNum, canvas);\r\n-        }\r\n-      }\r\n-    });\r\n-  }, { root: pdfViewer, threshold: 0.1 });\r\n+            if (!canvas.dataset.rendered) {\r\n+              renderPage(pageNum, canvas);\r\n+            }\r\n+          }\r\n+        });\r\n+      }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-}\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+    }\r\n \r\n-// Render thumbnails in sidebar\r\n-function renderThumbnails(maxVisible) {\r\n-  sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= maxVisible; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      sidebar.appendChild(canvas);\r\n+    // Render thumbnails in sidebar\r\n+    function renderThumbnails(maxVisible) {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = 1; i <= maxVisible; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n \r\n-      canvas.onclick = () => {\r\n-        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-      };\r\n-    });\r\n-  }\r\n-}\r\n+          canvas.onclick = () => {\r\n+            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+          };\r\n+        });\r\n+      }\r\n+    }\r\n \r\n \r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n"
                },
                {
                    "date": 1756980064195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,24 +123,27 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+// ‚úÖ PDF.js worker\r\n+pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n \r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n-    let limitPages = 50; // max pages to allow\r\n+const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n+let limitPages = 50; // max pages to allow\r\n \r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n+\r\n pdfjsLib.getDocument(url).promise.then(pdf => {\r\n   pdfDoc = pdf;\r\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n   pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // ‚úÖ Remove any existing canvases\r\n+  // ‚úÖ Remove any pre-existing canvases\r\n   pdfViewer.querySelectorAll('.pdf-page').forEach(c => c.remove());\r\n \r\n   // ‚úÖ Create canvases dynamically\r\n   for (let num = 1; num <= maxVisible; num++) {\r\n@@ -149,112 +152,113 @@\n     canvas.dataset.pageNumber = num;\r\n     pdfViewer.appendChild(canvas);\r\n   }\r\n \r\n-  // ‚úÖ Force render page 1 immediately\r\n-  const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n-  renderPage(1, firstCanvas);\r\n+  // ‚úÖ Render first 3 pages sequentially for smooth initial load\r\n+  const firstPages = Math.min(3, maxVisible);\r\n+  for (let i = 1; i <= firstPages; i++) {\r\n+    const canvas = pdfViewer.querySelector(`[data-page-number=\"${i}\"]`);\r\n+    renderPage(i, canvas);\r\n+  }\r\n \r\n-  // Start at the top\r\n+  // ‚úÖ Scroll to top\r\n   pdfViewer.scrollTop = 0;\r\n \r\n-  // Lazy load the rest\r\n+  // ‚úÖ Lazy load remaining pages\r\n   setupLazyLoading(maxVisible);\r\n \r\n-  // Render sidebar thumbnails\r\n+  // ‚úÖ Render thumbnails\r\n   renderThumbnails(maxVisible);\r\n });\r\n \r\n-    function renderPage(pageNum, canvas) {\r\n-      pdfDoc.getPage(pageNum).then(page => {\r\n-        const context = canvas.getContext(\"2d\");\r\n-        const viewport = page.getViewport({ scale });\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n-          canvas.dataset.rendered = \"true\";\r\n-          console.log(`‚úÖ Rendered page ${pageNum}`);\r\n-        });\r\n-      });\r\n-    }\r\n+// Render a page into a canvas\r\n+function renderPage(pageNum, canvas) {\r\n+  pdfDoc.getPage(pageNum).then(page => {\r\n+    const context = canvas.getContext(\"2d\");\r\n+    const viewport = page.getViewport({ scale });\r\n+    canvas.height = viewport.height;\r\n+    canvas.width = viewport.width;\r\n+    page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n+      canvas.dataset.rendered = \"true\";\r\n+      console.log(`‚úÖ Rendered page ${pageNum}`);\r\n+    });\r\n+  });\r\n+}\r\n \r\n-    // Lazy rendering with IntersectionObserver\r\n-    function setupLazyLoading(maxVisible) {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+// Lazy load pages using IntersectionObserver\r\n+function setupLazyLoading(maxVisible) {\r\n+  const observer = new IntersectionObserver(entries => {\r\n+    entries.forEach(entry => {\r\n+      if (entry.isIntersecting) {\r\n+        const canvas = entry.target;\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-            if (pageNum === 1) return; // skip page 1 (already rendered)\r\n+        if (canvas.dataset.rendered) return; // skip already rendered\r\n+        if (pageNum <= 3) return; // skip first 3 pages already rendered\r\n \r\n-            if (!canvas.dataset.rendered) {\r\n-              renderPage(pageNum, canvas);\r\n-            }\r\n-          }\r\n-        });\r\n-      }, { root: pdfViewer, threshold: 0.1 });\r\n+        renderPage(pageNum, canvas);\r\n+      }\r\n+    });\r\n+  }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-    }\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+}\r\n \r\n-    // Render thumbnails in sidebar\r\n-    function renderThumbnails(maxVisible) {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = 1; i <= maxVisible; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n+// Render sidebar thumbnails\r\n+function renderThumbnails(maxVisible) {\r\n+  sidebar.innerHTML = \"\";\r\n+  for (let i = 1; i <= maxVisible; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n \r\n-          canvas.onclick = () => {\r\n-            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-          };\r\n-        });\r\n-      }\r\n-    }\r\n+      canvas.onclick = () => {\r\n+        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+      };\r\n+    });\r\n+  }\r\n+}\r\n \r\n+// Zoom controls\r\n+document.getElementById(\"zoomIn\").onclick = () => {\r\n+  scale += 0.2;\r\n+  rerenderVisiblePages();\r\n+};\r\n+document.getElementById(\"zoomOut\").onclick = () => {\r\n+  if (scale > 0.4) {\r\n+    scale -= 0.2;\r\n+    rerenderVisiblePages();\r\n+  }\r\n+};\r\n \r\n-    // Zoom\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n-      rerenderVisiblePages();\r\n-    };\r\n-\r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        rerenderVisiblePages();\r\n-      }\r\n-    };\r\n-\r\n-    // Rerender only visible pages on zoom\r\n-    function rerenderVisiblePages() {\r\n-      const canvases = pdfViewer.querySelectorAll(\".pdf-page\");\r\n-      canvases.forEach(canvas => {\r\n-        if (canvas.dataset.rendered) {\r\n-          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-          pdfDoc.getPage(pageNum).then(page => {\r\n-            const context = canvas.getContext(\"2d\");\r\n-            const viewport = page.getViewport({ scale });\r\n-            canvas.height = viewport.height;\r\n-            canvas.width = viewport.width;\r\n-            page.render({ canvasContext: context, viewport });\r\n-          });\r\n-        }\r\n+// Rerender visible pages on zoom\r\n+function rerenderVisiblePages() {\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+    if (canvas.dataset.rendered) {\r\n+      const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+      pdfDoc.getPage(pageNum).then(page => {\r\n+        const context = canvas.getContext(\"2d\");\r\n+        const viewport = page.getViewport({ scale });\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        page.render({ canvasContext: context, viewport });\r\n       });\r\n     }\r\n+  });\r\n+}\r\n \r\n-    // Close\r\n-    document.getElementById(\"closeBtn\").onclick = () => {\r\n-      document.getElementById(\"container\").style.display = \"none\";\r\n-    };\r\n+// Close button\r\n+document.getElementById(\"closeBtn\").onclick = () => {\r\n+  document.getElementById(\"container\").style.display = \"none\";\r\n+};\r\n \r\n+\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756980138152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,140 +123,150 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-// ‚úÖ PDF.js worker\r\n-pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n+    // ‚úÖ PDF.js worker\r\n+    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n \r\n-const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n \r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n-let limitPages = 50; // max pages to allow\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n+    let limitPages = 50; // max pages to allow\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const pdfViewer = document.getElementById(\"viewer\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-  pdfDoc = pdf;\r\n-  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n-  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n+      pdfDoc = pdf;\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // ‚úÖ Remove any pre-existing canvases\r\n-  pdfViewer.querySelectorAll('.pdf-page').forEach(c => c.remove());\r\n+      // ‚úÖ Remove any pre-existing canvases\r\n+      pdfViewer.querySelectorAll('.pdf-page').forEach(c => c.remove());\r\n \r\n-  // ‚úÖ Create canvases dynamically\r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    canvas.dataset.pageNumber = num;\r\n-    pdfViewer.appendChild(canvas);\r\n-  }\r\n+      // ‚úÖ Create canvases dynamically\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        canvas.dataset.pageNumber = num;\r\n+        pdfViewer.appendChild(canvas);\r\n+      }\r\n \r\n-  // ‚úÖ Render first 3 pages sequentially for smooth initial load\r\n-  const firstPages = Math.min(3, maxVisible);\r\n-  for (let i = 1; i <= firstPages; i++) {\r\n-    const canvas = pdfViewer.querySelector(`[data-page-number=\"${i}\"]`);\r\n-    renderPage(i, canvas);\r\n-  }\r\n+      // ‚úÖ Render first 3 pages sequentially for smooth initial load\r\n+      const firstPages = Math.min(3, maxVisible);\r\n+      for (let i = 1; i <= firstPages; i++) {\r\n+        const canvas = pdfViewer.querySelector(`[data-page-number=\"${i}\"]`);\r\n+        renderPage(i, canvas);\r\n+      }\r\n \r\n-  // ‚úÖ Scroll to top\r\n-  pdfViewer.scrollTop = 0;\r\n+      // ‚úÖ Scroll to top\r\n+      pdfViewer.scrollTop = 0;\r\n \r\n-  // ‚úÖ Lazy load remaining pages\r\n-  setupLazyLoading(maxVisible);\r\n+      // ‚úÖ Lazy load remaining pages\r\n+      setupLazyLoading(maxVisible);\r\n \r\n-  // ‚úÖ Render thumbnails\r\n-  renderThumbnails(maxVisible);\r\n-});\r\n+      // ‚úÖ Render thumbnails\r\n+      renderThumbnails(maxVisible);\r\n+    });\r\n \r\n-// Render a page into a canvas\r\n-function renderPage(pageNum, canvas) {\r\n-  pdfDoc.getPage(pageNum).then(page => {\r\n-    const context = canvas.getContext(\"2d\");\r\n-    const viewport = page.getViewport({ scale });\r\n-    canvas.height = viewport.height;\r\n-    canvas.width = viewport.width;\r\n-    page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n-      canvas.dataset.rendered = \"true\";\r\n-      console.log(`‚úÖ Rendered page ${pageNum}`);\r\n+    // Render a page into a canvas\r\n+// Sequential render all pages (not lazy)\r\n+for (let i = 1; i <= maxVisible; i++) {\r\n+  const canvas = pdfViewer.querySelector(`[data-page-number=\"${i}\"]`);\r\n+  await renderPageAsync(i, canvas); // wait each page before next\r\n+}\r\n+\r\n+// Async helper that returns a promise\r\n+function renderPageAsync(pageNum, canvas) {\r\n+  return pdfDoc.getPage(pageNum).then(page => {\r\n+    return new Promise(resolve => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n+        canvas.dataset.rendered = \"true\";\r\n+        console.log(`‚úÖ Rendered page ${pageNum}`);\r\n+        resolve();\r\n+      });\r\n     });\r\n   });\r\n }\r\n \r\n-// Lazy load pages using IntersectionObserver\r\n-function setupLazyLoading(maxVisible) {\r\n-  const observer = new IntersectionObserver(entries => {\r\n-    entries.forEach(entry => {\r\n-      if (entry.isIntersecting) {\r\n-        const canvas = entry.target;\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+    // Lazy load pages using IntersectionObserver\r\n+    function setupLazyLoading(maxVisible) {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-        if (canvas.dataset.rendered) return; // skip already rendered\r\n-        if (pageNum <= 3) return; // skip first 3 pages already rendered\r\n+            if (canvas.dataset.rendered) return; // skip already rendered\r\n+            if (pageNum <= 3) return; // skip first 3 pages already rendered\r\n \r\n-        renderPage(pageNum, canvas);\r\n-      }\r\n-    });\r\n-  }, { root: pdfViewer, threshold: 0.1 });\r\n+            renderPage(pageNum, canvas);\r\n+          }\r\n+        });\r\n+      }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-}\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+    }\r\n \r\n-// Render sidebar thumbnails\r\n-function renderThumbnails(maxVisible) {\r\n-  sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= maxVisible; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      sidebar.appendChild(canvas);\r\n+    // Render sidebar thumbnails\r\n+    function renderThumbnails(maxVisible) {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = 1; i <= maxVisible; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n \r\n-      canvas.onclick = () => {\r\n-        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-      };\r\n-    });\r\n-  }\r\n-}\r\n+          canvas.onclick = () => {\r\n+            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+          };\r\n+        });\r\n+      }\r\n+    }\r\n \r\n-// Zoom controls\r\n-document.getElementById(\"zoomIn\").onclick = () => {\r\n-  scale += 0.2;\r\n-  rerenderVisiblePages();\r\n-};\r\n-document.getElementById(\"zoomOut\").onclick = () => {\r\n-  if (scale > 0.4) {\r\n-    scale -= 0.2;\r\n-    rerenderVisiblePages();\r\n-  }\r\n-};\r\n+    // Zoom controls\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      rerenderVisiblePages();\r\n+    };\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        rerenderVisiblePages();\r\n+      }\r\n+    };\r\n \r\n-// Rerender visible pages on zoom\r\n-function rerenderVisiblePages() {\r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-    if (canvas.dataset.rendered) {\r\n-      const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-      pdfDoc.getPage(pageNum).then(page => {\r\n-        const context = canvas.getContext(\"2d\");\r\n-        const viewport = page.getViewport({ scale });\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        page.render({ canvasContext: context, viewport });\r\n+    // Rerender visible pages on zoom\r\n+    function rerenderVisiblePages() {\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+        if (canvas.dataset.rendered) {\r\n+          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+          pdfDoc.getPage(pageNum).then(page => {\r\n+            const context = canvas.getContext(\"2d\");\r\n+            const viewport = page.getViewport({ scale });\r\n+            canvas.height = viewport.height;\r\n+            canvas.width = viewport.width;\r\n+            page.render({ canvasContext: context, viewport });\r\n+          });\r\n+        }\r\n       });\r\n     }\r\n-  });\r\n-}\r\n \r\n-// Close button\r\n-document.getElementById(\"closeBtn\").onclick = () => {\r\n-  document.getElementById(\"container\").style.display = \"none\";\r\n-};\r\n+    // Close button\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n+    };\r\n \r\n \r\n   </script>\r\n \r\n"
                },
                {
                    "date": 1756980226053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,62 +123,50 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    // ‚úÖ PDF.js worker\r\n-    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n+  // PDF.js worker fix\r\n+pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n \r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n+const limitPages = 50;\r\n \r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n-    let limitPages = 50; // max pages to allow\r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+(async function initPDF() {\r\n+  pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n+  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-    pdfjsLib.getDocument(url).promise.then(pdf => {\r\n-      pdfDoc = pdf;\r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+  // Clear existing canvases\r\n+  pdfViewer.querySelectorAll('.pdf-page').forEach(c => c.remove());\r\n \r\n-      // ‚úÖ Remove any pre-existing canvases\r\n-      pdfViewer.querySelectorAll('.pdf-page').forEach(c => c.remove());\r\n+  // Create canvases dynamically\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    canvas.dataset.pageNumber = num;\r\n+    pdfViewer.appendChild(canvas);\r\n+  }\r\n \r\n-      // ‚úÖ Create canvases dynamically\r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        canvas.dataset.pageNumber = num;\r\n-        pdfViewer.appendChild(canvas);\r\n-      }\r\n+  // Sequentially render all pages\r\n+  for (let i = 1; i <= maxVisible; i++) {\r\n+    const canvas = pdfViewer.querySelector(`[data-page-number=\"${i}\"]`);\r\n+    await renderPageAsync(i, canvas);\r\n+  }\r\n \r\n-      // ‚úÖ Render first 3 pages sequentially for smooth initial load\r\n-      const firstPages = Math.min(3, maxVisible);\r\n-      for (let i = 1; i <= firstPages; i++) {\r\n-        const canvas = pdfViewer.querySelector(`[data-page-number=\"${i}\"]`);\r\n-        renderPage(i, canvas);\r\n-      }\r\n+  // Render thumbnails\r\n+  renderThumbnails(maxVisible);\r\n \r\n-      // ‚úÖ Scroll to top\r\n-      pdfViewer.scrollTop = 0;\r\n+  // Scroll to top\r\n+  pdfViewer.scrollTop = 0;\r\n+})();\r\n \r\n-      // ‚úÖ Lazy load remaining pages\r\n-      setupLazyLoading(maxVisible);\r\n-\r\n-      // ‚úÖ Render thumbnails\r\n-      renderThumbnails(maxVisible);\r\n-    });\r\n-\r\n-    // Render a page into a canvas\r\n-// Sequential render all pages (not lazy)\r\n-for (let i = 1; i <= maxVisible; i++) {\r\n-  const canvas = pdfViewer.querySelector(`[data-page-number=\"${i}\"]`);\r\n-  await renderPageAsync(i, canvas); // wait each page before next\r\n-}\r\n-\r\n-// Async helper that returns a promise\r\n+// Render a page and return a Promise\r\n function renderPageAsync(pageNum, canvas) {\r\n   return pdfDoc.getPage(pageNum).then(page => {\r\n     return new Promise(resolve => {\r\n       const context = canvas.getContext(\"2d\");\r\n@@ -193,82 +181,63 @@\n     });\r\n   });\r\n }\r\n \r\n-    // Lazy load pages using IntersectionObserver\r\n-    function setupLazyLoading(maxVisible) {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+// Render sidebar thumbnails\r\n+function renderThumbnails(maxVisible) {\r\n+  sidebar.innerHTML = \"\";\r\n+  for (let i = 1; i <= maxVisible; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n \r\n-            if (canvas.dataset.rendered) return; // skip already rendered\r\n-            if (pageNum <= 3) return; // skip first 3 pages already rendered\r\n+      canvas.onclick = () => {\r\n+        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+      };\r\n+    });\r\n+  }\r\n+}\r\n \r\n-            renderPage(pageNum, canvas);\r\n-          }\r\n-        });\r\n-      }, { root: pdfViewer, threshold: 0.1 });\r\n+// Zoom in/out\r\n+document.getElementById(\"zoomIn\").onclick = () => {\r\n+  scale += 0.2;\r\n+  rerenderAllPages();\r\n+};\r\n \r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-    }\r\n+document.getElementById(\"zoomOut\").onclick = () => {\r\n+  if (scale > 0.4) {\r\n+    scale -= 0.2;\r\n+    rerenderAllPages();\r\n+  }\r\n+};\r\n \r\n-    // Render sidebar thumbnails\r\n-    function renderThumbnails(maxVisible) {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = 1; i <= maxVisible; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n-\r\n-          canvas.onclick = () => {\r\n-            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-          };\r\n-        });\r\n-      }\r\n-    }\r\n-\r\n-    // Zoom controls\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n-      rerenderVisiblePages();\r\n-    };\r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        rerenderVisiblePages();\r\n-      }\r\n-    };\r\n-\r\n-    // Rerender visible pages on zoom\r\n-    function rerenderVisiblePages() {\r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-        if (canvas.dataset.rendered) {\r\n-          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-          pdfDoc.getPage(pageNum).then(page => {\r\n-            const context = canvas.getContext(\"2d\");\r\n-            const viewport = page.getViewport({ scale });\r\n-            canvas.height = viewport.height;\r\n-            canvas.width = viewport.width;\r\n-            page.render({ canvasContext: context, viewport });\r\n-          });\r\n-        }\r\n+// Rerender all pages on zoom\r\n+function rerenderAllPages() {\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+    if (canvas.dataset.rendered) {\r\n+      const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+      pdfDoc.getPage(pageNum).then(page => {\r\n+        const context = canvas.getContext(\"2d\");\r\n+        const viewport = page.getViewport({ scale });\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        page.render({ canvasContext: context, viewport });\r\n       });\r\n     }\r\n+  });\r\n+}\r\n \r\n-    // Close button\r\n-    document.getElementById(\"closeBtn\").onclick = () => {\r\n-      document.getElementById(\"container\").style.display = \"none\";\r\n-    };\r\n+// Close button\r\n+document.getElementById(\"closeBtn\").onclick = () => {\r\n+  document.getElementById(\"container\").style.display = \"none\";\r\n+};\r\n \r\n-\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756980305647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-  // PDF.js worker fix\r\n+// PDF.js worker fix\r\n pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n \r\n const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n let pdfDoc = null;\r\n@@ -151,18 +151,22 @@\n     canvas.dataset.pageNumber = num;\r\n     pdfViewer.appendChild(canvas);\r\n   }\r\n \r\n-  // Sequentially render all pages\r\n-  for (let i = 1; i <= maxVisible; i++) {\r\n+  // ‚úÖ Render page 1 first\r\n+  const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n+  await renderPageAsync(1, firstCanvas);\r\n+\r\n+  // Render remaining pages sequentially (optional: can be lazy-loaded instead)\r\n+  for (let i = 2; i <= maxVisible; i++) {\r\n     const canvas = pdfViewer.querySelector(`[data-page-number=\"${i}\"]`);\r\n     await renderPageAsync(i, canvas);\r\n   }\r\n \r\n-  // Render thumbnails\r\n+  // Render sidebar thumbnails\r\n   renderThumbnails(maxVisible);\r\n \r\n-  // Scroll to top\r\n+  // Scroll to top to show page 1\r\n   pdfViewer.scrollTop = 0;\r\n })();\r\n \r\n // Render a page and return a Promise\r\n@@ -207,9 +211,8 @@\n document.getElementById(\"zoomIn\").onclick = () => {\r\n   scale += 0.2;\r\n   rerenderAllPages();\r\n };\r\n-\r\n document.getElementById(\"zoomOut\").onclick = () => {\r\n   if (scale > 0.4) {\r\n     scale -= 0.2;\r\n     rerenderAllPages();\r\n@@ -236,8 +239,9 @@\n document.getElementById(\"closeBtn\").onclick = () => {\r\n   document.getElementById(\"container\").style.display = \"none\";\r\n };\r\n \r\n+\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756980476793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,8 +123,9 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n+    // PDF.js worker fix\r\n // PDF.js worker fix\r\n pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n \r\n const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n@@ -144,27 +145,31 @@\n   // Clear existing canvases\r\n   pdfViewer.querySelectorAll('.pdf-page').forEach(c => c.remove());\r\n \r\n   // Create canvases dynamically\r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n+  for (let num = 1; num <= pdfDoc.numPages; num++) {\r\n     const canvas = document.createElement(\"canvas\");\r\n     canvas.classList.add(\"pdf-page\");\r\n     canvas.dataset.pageNumber = num;\r\n+\r\n+    // Pages 1-50 not rendered yet, others true\r\n+    canvas.dataset.rendered = (num > 50) ? \"true\" : \"false\";\r\n+\r\n     pdfViewer.appendChild(canvas);\r\n   }\r\n \r\n-  // ‚úÖ Render page 1 first\r\n+  // ‚úÖ Render page 1 immediately\r\n   const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n   await renderPageAsync(1, firstCanvas);\r\n \r\n-  // Render remaining pages sequentially (optional: can be lazy-loaded instead)\r\n-  for (let i = 2; i <= maxVisible; i++) {\r\n+  // Render remaining pages 2-50 sequentially\r\n+  for (let i = 2; i <= Math.min(50, pdfDoc.numPages); i++) {\r\n     const canvas = pdfViewer.querySelector(`[data-page-number=\"${i}\"]`);\r\n     await renderPageAsync(i, canvas);\r\n   }\r\n \r\n   // Render sidebar thumbnails\r\n-  renderThumbnails(maxVisible);\r\n+  renderThumbnails(pdfDoc.numPages);\r\n \r\n   // Scroll to top to show page 1\r\n   pdfViewer.scrollTop = 0;\r\n })();\r\n@@ -186,11 +191,11 @@\n   });\r\n }\r\n \r\n // Render sidebar thumbnails\r\n-function renderThumbnails(maxVisible) {\r\n+function renderThumbnails(totalPages) {\r\n   sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= maxVisible; i++) {\r\n+  for (let i = 1; i <= totalPages; i++) {\r\n     pdfDoc.getPage(i).then(page => {\r\n       const viewport = page.getViewport({ scale: 0.2 });\r\n       const canvas = document.createElement(\"canvas\");\r\n       const ctx = canvas.getContext(\"2d\");\r\n@@ -221,9 +226,9 @@\n \r\n // Rerender all pages on zoom\r\n function rerenderAllPages() {\r\n   pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-    if (canvas.dataset.rendered) {\r\n+    if (canvas.dataset.rendered === \"true\") {\r\n       const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n       pdfDoc.getPage(pageNum).then(page => {\r\n         const context = canvas.getContext(\"2d\");\r\n         const viewport = page.getViewport({ scale });\r\n"
                },
                {
                    "date": 1756980622492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,10 +123,9 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    // PDF.js worker fix\r\n-// PDF.js worker fix\r\n+// PDF.js worker\r\n pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n \r\n const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n let pdfDoc = null;\r\n@@ -141,37 +140,33 @@\n   pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n   pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // Clear existing canvases\r\n+  // Clear any pre-existing canvases\r\n   pdfViewer.querySelectorAll('.pdf-page').forEach(c => c.remove());\r\n \r\n   // Create canvases dynamically\r\n-  for (let num = 1; num <= pdfDoc.numPages; num++) {\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n     const canvas = document.createElement(\"canvas\");\r\n     canvas.classList.add(\"pdf-page\");\r\n     canvas.dataset.pageNumber = num;\r\n-\r\n-    // Pages 1-50 not rendered yet, others true\r\n-    canvas.dataset.rendered = (num > 50) ? \"true\" : \"false\";\r\n-\r\n     pdfViewer.appendChild(canvas);\r\n   }\r\n \r\n-  // ‚úÖ Render page 1 immediately\r\n+  // ‚úÖ Ensure page 1 is rendered first\r\n   const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n   await renderPageAsync(1, firstCanvas);\r\n \r\n-  // Render remaining pages 2-50 sequentially\r\n-  for (let i = 2; i <= Math.min(50, pdfDoc.numPages); i++) {\r\n+  // Render remaining pages sequentially (2 ‚Üí maxVisible)\r\n+  for (let i = 2; i <= maxVisible; i++) {\r\n     const canvas = pdfViewer.querySelector(`[data-page-number=\"${i}\"]`);\r\n     await renderPageAsync(i, canvas);\r\n   }\r\n \r\n   // Render sidebar thumbnails\r\n-  renderThumbnails(pdfDoc.numPages);\r\n+  renderThumbnails(maxVisible);\r\n \r\n-  // Scroll to top to show page 1\r\n+  // Scroll to top so page 1 is visible\r\n   pdfViewer.scrollTop = 0;\r\n })();\r\n \r\n // Render a page and return a Promise\r\n@@ -191,11 +186,11 @@\n   });\r\n }\r\n \r\n // Render sidebar thumbnails\r\n-function renderThumbnails(totalPages) {\r\n+function renderThumbnails(maxVisible) {\r\n   sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= totalPages; i++) {\r\n+  for (let i = 1; i <= maxVisible; i++) {\r\n     pdfDoc.getPage(i).then(page => {\r\n       const viewport = page.getViewport({ scale: 0.2 });\r\n       const canvas = document.createElement(\"canvas\");\r\n       const ctx = canvas.getContext(\"2d\");\r\n@@ -226,9 +221,9 @@\n \r\n // Rerender all pages on zoom\r\n function rerenderAllPages() {\r\n   pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-    if (canvas.dataset.rendered === \"true\") {\r\n+    if (canvas.dataset.rendered) {\r\n       const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n       pdfDoc.getPage(pageNum).then(page => {\r\n         const context = canvas.getContext(\"2d\");\r\n         const viewport = page.getViewport({ scale });\r\n@@ -244,9 +239,8 @@\n document.getElementById(\"closeBtn\").onclick = () => {\r\n   document.getElementById(\"container\").style.display = \"none\";\r\n };\r\n \r\n-\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756980747601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,37 +140,34 @@\n   pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n   pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // Clear any pre-existing canvases\r\n-  pdfViewer.querySelectorAll('.pdf-page').forEach(c => c.remove());\r\n+  // ‚úÖ Remove all existing canvases\r\n+  pdfViewer.innerHTML = '';\r\n \r\n-  // Create canvases dynamically\r\n+  // ‚úÖ Create canvas for each page dynamically in correct order\r\n   for (let num = 1; num <= maxVisible; num++) {\r\n     const canvas = document.createElement(\"canvas\");\r\n     canvas.classList.add(\"pdf-page\");\r\n     canvas.dataset.pageNumber = num;\r\n     pdfViewer.appendChild(canvas);\r\n   }\r\n \r\n-  // ‚úÖ Ensure page 1 is rendered first\r\n+  // ‚úÖ Render page 1 immediately\r\n   const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n   await renderPageAsync(1, firstCanvas);\r\n \r\n-  // Render remaining pages sequentially (2 ‚Üí maxVisible)\r\n+  // Render the rest sequentially\r\n   for (let i = 2; i <= maxVisible; i++) {\r\n     const canvas = pdfViewer.querySelector(`[data-page-number=\"${i}\"]`);\r\n     await renderPageAsync(i, canvas);\r\n   }\r\n \r\n-  // Render sidebar thumbnails\r\n   renderThumbnails(maxVisible);\r\n \r\n-  // Scroll to top so page 1 is visible\r\n-  pdfViewer.scrollTop = 0;\r\n+  pdfViewer.scrollTop = 0; // Scroll to top so page 1 is visible\r\n })();\r\n \r\n-// Render a page and return a Promise\r\n function renderPageAsync(pageNum, canvas) {\r\n   return pdfDoc.getPage(pageNum).then(page => {\r\n     return new Promise(resolve => {\r\n       const context = canvas.getContext(\"2d\");\r\n@@ -185,11 +182,10 @@\n     });\r\n   });\r\n }\r\n \r\n-// Render sidebar thumbnails\r\n function renderThumbnails(maxVisible) {\r\n-  sidebar.innerHTML = \"\";\r\n+  sidebar.innerHTML = '';\r\n   for (let i = 1; i <= maxVisible; i++) {\r\n     pdfDoc.getPage(i).then(page => {\r\n       const viewport = page.getViewport({ scale: 0.2 });\r\n       const canvas = document.createElement(\"canvas\");\r\n@@ -206,9 +202,9 @@\n     });\r\n   }\r\n }\r\n \r\n-// Zoom in/out\r\n+// Zoom\r\n document.getElementById(\"zoomIn\").onclick = () => {\r\n   scale += 0.2;\r\n   rerenderAllPages();\r\n };\r\n@@ -218,9 +214,8 @@\n     rerenderAllPages();\r\n   }\r\n };\r\n \r\n-// Rerender all pages on zoom\r\n function rerenderAllPages() {\r\n   pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n     if (canvas.dataset.rendered) {\r\n       const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n@@ -234,9 +229,9 @@\n     }\r\n   });\r\n }\r\n \r\n-// Close button\r\n+// Close\r\n document.getElementById(\"closeBtn\").onclick = () => {\r\n   document.getElementById(\"container\").style.display = \"none\";\r\n };\r\n \r\n"
                },
                {
                    "date": 1756980836938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,21 +140,25 @@\n   pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n   pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // ‚úÖ Remove all existing canvases\r\n+  // Remove all existing canvases\r\n   pdfViewer.innerHTML = '';\r\n \r\n-  // ‚úÖ Create canvas for each page dynamically in correct order\r\n+  // Create canvases in order\r\n   for (let num = 1; num <= maxVisible; num++) {\r\n     const canvas = document.createElement(\"canvas\");\r\n     canvas.classList.add(\"pdf-page\");\r\n     canvas.dataset.pageNumber = num;\r\n+\r\n+    // ‚úÖ Add a special class for page 1\r\n+    if (num === 1) canvas.classList.add(\"first-page\");\r\n+\r\n     pdfViewer.appendChild(canvas);\r\n   }\r\n \r\n-  // ‚úÖ Render page 1 immediately\r\n-  const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n+  // Render page 1 immediately\r\n+  const firstCanvas = pdfViewer.querySelector('.first-page');\r\n   await renderPageAsync(1, firstCanvas);\r\n \r\n   // Render the rest sequentially\r\n   for (let i = 2; i <= maxVisible; i++) {\r\n@@ -163,9 +167,10 @@\n   }\r\n \r\n   renderThumbnails(maxVisible);\r\n \r\n-  pdfViewer.scrollTop = 0; // Scroll to top so page 1 is visible\r\n+  // Scroll to top to show first page\r\n+  pdfViewer.scrollTop = 0;\r\n })();\r\n \r\n function renderPageAsync(pageNum, canvas) {\r\n   return pdfDoc.getPage(pageNum).then(page => {\r\n@@ -202,9 +207,9 @@\n     });\r\n   }\r\n }\r\n \r\n-// Zoom\r\n+// Zoom buttons\r\n document.getElementById(\"zoomIn\").onclick = () => {\r\n   scale += 0.2;\r\n   rerenderAllPages();\r\n };\r\n@@ -229,9 +234,9 @@\n     }\r\n   });\r\n }\r\n \r\n-// Close\r\n+// Close button\r\n document.getElementById(\"closeBtn\").onclick = () => {\r\n   document.getElementById(\"container\").style.display = \"none\";\r\n };\r\n \r\n"
                },
                {
                    "date": 1756980929947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-// PDF.js worker\r\n+ // PDF.js worker\r\n pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n \r\n const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n let pdfDoc = null;\r\n@@ -140,18 +140,18 @@\n   pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n   const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n   pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // Remove all existing canvases\r\n+  // Remove any existing canvases\r\n   pdfViewer.innerHTML = '';\r\n \r\n-  // Create canvases in order\r\n+  // Create canvas elements for all pages\r\n   for (let num = 1; num <= maxVisible; num++) {\r\n     const canvas = document.createElement(\"canvas\");\r\n     canvas.classList.add(\"pdf-page\");\r\n     canvas.dataset.pageNumber = num;\r\n \r\n-    // ‚úÖ Add a special class for page 1\r\n+    // Add special class for page 1\r\n     if (num === 1) canvas.classList.add(\"first-page\");\r\n \r\n     pdfViewer.appendChild(canvas);\r\n   }\r\n@@ -159,17 +159,15 @@\n   // Render page 1 immediately\r\n   const firstCanvas = pdfViewer.querySelector('.first-page');\r\n   await renderPageAsync(1, firstCanvas);\r\n \r\n-  // Render the rest sequentially\r\n-  for (let i = 2; i <= maxVisible; i++) {\r\n-    const canvas = pdfViewer.querySelector(`[data-page-number=\"${i}\"]`);\r\n-    await renderPageAsync(i, canvas);\r\n-  }\r\n+  // Setup lazy loading for pages 2+\r\n+  setupLazyLoading(maxVisible);\r\n \r\n+  // Render sidebar thumbnails\r\n   renderThumbnails(maxVisible);\r\n \r\n-  // Scroll to top to show first page\r\n+  // Scroll to top\r\n   pdfViewer.scrollTop = 0;\r\n })();\r\n \r\n function renderPageAsync(pageNum, canvas) {\r\n@@ -187,8 +185,31 @@\n     });\r\n   });\r\n }\r\n \r\n+// Lazy loading using IntersectionObserver\r\n+function setupLazyLoading(maxVisible) {\r\n+  const observer = new IntersectionObserver(entries => {\r\n+    entries.forEach(entry => {\r\n+      if (entry.isIntersecting) {\r\n+        const canvas = entry.target;\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+\r\n+        if (!canvas.dataset.rendered) {\r\n+          renderPageAsync(pageNum, canvas);\r\n+        }\r\n+      }\r\n+    });\r\n+  }, { root: pdfViewer, threshold: 0.1 });\r\n+\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+    if (parseInt(canvas.dataset.pageNumber, 10) !== 1) { // skip first page\r\n+      observer.observe(canvas);\r\n+    }\r\n+  });\r\n+}\r\n+\r\n+// Render thumbnails in sidebar\r\n function renderThumbnails(maxVisible) {\r\n   sidebar.innerHTML = '';\r\n   for (let i = 1; i <= maxVisible; i++) {\r\n     pdfDoc.getPage(i).then(page => {\r\n@@ -207,21 +228,21 @@\n     });\r\n   }\r\n }\r\n \r\n-// Zoom buttons\r\n+// Zoom\r\n document.getElementById(\"zoomIn\").onclick = () => {\r\n   scale += 0.2;\r\n-  rerenderAllPages();\r\n+  rerenderVisiblePages();\r\n };\r\n document.getElementById(\"zoomOut\").onclick = () => {\r\n   if (scale > 0.4) {\r\n     scale -= 0.2;\r\n-    rerenderAllPages();\r\n+    rerenderVisiblePages();\r\n   }\r\n };\r\n \r\n-function rerenderAllPages() {\r\n+function rerenderVisiblePages() {\r\n   pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n     if (canvas.dataset.rendered) {\r\n       const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n       pdfDoc.getPage(pageNum).then(page => {\r\n@@ -234,13 +255,14 @@\n     }\r\n   });\r\n }\r\n \r\n-// Close button\r\n+// Close\r\n document.getElementById(\"closeBtn\").onclick = () => {\r\n   document.getElementById(\"container\").style.display = \"none\";\r\n };\r\n \r\n+\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756980957628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,144 +123,144 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n- // PDF.js worker\r\n-pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n+    // PDF.js worker\r\n+    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n \r\n-const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n-const limitPages = 50;\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n+    const limitPages = 1;\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const pdfViewer = document.getElementById(\"viewer\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-(async function initPDF() {\r\n-  pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n-  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n-  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+    (async function initPDF() {\r\n+      pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // Remove any existing canvases\r\n-  pdfViewer.innerHTML = '';\r\n+      // Remove any existing canvases\r\n+      pdfViewer.innerHTML = '';\r\n \r\n-  // Create canvas elements for all pages\r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    canvas.dataset.pageNumber = num;\r\n+      // Create canvas elements for all pages\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        canvas.dataset.pageNumber = num;\r\n \r\n-    // Add special class for page 1\r\n-    if (num === 1) canvas.classList.add(\"first-page\");\r\n+        // Add special class for page 1\r\n+        if (num === 1) canvas.classList.add(\"first-page\");\r\n \r\n-    pdfViewer.appendChild(canvas);\r\n-  }\r\n+        pdfViewer.appendChild(canvas);\r\n+      }\r\n \r\n-  // Render page 1 immediately\r\n-  const firstCanvas = pdfViewer.querySelector('.first-page');\r\n-  await renderPageAsync(1, firstCanvas);\r\n+      // Render page 1 immediately\r\n+      const firstCanvas = pdfViewer.querySelector('.first-page');\r\n+      await renderPageAsync(1, firstCanvas);\r\n \r\n-  // Setup lazy loading for pages 2+\r\n-  setupLazyLoading(maxVisible);\r\n+      // Setup lazy loading for pages 2+\r\n+      setupLazyLoading(maxVisible);\r\n \r\n-  // Render sidebar thumbnails\r\n-  renderThumbnails(maxVisible);\r\n+      // Render sidebar thumbnails\r\n+      renderThumbnails(maxVisible);\r\n \r\n-  // Scroll to top\r\n-  pdfViewer.scrollTop = 0;\r\n-})();\r\n+      // Scroll to top\r\n+      pdfViewer.scrollTop = 0;\r\n+    })();\r\n \r\n-function renderPageAsync(pageNum, canvas) {\r\n-  return pdfDoc.getPage(pageNum).then(page => {\r\n-    return new Promise(resolve => {\r\n-      const context = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n-        canvas.dataset.rendered = \"true\";\r\n-        console.log(`‚úÖ Rendered page ${pageNum}`);\r\n-        resolve();\r\n+    function renderPageAsync(pageNum, canvas) {\r\n+      return pdfDoc.getPage(pageNum).then(page => {\r\n+        return new Promise(resolve => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n+            canvas.dataset.rendered = \"true\";\r\n+            console.log(`‚úÖ Rendered page ${pageNum}`);\r\n+            resolve();\r\n+          });\r\n+        });\r\n       });\r\n-    });\r\n-  });\r\n-}\r\n+    }\r\n \r\n-// Lazy loading using IntersectionObserver\r\n-function setupLazyLoading(maxVisible) {\r\n-  const observer = new IntersectionObserver(entries => {\r\n-    entries.forEach(entry => {\r\n-      if (entry.isIntersecting) {\r\n-        const canvas = entry.target;\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+    // Lazy loading using IntersectionObserver\r\n+    function setupLazyLoading(maxVisible) {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-        if (!canvas.dataset.rendered) {\r\n-          renderPageAsync(pageNum, canvas);\r\n+            if (!canvas.dataset.rendered) {\r\n+              renderPageAsync(pageNum, canvas);\r\n+            }\r\n+          }\r\n+        });\r\n+      }, { root: pdfViewer, threshold: 0.1 });\r\n+\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+        if (parseInt(canvas.dataset.pageNumber, 10) !== 1) { // skip first page\r\n+          observer.observe(canvas);\r\n         }\r\n-      }\r\n-    });\r\n-  }, { root: pdfViewer, threshold: 0.1 });\r\n-\r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-    if (parseInt(canvas.dataset.pageNumber, 10) !== 1) { // skip first page\r\n-      observer.observe(canvas);\r\n+      });\r\n     }\r\n-  });\r\n-}\r\n \r\n-// Render thumbnails in sidebar\r\n-function renderThumbnails(maxVisible) {\r\n-  sidebar.innerHTML = '';\r\n-  for (let i = 1; i <= maxVisible; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      sidebar.appendChild(canvas);\r\n+    // Render thumbnails in sidebar\r\n+    function renderThumbnails(maxVisible) {\r\n+      sidebar.innerHTML = '';\r\n+      for (let i = 1; i <= maxVisible; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n \r\n-      canvas.onclick = () => {\r\n-        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-      };\r\n-    });\r\n-  }\r\n-}\r\n+          canvas.onclick = () => {\r\n+            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+          };\r\n+        });\r\n+      }\r\n+    }\r\n \r\n-// Zoom\r\n-document.getElementById(\"zoomIn\").onclick = () => {\r\n-  scale += 0.2;\r\n-  rerenderVisiblePages();\r\n-};\r\n-document.getElementById(\"zoomOut\").onclick = () => {\r\n-  if (scale > 0.4) {\r\n-    scale -= 0.2;\r\n-    rerenderVisiblePages();\r\n-  }\r\n-};\r\n+    // Zoom\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      rerenderVisiblePages();\r\n+    };\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        rerenderVisiblePages();\r\n+      }\r\n+    };\r\n \r\n-function rerenderVisiblePages() {\r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-    if (canvas.dataset.rendered) {\r\n-      const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-      pdfDoc.getPage(pageNum).then(page => {\r\n-        const context = canvas.getContext(\"2d\");\r\n-        const viewport = page.getViewport({ scale });\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        page.render({ canvasContext: context, viewport });\r\n+    function rerenderVisiblePages() {\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+        if (canvas.dataset.rendered) {\r\n+          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+          pdfDoc.getPage(pageNum).then(page => {\r\n+            const context = canvas.getContext(\"2d\");\r\n+            const viewport = page.getViewport({ scale });\r\n+            canvas.height = viewport.height;\r\n+            canvas.width = viewport.width;\r\n+            page.render({ canvasContext: context, viewport });\r\n+          });\r\n+        }\r\n       });\r\n     }\r\n-  });\r\n-}\r\n \r\n-// Close\r\n-document.getElementById(\"closeBtn\").onclick = () => {\r\n-  document.getElementById(\"container\").style.display = \"none\";\r\n-};\r\n+    // Close\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n+    };\r\n \r\n \r\n   </script>\r\n \r\n"
                },
                {
                    "date": 1756980968993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n \r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    const limitPages = 1;\r\n+    const limitPages = 2;\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n"
                },
                {
                    "date": 1756981023776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,29 +186,34 @@\n       });\r\n     }\r\n \r\n     // Lazy loading using IntersectionObserver\r\n-    function setupLazyLoading(maxVisible) {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+// Lazy loading using IntersectionObserver\r\n+function setupLazyLoading(maxVisible) {\r\n+  const observer = new IntersectionObserver(entries => {\r\n+    entries.forEach(entry => {\r\n+      if (entry.isIntersecting) {\r\n+        const canvas = entry.target;\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-            if (!canvas.dataset.rendered) {\r\n-              renderPageAsync(pageNum, canvas);\r\n-            }\r\n-          }\r\n-        });\r\n-      }, { root: pdfViewer, threshold: 0.1 });\r\n-\r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-        if (parseInt(canvas.dataset.pageNumber, 10) !== 1) { // skip first page\r\n-          observer.observe(canvas);\r\n+        // Render page if not yet rendered\r\n+        if (!canvas.dataset.rendered) {\r\n+          renderPageAsync(pageNum, canvas);\r\n         }\r\n-      });\r\n-    }\r\n+      }\r\n+    });\r\n+  }, {\r\n+    root: pdfViewer,\r\n+    rootMargin: '0px',\r\n+    threshold: 0.1 // triggers when 10% of canvas is visible\r\n+  });\r\n \r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+    observer.observe(canvas); // observe all pages including page 1\r\n+  });\r\n+});\r\n+\r\n+\r\n     // Render thumbnails in sidebar\r\n     function renderThumbnails(maxVisible) {\r\n       sidebar.innerHTML = '';\r\n       for (let i = 1; i <= maxVisible; i++) {\r\n"
                },
                {
                    "date": 1756981034403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,8 +187,9 @@\n     }\r\n \r\n     // Lazy loading using IntersectionObserver\r\n // Lazy loading using IntersectionObserver\r\n+// Lazy loading using IntersectionObserver\r\n function setupLazyLoading(maxVisible) {\r\n   const observer = new IntersectionObserver(entries => {\r\n     entries.forEach(entry => {\r\n       if (entry.isIntersecting) {\r\n"
                },
                {
                    "date": 1756981040181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,35 +186,29 @@\n       });\r\n     }\r\n \r\n     // Lazy loading using IntersectionObserver\r\n-// Lazy loading using IntersectionObserver\r\n-// Lazy loading using IntersectionObserver\r\n-function setupLazyLoading(maxVisible) {\r\n-  const observer = new IntersectionObserver(entries => {\r\n-    entries.forEach(entry => {\r\n-      if (entry.isIntersecting) {\r\n-        const canvas = entry.target;\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+    function setupLazyLoading(maxVisible) {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-        // Render page if not yet rendered\r\n-        if (!canvas.dataset.rendered) {\r\n-          renderPageAsync(pageNum, canvas);\r\n+            if (!canvas.dataset.rendered) {\r\n+              renderPageAsync(pageNum, canvas);\r\n+            }\r\n+          }\r\n+        });\r\n+      }, { root: pdfViewer, threshold: 0.1 });\r\n+\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+        if (parseInt(canvas.dataset.pageNumber, 10) !== 1) { // skip first page\r\n+          observer.observe(canvas);\r\n         }\r\n-      }\r\n-    });\r\n-  }, {\r\n-    root: pdfViewer,\r\n-    rootMargin: '0px',\r\n-    threshold: 0.1 // triggers when 10% of canvas is visible\r\n-  });\r\n+      });\r\n+    }\r\n \r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-    observer.observe(canvas); // observe all pages including page 1\r\n-  });\r\n-});\r\n-\r\n-\r\n     // Render thumbnails in sidebar\r\n     function renderThumbnails(maxVisible) {\r\n       sidebar.innerHTML = '';\r\n       for (let i = 1; i <= maxVisible; i++) {\r\n"
                },
                {
                    "date": 1756981052498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,29 +186,33 @@\n       });\r\n     }\r\n \r\n     // Lazy loading using IntersectionObserver\r\n-    function setupLazyLoading(maxVisible) {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+// Lazy loading using IntersectionObserver\r\n+function setupLazyLoading(maxVisible) {\r\n+  const observer = new IntersectionObserver(entries => {\r\n+    entries.forEach(entry => {\r\n+      if (entry.isIntersecting) {\r\n+        const canvas = entry.target;\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-            if (!canvas.dataset.rendered) {\r\n-              renderPageAsync(pageNum, canvas);\r\n-            }\r\n-          }\r\n-        });\r\n-      }, { root: pdfViewer, threshold: 0.1 });\r\n-\r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-        if (parseInt(canvas.dataset.pageNumber, 10) !== 1) { // skip first page\r\n-          observer.observe(canvas);\r\n+        // Render page if not yet rendered\r\n+        if (!canvas.dataset.rendered) {\r\n+          renderPageAsync(pageNum, canvas);\r\n         }\r\n-      });\r\n-    }\r\n+      }\r\n+    });\r\n+  }, {\r\n+    root: pdfViewer,\r\n+    rootMargin: '0px',\r\n+    threshold: 0.1 // triggers when 10% of canvas is visible\r\n+  });\r\n \r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+    observer.observe(canvas); // observe all pages including page 1\r\n+  });\r\n+});\r\n+\r\n     // Render thumbnails in sidebar\r\n     function renderThumbnails(maxVisible) {\r\n       sidebar.innerHTML = '';\r\n       for (let i = 1; i <= maxVisible; i++) {\r\n"
                },
                {
                    "date": 1756981059908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,52 @@\n       });\r\n     }\r\n \r\n     // Lazy loading using IntersectionObserver\r\n-// Lazy loading using IntersectionObserver\r\n+    function setupLazyLoading(maxVisible) {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+\r\n+            if (!canvas.dataset.rendered) {\r\n+              renderPageAsync(pageNum, canvas);\r\n+            }\r\n+          }\r\n+        });\r\n+      }, { root: pdfViewer, threshold: 0.1 });\r\n+\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+        if (parseInt(canvas.dataset.pageNumber, 10) !== 1) { // skip first page\r\n+          observer.observe(canvas);\r\n+        }\r\n+      });\r\n+    }\r\n+\r\n+    // Render thumbnails in sidebar\r\n+    function renderThumbnails(maxVisible) {\r\n+      sidebar.innerHTML = '';\r\n+      for (let i = 1; i <= maxVisible; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n+\r\n+          canvas.onclick = () => {\r\n+            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+          };\r\n+        });\r\n+      }\r\n+    }\r\n+\r\n+\r\n+    // Lazy loading using IntersectionObserver\r\n function setupLazyLoading(maxVisible) {\r\n   const observer = new IntersectionObserver(entries => {\r\n     entries.forEach(entry => {\r\n       if (entry.isIntersecting) {\r\n@@ -211,29 +254,9 @@\n     observer.observe(canvas); // observe all pages including page 1\r\n   });\r\n });\r\n \r\n-    // Render thumbnails in sidebar\r\n-    function renderThumbnails(maxVisible) {\r\n-      sidebar.innerHTML = '';\r\n-      for (let i = 1; i <= maxVisible; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n \r\n-          canvas.onclick = () => {\r\n-            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-          };\r\n-        });\r\n-      }\r\n-    }\r\n-\r\n     // Zoom\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n       rerenderVisiblePages();\r\n"
                },
                {
                    "date": 1756981125244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,173 +123,151 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    // PDF.js worker\r\n-    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n+// PDF.js worker\r\n+pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n+  'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n \r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n-    const limitPages = 2;\r\n+const url =\r\n+  \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n+const limitPages = 50;\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+const pdfViewer = document.getElementById(\"viewer\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    (async function initPDF() {\r\n-      pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+(async function initPDF() {\r\n+  pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n+  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-      // Remove any existing canvases\r\n-      pdfViewer.innerHTML = '';\r\n+  // Remove existing canvases\r\n+  pdfViewer.innerHTML = '';\r\n \r\n-      // Create canvas elements for all pages\r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        canvas.dataset.pageNumber = num;\r\n+  // Create canvas elements for all pages\r\n+  for (let num = 1; num <= maxVisible; num++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    canvas.dataset.pageNumber = num;\r\n \r\n-        // Add special class for page 1\r\n-        if (num === 1) canvas.classList.add(\"first-page\");\r\n+    // Add special class for page 1\r\n+    if (num === 1) canvas.classList.add(\"first-page\");\r\n \r\n-        pdfViewer.appendChild(canvas);\r\n-      }\r\n+    pdfViewer.appendChild(canvas);\r\n+  }\r\n \r\n-      // Render page 1 immediately\r\n-      const firstCanvas = pdfViewer.querySelector('.first-page');\r\n-      await renderPageAsync(1, firstCanvas);\r\n+  // Render page 1 immediately\r\n+  const firstCanvas = pdfViewer.querySelector('.first-page');\r\n+  await renderPageAsync(1, firstCanvas);\r\n \r\n-      // Setup lazy loading for pages 2+\r\n-      setupLazyLoading(maxVisible);\r\n+  // Setup lazy loading for all pages including page 1\r\n+  setupLazyLoading(maxVisible);\r\n \r\n-      // Render sidebar thumbnails\r\n-      renderThumbnails(maxVisible);\r\n+  // Render sidebar thumbnails\r\n+  renderThumbnails(maxVisible);\r\n \r\n-      // Scroll to top\r\n-      pdfViewer.scrollTop = 0;\r\n-    })();\r\n+  // Scroll to top to show first page\r\n+  pdfViewer.scrollTop = 0;\r\n+})();\r\n \r\n-    function renderPageAsync(pageNum, canvas) {\r\n-      return pdfDoc.getPage(pageNum).then(page => {\r\n-        return new Promise(resolve => {\r\n-          const context = canvas.getContext(\"2d\");\r\n-          const viewport = page.getViewport({ scale });\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n-            canvas.dataset.rendered = \"true\";\r\n-            console.log(`‚úÖ Rendered page ${pageNum}`);\r\n-            resolve();\r\n-          });\r\n-        });\r\n+function renderPageAsync(pageNum, canvas) {\r\n+  return pdfDoc.getPage(pageNum).then(page => {\r\n+    return new Promise(resolve => {\r\n+      const context = canvas.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n+        canvas.dataset.rendered = \"true\";\r\n+        console.log(`‚úÖ Rendered page ${pageNum}`);\r\n+        resolve();\r\n       });\r\n-    }\r\n+    });\r\n+  });\r\n+}\r\n \r\n-    // Lazy loading using IntersectionObserver\r\n-    function setupLazyLoading(maxVisible) {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-\r\n-            if (!canvas.dataset.rendered) {\r\n-              renderPageAsync(pageNum, canvas);\r\n-            }\r\n-          }\r\n-        });\r\n-      }, { root: pdfViewer, threshold: 0.1 });\r\n-\r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-        if (parseInt(canvas.dataset.pageNumber, 10) !== 1) { // skip first page\r\n-          observer.observe(canvas);\r\n-        }\r\n-      });\r\n-    }\r\n-\r\n-    // Render thumbnails in sidebar\r\n-    function renderThumbnails(maxVisible) {\r\n-      sidebar.innerHTML = '';\r\n-      for (let i = 1; i <= maxVisible; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n-\r\n-          canvas.onclick = () => {\r\n-            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-          };\r\n-        });\r\n-      }\r\n-    }\r\n-\r\n-\r\n-    // Lazy loading using IntersectionObserver\r\n+// Lazy loading using IntersectionObserver\r\n function setupLazyLoading(maxVisible) {\r\n   const observer = new IntersectionObserver(entries => {\r\n     entries.forEach(entry => {\r\n       if (entry.isIntersecting) {\r\n         const canvas = entry.target;\r\n         const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-        // Render page if not yet rendered\r\n+        // Render if not yet rendered\r\n         if (!canvas.dataset.rendered) {\r\n           renderPageAsync(pageNum, canvas);\r\n         }\r\n       }\r\n     });\r\n   }, {\r\n     root: pdfViewer,\r\n     rootMargin: '0px',\r\n-    threshold: 0.1 // triggers when 10% of canvas is visible\r\n+    threshold: 0.1 // triggers when 10% visible\r\n   });\r\n \r\n   pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-    observer.observe(canvas); // observe all pages including page 1\r\n+    observer.observe(canvas); // observe all pages\r\n   });\r\n-});\r\n+}\r\n \r\n+// Render thumbnails in sidebar\r\n+function renderThumbnails(maxVisible) {\r\n+  sidebar.innerHTML = '';\r\n+  for (let i = 1; i <= maxVisible; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n \r\n-    // Zoom\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n-      rerenderVisiblePages();\r\n-    };\r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        rerenderVisiblePages();\r\n-      }\r\n-    };\r\n+      canvas.onclick = () => {\r\n+        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+      };\r\n+    });\r\n+  }\r\n+}\r\n \r\n-    function rerenderVisiblePages() {\r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-        if (canvas.dataset.rendered) {\r\n-          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-          pdfDoc.getPage(pageNum).then(page => {\r\n-            const context = canvas.getContext(\"2d\");\r\n-            const viewport = page.getViewport({ scale });\r\n-            canvas.height = viewport.height;\r\n-            canvas.width = viewport.width;\r\n-            page.render({ canvasContext: context, viewport });\r\n-          });\r\n-        }\r\n+// Zoom buttons\r\n+document.getElementById(\"zoomIn\").onclick = () => {\r\n+  scale += 0.2;\r\n+  rerenderVisiblePages();\r\n+};\r\n+document.getElementById(\"zoomOut\").onclick = () => {\r\n+  if (scale > 0.4) {\r\n+    scale -= 0.2;\r\n+    rerenderVisiblePages();\r\n+  }\r\n+};\r\n+\r\n+// Rerender only already-rendered pages on zoom\r\n+function rerenderVisiblePages() {\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+    if (canvas.dataset.rendered) {\r\n+      const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+      pdfDoc.getPage(pageNum).then(page => {\r\n+        const context = canvas.getContext(\"2d\");\r\n+        const viewport = page.getViewport({ scale });\r\n+        canvas.height = viewport.height;\r\n+        canvas.width = viewport.width;\r\n+        page.render({ canvasContext: context, viewport });\r\n       });\r\n     }\r\n+  });\r\n+}\r\n \r\n-    // Close\r\n-    document.getElementById(\"closeBtn\").onclick = () => {\r\n-      document.getElementById(\"container\").style.display = \"none\";\r\n-    };\r\n+// Close button\r\n+document.getElementById(\"closeBtn\").onclick = () => {\r\n+  document.getElementById(\"container\").style.display = \"none\";\r\n+};\r\n \r\n-\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756981166012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,150 +123,150 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-// PDF.js worker\r\n-pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n-  'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n+    // PDF.js worker\r\n+    pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n+      'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n \r\n-const url =\r\n-  \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n-const limitPages = 50;\r\n+    const url =\r\n+      \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n+    const limitPages = 2;\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const pdfViewer = document.getElementById(\"viewer\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-(async function initPDF() {\r\n-  pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n-  const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n-  pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+    (async function initPDF() {\r\n+      pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n+      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n+      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n \r\n-  // Remove existing canvases\r\n-  pdfViewer.innerHTML = '';\r\n+      // Remove existing canvases\r\n+      pdfViewer.innerHTML = '';\r\n \r\n-  // Create canvas elements for all pages\r\n-  for (let num = 1; num <= maxVisible; num++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    canvas.dataset.pageNumber = num;\r\n+      // Create canvas elements for all pages\r\n+      for (let num = 1; num <= maxVisible; num++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        canvas.dataset.pageNumber = num;\r\n \r\n-    // Add special class for page 1\r\n-    if (num === 1) canvas.classList.add(\"first-page\");\r\n+        // Add special class for page 1\r\n+        if (num === 1) canvas.classList.add(\"first-page\");\r\n \r\n-    pdfViewer.appendChild(canvas);\r\n-  }\r\n+        pdfViewer.appendChild(canvas);\r\n+      }\r\n \r\n-  // Render page 1 immediately\r\n-  const firstCanvas = pdfViewer.querySelector('.first-page');\r\n-  await renderPageAsync(1, firstCanvas);\r\n+      // Render page 1 immediately\r\n+      const firstCanvas = pdfViewer.querySelector('.first-page');\r\n+      await renderPageAsync(1, firstCanvas);\r\n \r\n-  // Setup lazy loading for all pages including page 1\r\n-  setupLazyLoading(maxVisible);\r\n+      // Setup lazy loading for all pages including page 1\r\n+      setupLazyLoading(maxVisible);\r\n \r\n-  // Render sidebar thumbnails\r\n-  renderThumbnails(maxVisible);\r\n+      // Render sidebar thumbnails\r\n+      renderThumbnails(maxVisible);\r\n \r\n-  // Scroll to top to show first page\r\n-  pdfViewer.scrollTop = 0;\r\n-})();\r\n+      // Scroll to top to show first page\r\n+      pdfViewer.scrollTop = 0;\r\n+    })();\r\n \r\n-function renderPageAsync(pageNum, canvas) {\r\n-  return pdfDoc.getPage(pageNum).then(page => {\r\n-    return new Promise(resolve => {\r\n-      const context = canvas.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n-        canvas.dataset.rendered = \"true\";\r\n-        console.log(`‚úÖ Rendered page ${pageNum}`);\r\n-        resolve();\r\n+    function renderPageAsync(pageNum, canvas) {\r\n+      return pdfDoc.getPage(pageNum).then(page => {\r\n+        return new Promise(resolve => {\r\n+          const context = canvas.getContext(\"2d\");\r\n+          const viewport = page.getViewport({ scale });\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n+            canvas.dataset.rendered = \"true\";\r\n+            console.log(`‚úÖ Rendered page ${pageNum}`);\r\n+            resolve();\r\n+          });\r\n+        });\r\n       });\r\n-    });\r\n-  });\r\n-}\r\n+    }\r\n \r\n-// Lazy loading using IntersectionObserver\r\n-function setupLazyLoading(maxVisible) {\r\n-  const observer = new IntersectionObserver(entries => {\r\n-    entries.forEach(entry => {\r\n-      if (entry.isIntersecting) {\r\n-        const canvas = entry.target;\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+    // Lazy loading using IntersectionObserver\r\n+    function setupLazyLoading(maxVisible) {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n \r\n-        // Render if not yet rendered\r\n-        if (!canvas.dataset.rendered) {\r\n-          renderPageAsync(pageNum, canvas);\r\n-        }\r\n-      }\r\n-    });\r\n-  }, {\r\n-    root: pdfViewer,\r\n-    rootMargin: '0px',\r\n-    threshold: 0.1 // triggers when 10% visible\r\n-  });\r\n+            // Render if not yet rendered\r\n+            if (!canvas.dataset.rendered) {\r\n+              renderPageAsync(pageNum, canvas);\r\n+            }\r\n+          }\r\n+        });\r\n+      }, {\r\n+        root: pdfViewer,\r\n+        rootMargin: '0px',\r\n+        threshold: 0.1 // triggers when 10% visible\r\n+      });\r\n \r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-    observer.observe(canvas); // observe all pages\r\n-  });\r\n-}\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+        observer.observe(canvas); // observe all pages\r\n+      });\r\n+    }\r\n \r\n-// Render thumbnails in sidebar\r\n-function renderThumbnails(maxVisible) {\r\n-  sidebar.innerHTML = '';\r\n-  for (let i = 1; i <= maxVisible; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      sidebar.appendChild(canvas);\r\n+    // Render thumbnails in sidebar\r\n+    function renderThumbnails(maxVisible) {\r\n+      sidebar.innerHTML = '';\r\n+      for (let i = 1; i <= maxVisible; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n \r\n-      canvas.onclick = () => {\r\n-        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-      };\r\n-    });\r\n-  }\r\n-}\r\n+          canvas.onclick = () => {\r\n+            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+          };\r\n+        });\r\n+      }\r\n+    }\r\n \r\n-// Zoom buttons\r\n-document.getElementById(\"zoomIn\").onclick = () => {\r\n-  scale += 0.2;\r\n-  rerenderVisiblePages();\r\n-};\r\n-document.getElementById(\"zoomOut\").onclick = () => {\r\n-  if (scale > 0.4) {\r\n-    scale -= 0.2;\r\n-    rerenderVisiblePages();\r\n-  }\r\n-};\r\n+    // Zoom buttons\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      rerenderVisiblePages();\r\n+    };\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        rerenderVisiblePages();\r\n+      }\r\n+    };\r\n \r\n-// Rerender only already-rendered pages on zoom\r\n-function rerenderVisiblePages() {\r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-    if (canvas.dataset.rendered) {\r\n-      const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-      pdfDoc.getPage(pageNum).then(page => {\r\n-        const context = canvas.getContext(\"2d\");\r\n-        const viewport = page.getViewport({ scale });\r\n-        canvas.height = viewport.height;\r\n-        canvas.width = viewport.width;\r\n-        page.render({ canvasContext: context, viewport });\r\n+    // Rerender only already-rendered pages on zoom\r\n+    function rerenderVisiblePages() {\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+        if (canvas.dataset.rendered) {\r\n+          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+          pdfDoc.getPage(pageNum).then(page => {\r\n+            const context = canvas.getContext(\"2d\");\r\n+            const viewport = page.getViewport({ scale });\r\n+            canvas.height = viewport.height;\r\n+            canvas.width = viewport.width;\r\n+            page.render({ canvasContext: context, viewport });\r\n+          });\r\n+        }\r\n       });\r\n     }\r\n-  });\r\n-}\r\n \r\n-// Close button\r\n-document.getElementById(\"closeBtn\").onclick = () => {\r\n-  document.getElementById(\"container\").style.display = \"none\";\r\n-};\r\n+    // Close button\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n+    };\r\n \r\n   </script>\r\n \r\n </body>\r\n"
                },
                {
                    "date": 1756981201424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n     const url =\r\n       \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    const limitPages = 2;\r\n+    const limitPages = 10;\r\n \r\n     const pdfViewer = document.getElementById(\"viewer\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n"
                },
                {
                    "date": 1756981263073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,151 +123,25 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    // PDF.js worker\r\n-    pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n-      'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n+// PDF.js worker\r\n+pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n+  \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n-    const url =\r\n-      \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n-    const limitPages = 10;\r\n+const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n+let currentPage = 1;\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+const pdfViewer = document.getElementById(\"mainCanvas\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    (async function initPDF() {\r\n-      pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n-      const maxVisible = Math.min(limitPages, pdfDoc.numPages);\r\n-      pageInfo.textContent = `1 - ${maxVisible} / ${pdfDoc.numPages}`;\r\n+(async function initPDF() {\r\n+  pdfDoc = await pdfjsLib\r\n \r\n-      // Remove existing canvases\r\n-      pdfViewer.innerHTML = '';\r\n \r\n-      // Create canvas elements for all pages\r\n-      for (let num = 1; num <= maxVisible; num++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        canvas.dataset.pageNumber = num;\r\n-\r\n-        // Add special class for page 1\r\n-        if (num === 1) canvas.classList.add(\"first-page\");\r\n-\r\n-        pdfViewer.appendChild(canvas);\r\n-      }\r\n-\r\n-      // Render page 1 immediately\r\n-      const firstCanvas = pdfViewer.querySelector('.first-page');\r\n-      await renderPageAsync(1, firstCanvas);\r\n-\r\n-      // Setup lazy loading for all pages including page 1\r\n-      setupLazyLoading(maxVisible);\r\n-\r\n-      // Render sidebar thumbnails\r\n-      renderThumbnails(maxVisible);\r\n-\r\n-      // Scroll to top to show first page\r\n-      pdfViewer.scrollTop = 0;\r\n-    })();\r\n-\r\n-    function renderPageAsync(pageNum, canvas) {\r\n-      return pdfDoc.getPage(pageNum).then(page => {\r\n-        return new Promise(resolve => {\r\n-          const context = canvas.getContext(\"2d\");\r\n-          const viewport = page.getViewport({ scale });\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: context, viewport }).promise.then(() => {\r\n-            canvas.dataset.rendered = \"true\";\r\n-            console.log(`‚úÖ Rendered page ${pageNum}`);\r\n-            resolve();\r\n-          });\r\n-        });\r\n-      });\r\n-    }\r\n-\r\n-    // Lazy loading using IntersectionObserver\r\n-    function setupLazyLoading(maxVisible) {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-\r\n-            // Render if not yet rendered\r\n-            if (!canvas.dataset.rendered) {\r\n-              renderPageAsync(pageNum, canvas);\r\n-            }\r\n-          }\r\n-        });\r\n-      }, {\r\n-        root: pdfViewer,\r\n-        rootMargin: '0px',\r\n-        threshold: 0.1 // triggers when 10% visible\r\n-      });\r\n-\r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-        observer.observe(canvas); // observe all pages\r\n-      });\r\n-    }\r\n-\r\n-    // Render thumbnails in sidebar\r\n-    function renderThumbnails(maxVisible) {\r\n-      sidebar.innerHTML = '';\r\n-      for (let i = 1; i <= maxVisible; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n-\r\n-          canvas.onclick = () => {\r\n-            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-          };\r\n-        });\r\n-      }\r\n-    }\r\n-\r\n-    // Zoom buttons\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n-      rerenderVisiblePages();\r\n-    };\r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        rerenderVisiblePages();\r\n-      }\r\n-    };\r\n-\r\n-    // Rerender only already-rendered pages on zoom\r\n-    function rerenderVisiblePages() {\r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-        if (canvas.dataset.rendered) {\r\n-          const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-          pdfDoc.getPage(pageNum).then(page => {\r\n-            const context = canvas.getContext(\"2d\");\r\n-            const viewport = page.getViewport({ scale });\r\n-            canvas.height = viewport.height;\r\n-            canvas.width = viewport.width;\r\n-            page.render({ canvasContext: context, viewport });\r\n-          });\r\n-        }\r\n-      });\r\n-    }\r\n-\r\n-    // Close button\r\n-    document.getElementById(\"closeBtn\").onclick = () => {\r\n-      document.getElementById(\"container\").style.display = \"none\";\r\n-    };\r\n-\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756981269813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,11 +137,69 @@\n const sidebar = document.getElementById(\"sidebar\");\r\n const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n (async function initPDF() {\r\n-  pdfDoc = await pdfjsLib\r\n+  pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n+  const totalPages = pdfDoc.numPages;\r\n+  pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n \r\n+  // Render the first page\r\n+  await renderPage(currentPage);\r\n \r\n+  // Render sidebar thumbnails\r\n+  renderThumbnails(totalPages);\r\n+})();\r\n+\r\n+// Render a single page in the main canvas\r\n+async function renderPage(pageNum) {\r\n+  const page = await pdfDoc.getPage(pageNum);\r\n+  const context = pdfViewer.getContext(\"2d\");\r\n+  const viewport = page.getViewport({ scale });\r\n+\r\n+  pdfViewer.height = viewport.height;\r\n+  pdfViewer.width = viewport.width;\r\n+\r\n+  await page.render({ canvasContext: context, viewport }).promise;\r\n+  pageInfo.textContent = `${pageNum} / ${pdfDoc.numPages}`;\r\n+  currentPage = pageNum;\r\n+}\r\n+\r\n+// Render sidebar thumbnails for navigation\r\n+function renderThumbnails(totalPages) {\r\n+  sidebar.innerHTML = \"\";\r\n+  for (let i = 1; i <= totalPages; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n+\r\n+      canvas.onclick = () => renderPage(i);\r\n+    });\r\n+  }\r\n+}\r\n+\r\n+// Zoom controls\r\n+document.getElementById(\"zoomIn\").onclick = () => {\r\n+  scale += 0.2;\r\n+  renderPage(currentPage);\r\n+};\r\n+document.getElementById(\"zoomOut\").onclick = () => {\r\n+  if (scale > 0.4) {\r\n+    scale -= 0.2;\r\n+    renderPage(currentPage);\r\n+  }\r\n+};\r\n+\r\n+// Close viewer\r\n+document.getElementById(\"closeBtn\").onclick = () => {\r\n+  document.getElementById(\"container\").style.display = \"none\";\r\n+};\r\n+\r\n+\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756981445068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,45 +122,47 @@\n   </div>\r\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n-  <script>\r\n // PDF.js worker\r\n pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n   \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n let pdfDoc = null;\r\n let scale = 1.5;\r\n let currentPage = 1;\r\n+const limitPages = 50; // maximum pages to render\r\n \r\n const pdfViewer = document.getElementById(\"mainCanvas\");\r\n const sidebar = document.getElementById(\"sidebar\");\r\n const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n (async function initPDF() {\r\n   pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n-  const totalPages = pdfDoc.numPages;\r\n+  const totalPages = Math.min(pdfDoc.numPages, limitPages); // limit pages\r\n   pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n \r\n-  // Render the first page\r\n+  // Render the first page immediately\r\n   await renderPage(currentPage);\r\n \r\n-  // Render sidebar thumbnails\r\n+  // Render sidebar thumbnails for pages 1 ‚Üí limitPages\r\n   renderThumbnails(totalPages);\r\n })();\r\n \r\n // Render a single page in the main canvas\r\n async function renderPage(pageNum) {\r\n+  if (pageNum > limitPages) return; // safety check\r\n+\r\n   const page = await pdfDoc.getPage(pageNum);\r\n   const context = pdfViewer.getContext(\"2d\");\r\n   const viewport = page.getViewport({ scale });\r\n \r\n   pdfViewer.height = viewport.height;\r\n   pdfViewer.width = viewport.width;\r\n \r\n   await page.render({ canvasContext: context, viewport }).promise;\r\n-  pageInfo.textContent = `${pageNum} / ${pdfDoc.numPages}`;\r\n+  pageInfo.textContent = `${pageNum} / ${Math.min(pdfDoc.numPages, limitPages)}`;\r\n   currentPage = pageNum;\r\n }\r\n \r\n // Render sidebar thumbnails for navigation\r\n@@ -198,9 +200,7 @@\n   document.getElementById(\"container\").style.display = \"none\";\r\n };\r\n \r\n \r\n-  </script>\r\n-\r\n </body>\r\n \r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756981458053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,8 +122,9 @@\n   </div>\r\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n+  <script>\r\n // PDF.js worker\r\n pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n   \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n@@ -199,8 +200,9 @@\n document.getElementById(\"closeBtn\").onclick = () => {\r\n   document.getElementById(\"container\").style.display = \"none\";\r\n };\r\n \r\n+  </script>\r\n \r\n </body>\r\n \r\n </html>\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756981559757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,8 +137,16 @@\n const pdfViewer = document.getElementById(\"mainCanvas\");\r\n const sidebar = document.getElementById(\"sidebar\");\r\n const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n+// Create navigation buttons\r\n+const nextBtn = document.createElement(\"button\");\r\n+nextBtn.textContent = \"Next Page\";\r\n+const prevBtn = document.createElement(\"button\");\r\n+prevBtn.textContent = \"Previous Page\";\r\n+document.getElementById(\"topbar\").appendChild(prevBtn);\r\n+document.getElementById(\"topbar\").appendChild(nextBtn);\r\n+\r\n (async function initPDF() {\r\n   pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n   const totalPages = Math.min(pdfDoc.numPages, limitPages); // limit pages\r\n   pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n@@ -151,9 +159,9 @@\n })();\r\n \r\n // Render a single page in the main canvas\r\n async function renderPage(pageNum) {\r\n-  if (pageNum > limitPages) return; // safety check\r\n+  if (pageNum < 1 || pageNum > limitPages) return; // safety check\r\n \r\n   const page = await pdfDoc.getPage(pageNum);\r\n   const context = pdfViewer.getContext(\"2d\");\r\n   const viewport = page.getViewport({ scale });\r\n@@ -195,8 +203,16 @@\n     renderPage(currentPage);\r\n   }\r\n };\r\n \r\n+// Navigation buttons\r\n+nextBtn.onclick = () => {\r\n+  if (currentPage < limitPages) renderPage(currentPage + 1);\r\n+};\r\n+prevBtn.onclick = () => {\r\n+  if (currentPage > 1) renderPage(currentPage - 1);\r\n+};\r\n+\r\n // Close viewer\r\n document.getElementById(\"closeBtn\").onclick = () => {\r\n   document.getElementById(\"container\").style.display = \"none\";\r\n };\r\n"
                },
                {
                    "date": 1756981623526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-// PDF.js worker\r\n+ // PDF.js worker\r\n pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n   \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n@@ -137,16 +137,8 @@\n const pdfViewer = document.getElementById(\"mainCanvas\");\r\n const sidebar = document.getElementById(\"sidebar\");\r\n const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-// Create navigation buttons\r\n-const nextBtn = document.createElement(\"button\");\r\n-nextBtn.textContent = \"Next Page\";\r\n-const prevBtn = document.createElement(\"button\");\r\n-prevBtn.textContent = \"Previous Page\";\r\n-document.getElementById(\"topbar\").appendChild(prevBtn);\r\n-document.getElementById(\"topbar\").appendChild(nextBtn);\r\n-\r\n (async function initPDF() {\r\n   pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n   const totalPages = Math.min(pdfDoc.numPages, limitPages); // limit pages\r\n   pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n@@ -155,8 +147,11 @@\n   await renderPage(currentPage);\r\n \r\n   // Render sidebar thumbnails for pages 1 ‚Üí limitPages\r\n   renderThumbnails(totalPages);\r\n+\r\n+  // Enable scroll navigation\r\n+  enableScrollNavigation();\r\n })();\r\n \r\n // Render a single page in the main canvas\r\n async function renderPage(pageNum) {\r\n@@ -203,21 +198,40 @@\n     renderPage(currentPage);\r\n   }\r\n };\r\n \r\n-// Navigation buttons\r\n-nextBtn.onclick = () => {\r\n-  if (currentPage < limitPages) renderPage(currentPage + 1);\r\n-};\r\n-prevBtn.onclick = () => {\r\n-  if (currentPage > 1) renderPage(currentPage - 1);\r\n-};\r\n-\r\n // Close viewer\r\n document.getElementById(\"closeBtn\").onclick = () => {\r\n   document.getElementById(\"container\").style.display = \"none\";\r\n };\r\n \r\n+// Scroll navigation\r\n+function enableScrollNavigation() {\r\n+  let scrollCooldown = false; // prevent multiple scrolls at once\r\n+\r\n+  pdfViewer.addEventListener(\"wheel\", (event) => {\r\n+    if (scrollCooldown) return;\r\n+\r\n+    if (event.deltaY > 0) { // scroll down ‚Üí next page\r\n+      if (currentPage < limitPages) {\r\n+        renderPage(currentPage + 1);\r\n+        scrollCooldown = true;\r\n+      }\r\n+    } else if (event.deltaY < 0) { // scroll up ‚Üí previous page\r\n+      if (currentPage > 1) {\r\n+        renderPage(currentPage - 1);\r\n+        scrollCooldown = true;\r\n+      }\r\n+    }\r\n+\r\n+    // Small timeout to avoid multiple page jumps per wheel event\r\n+    setTimeout(() => {\r\n+      scrollCooldown = false;\r\n+    }, 150);\r\n+  });\r\n+}\r\n+\r\n+\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756988662737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,10 @@\n \r\n     #mainCanvas {\r\n       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n       border-radius: 6px;\r\n+      height: 100%;\r\n+      width: 100%;\r\n     }\r\n \r\n     #viewer {\r\n       flex: 1;\r\n@@ -123,115 +125,115 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n- // PDF.js worker\r\n-pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n-  \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n+    // PDF.js worker\r\n+    pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n+      \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n-const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n-let currentPage = 1;\r\n-const limitPages = 50; // maximum pages to render\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n+    let currentPage = 1;\r\n+    const limitPages = 50; // maximum pages to render\r\n \r\n-const pdfViewer = document.getElementById(\"mainCanvas\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const pdfViewer = document.getElementById(\"mainCanvas\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-(async function initPDF() {\r\n-  pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n-  const totalPages = Math.min(pdfDoc.numPages, limitPages); // limit pages\r\n-  pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n+    (async function initPDF() {\r\n+      pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n+      const totalPages = Math.min(pdfDoc.numPages, limitPages); // limit pages\r\n+      pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n \r\n-  // Render the first page immediately\r\n-  await renderPage(currentPage);\r\n+      // Render the first page immediately\r\n+      await renderPage(currentPage);\r\n \r\n-  // Render sidebar thumbnails for pages 1 ‚Üí limitPages\r\n-  renderThumbnails(totalPages);\r\n+      // Render sidebar thumbnails for pages 1 ‚Üí limitPages\r\n+      renderThumbnails(totalPages);\r\n \r\n-  // Enable scroll navigation\r\n-  enableScrollNavigation();\r\n-})();\r\n+      // Enable scroll navigation\r\n+      enableScrollNavigation();\r\n+    })();\r\n \r\n-// Render a single page in the main canvas\r\n-async function renderPage(pageNum) {\r\n-  if (pageNum < 1 || pageNum > limitPages) return; // safety check\r\n+    // Render a single page in the main canvas\r\n+    async function renderPage(pageNum) {\r\n+      if (pageNum < 1 || pageNum > limitPages) return; // safety check\r\n \r\n-  const page = await pdfDoc.getPage(pageNum);\r\n-  const context = pdfViewer.getContext(\"2d\");\r\n-  const viewport = page.getViewport({ scale });\r\n+      const page = await pdfDoc.getPage(pageNum);\r\n+      const context = pdfViewer.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n \r\n-  pdfViewer.height = viewport.height;\r\n-  pdfViewer.width = viewport.width;\r\n+      pdfViewer.height = viewport.height;\r\n+      pdfViewer.width = viewport.width;\r\n \r\n-  await page.render({ canvasContext: context, viewport }).promise;\r\n-  pageInfo.textContent = `${pageNum} / ${Math.min(pdfDoc.numPages, limitPages)}`;\r\n-  currentPage = pageNum;\r\n-}\r\n+      await page.render({ canvasContext: context, viewport }).promise;\r\n+      pageInfo.textContent = `${pageNum} / ${Math.min(pdfDoc.numPages, limitPages)}`;\r\n+      currentPage = pageNum;\r\n+    }\r\n \r\n-// Render sidebar thumbnails for navigation\r\n-function renderThumbnails(totalPages) {\r\n-  sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= totalPages; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      sidebar.appendChild(canvas);\r\n+    // Render sidebar thumbnails for navigation\r\n+    function renderThumbnails(totalPages) {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = 1; i <= totalPages; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n \r\n-      canvas.onclick = () => renderPage(i);\r\n-    });\r\n-  }\r\n-}\r\n+          canvas.onclick = () => renderPage(i);\r\n+        });\r\n+      }\r\n+    }\r\n \r\n-// Zoom controls\r\n-document.getElementById(\"zoomIn\").onclick = () => {\r\n-  scale += 0.2;\r\n-  renderPage(currentPage);\r\n-};\r\n-document.getElementById(\"zoomOut\").onclick = () => {\r\n-  if (scale > 0.4) {\r\n-    scale -= 0.2;\r\n-    renderPage(currentPage);\r\n-  }\r\n-};\r\n+    // Zoom controls\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      renderPage(currentPage);\r\n+    };\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        renderPage(currentPage);\r\n+      }\r\n+    };\r\n \r\n-// Close viewer\r\n-document.getElementById(\"closeBtn\").onclick = () => {\r\n-  document.getElementById(\"container\").style.display = \"none\";\r\n-};\r\n+    // Close viewer\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n+    };\r\n \r\n-// Scroll navigation\r\n-function enableScrollNavigation() {\r\n-  let scrollCooldown = false; // prevent multiple scrolls at once\r\n+    // Scroll navigation\r\n+    function enableScrollNavigation() {\r\n+      let scrollCooldown = false; // prevent multiple scrolls at once\r\n \r\n-  pdfViewer.addEventListener(\"wheel\", (event) => {\r\n-    if (scrollCooldown) return;\r\n+      pdfViewer.addEventListener(\"wheel\", (event) => {\r\n+        if (scrollCooldown) return;\r\n \r\n-    if (event.deltaY > 0) { // scroll down ‚Üí next page\r\n-      if (currentPage < limitPages) {\r\n-        renderPage(currentPage + 1);\r\n-        scrollCooldown = true;\r\n-      }\r\n-    } else if (event.deltaY < 0) { // scroll up ‚Üí previous page\r\n-      if (currentPage > 1) {\r\n-        renderPage(currentPage - 1);\r\n-        scrollCooldown = true;\r\n-      }\r\n+        if (event.deltaY > 0) { // scroll down ‚Üí next page\r\n+          if (currentPage < limitPages) {\r\n+            renderPage(currentPage + 1);\r\n+            scrollCooldown = true;\r\n+          }\r\n+        } else if (event.deltaY < 0) { // scroll up ‚Üí previous page\r\n+          if (currentPage > 1) {\r\n+            renderPage(currentPage - 1);\r\n+            scrollCooldown = true;\r\n+          }\r\n+        }\r\n+\r\n+        // Small timeout to avoid multiple page jumps per wheel event\r\n+        setTimeout(() => {\r\n+          scrollCooldown = false;\r\n+        }, 150);\r\n+      });\r\n     }\r\n \r\n-    // Small timeout to avoid multiple page jumps per wheel event\r\n-    setTimeout(() => {\r\n-      scrollCooldown = false;\r\n-    }, 150);\r\n-  });\r\n-}\r\n \r\n-\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756988710438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     #mainCanvas {\r\n       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n       border-radius: 6px;\r\n       height: 100%;\r\n-      width: 100%;\r\n+      width: 50%;\r\n     }\r\n \r\n     #viewer {\r\n       flex: 1;\r\n"
                },
                {
                    "date": 1756988729218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,10 +82,8 @@\n \r\n     #mainCanvas {\r\n       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n       border-radius: 6px;\r\n-      height: 100%;\r\n-      width: 50%;\r\n     }\r\n \r\n     #viewer {\r\n       flex: 1;\r\n"
                },
                {
                    "date": 1756988915656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,115 +123,118 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    // PDF.js worker\r\n-    pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n-      \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n+// PDF.js worker\r\n+pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n+  \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n-    let currentPage = 1;\r\n-    const limitPages = 50; // maximum pages to render\r\n+const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n+const limitPages = 50; // maximum pages to render\r\n \r\n-    const pdfViewer = document.getElementById(\"mainCanvas\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+const pdfViewer = document.getElementById(\"viewer\"); // scrollable container\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    (async function initPDF() {\r\n-      pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n-      const totalPages = Math.min(pdfDoc.numPages, limitPages); // limit pages\r\n-      pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n+(async function initPDF() {\r\n+  pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n+  const totalPages = Math.min(pdfDoc.numPages, limitPages);\r\n+  pageInfo.textContent = `1 / ${totalPages}`;\r\n \r\n-      // Render the first page immediately\r\n-      await renderPage(currentPage);\r\n+  // Create canvas for each page\r\n+  for (let i = 1; i <= totalPages; i++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    canvas.dataset.pageNumber = i;\r\n+    pdfViewer.appendChild(canvas);\r\n+  }\r\n \r\n-      // Render sidebar thumbnails for pages 1 ‚Üí limitPages\r\n-      renderThumbnails(totalPages);\r\n+  // Render first page immediately\r\n+  const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n+  renderPage(1, firstCanvas);\r\n \r\n-      // Enable scroll navigation\r\n-      enableScrollNavigation();\r\n-    })();\r\n+  // Lazy load other pages\r\n+  setupLazyLoading();\r\n \r\n-    // Render a single page in the main canvas\r\n-    async function renderPage(pageNum) {\r\n-      if (pageNum < 1 || pageNum > limitPages) return; // safety check\r\n+  // Render sidebar thumbnails\r\n+  renderThumbnails(totalPages);\r\n+})();\r\n \r\n-      const page = await pdfDoc.getPage(pageNum);\r\n-      const context = pdfViewer.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n+// Render a page inside a given canvas\r\n+async function renderPage(pageNum, canvas) {\r\n+  const page = await pdfDoc.getPage(pageNum);\r\n+  const viewport = page.getViewport({ scale });\r\n+  const context = canvas.getContext(\"2d\");\r\n+  canvas.width = viewport.width;\r\n+  canvas.height = viewport.height;\r\n \r\n-      pdfViewer.height = viewport.height;\r\n-      pdfViewer.width = viewport.width;\r\n+  await page.render({ canvasContext: context, viewport }).promise;\r\n+  canvas.dataset.rendered = \"true\";\r\n+}\r\n \r\n-      await page.render({ canvasContext: context, viewport }).promise;\r\n-      pageInfo.textContent = `${pageNum} / ${Math.min(pdfDoc.numPages, limitPages)}`;\r\n-      currentPage = pageNum;\r\n-    }\r\n-\r\n-    // Render sidebar thumbnails for navigation\r\n-    function renderThumbnails(totalPages) {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = 1; i <= totalPages; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n-\r\n-          canvas.onclick = () => renderPage(i);\r\n-        });\r\n+// Lazy load pages when scrolling\r\n+function setupLazyLoading() {\r\n+  const observer = new IntersectionObserver(entries => {\r\n+    entries.forEach(entry => {\r\n+      if (entry.isIntersecting) {\r\n+        const canvas = entry.target;\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+        if (!canvas.dataset.rendered) renderPage(pageNum, canvas);\r\n       }\r\n-    }\r\n+    });\r\n+  }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-    // Zoom controls\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n-      renderPage(currentPage);\r\n-    };\r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        renderPage(currentPage);\r\n-      }\r\n-    };\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+}\r\n \r\n-    // Close viewer\r\n-    document.getElementById(\"closeBtn\").onclick = () => {\r\n-      document.getElementById(\"container\").style.display = \"none\";\r\n-    };\r\n+// Render sidebar thumbnails\r\n+function renderThumbnails(totalPages) {\r\n+  sidebar.innerHTML = \"\";\r\n+  for (let i = 1; i <= totalPages; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n \r\n-    // Scroll navigation\r\n-    function enableScrollNavigation() {\r\n-      let scrollCooldown = false; // prevent multiple scrolls at once\r\n+      canvas.onclick = () => {\r\n+        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+      };\r\n+    });\r\n+  }\r\n+}\r\n \r\n-      pdfViewer.addEventListener(\"wheel\", (event) => {\r\n-        if (scrollCooldown) return;\r\n+// Zoom controls\r\n+document.getElementById(\"zoomIn\").onclick = () => {\r\n+  scale += 0.2;\r\n+  rerenderVisiblePages();\r\n+};\r\n+document.getElementById(\"zoomOut\").onclick = () => {\r\n+  if (scale > 0.4) {\r\n+    scale -= 0.2;\r\n+    rerenderVisiblePages();\r\n+  }\r\n+};\r\n \r\n-        if (event.deltaY > 0) { // scroll down ‚Üí next page\r\n-          if (currentPage < limitPages) {\r\n-            renderPage(currentPage + 1);\r\n-            scrollCooldown = true;\r\n-          }\r\n-        } else if (event.deltaY < 0) { // scroll up ‚Üí previous page\r\n-          if (currentPage > 1) {\r\n-            renderPage(currentPage - 1);\r\n-            scrollCooldown = true;\r\n-          }\r\n-        }\r\n+// Rerender all visible pages after zoom\r\n+function rerenderVisiblePages() {\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+    const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+    renderPage(pageNum, canvas);\r\n+  });\r\n+}\r\n \r\n-        // Small timeout to avoid multiple page jumps per wheel event\r\n-        setTimeout(() => {\r\n-          scrollCooldown = false;\r\n-        }, 150);\r\n-      });\r\n-    }\r\n+// Close viewer\r\n+document.getElementById(\"closeBtn\").onclick = () => {\r\n+  document.getElementById(\"container\").style.display = \"none\";\r\n+};\r\n \r\n-\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756988934824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,118 +123,115 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-// PDF.js worker\r\n-pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n-  \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n+    // PDF.js worker\r\n+    pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n+      \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n-const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n-const limitPages = 50; // maximum pages to render\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n+    let currentPage = 1;\r\n+    const limitPages = 50; // maximum pages to render\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\"); // scrollable container\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const pdfViewer = document.getElementById(\"mainCanvas\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-(async function initPDF() {\r\n-  pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n-  const totalPages = Math.min(pdfDoc.numPages, limitPages);\r\n-  pageInfo.textContent = `1 / ${totalPages}`;\r\n+    (async function initPDF() {\r\n+      pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n+      const totalPages = Math.min(pdfDoc.numPages, limitPages); // limit pages\r\n+      pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n \r\n-  // Create canvas for each page\r\n-  for (let i = 1; i <= totalPages; i++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    canvas.dataset.pageNumber = i;\r\n-    pdfViewer.appendChild(canvas);\r\n-  }\r\n+      // Render the first page immediately\r\n+      await renderPage(currentPage);\r\n \r\n-  // Render first page immediately\r\n-  const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n-  renderPage(1, firstCanvas);\r\n+      // Render sidebar thumbnails for pages 1 ‚Üí limitPages\r\n+      renderThumbnails(totalPages);\r\n \r\n-  // Lazy load other pages\r\n-  setupLazyLoading();\r\n+      // Enable scroll navigation\r\n+      enableScrollNavigation();\r\n+    })();\r\n \r\n-  // Render sidebar thumbnails\r\n-  renderThumbnails(totalPages);\r\n-})();\r\n+    // Render a single page in the main canvas\r\n+    async function renderPage(pageNum) {\r\n+      if (pageNum < 1 || pageNum > limitPages) return; // safety check\r\n \r\n-// Render a page inside a given canvas\r\n-async function renderPage(pageNum, canvas) {\r\n-  const page = await pdfDoc.getPage(pageNum);\r\n-  const viewport = page.getViewport({ scale });\r\n-  const context = canvas.getContext(\"2d\");\r\n-  canvas.width = viewport.width;\r\n-  canvas.height = viewport.height;\r\n+      const page = await pdfDoc.getPage(pageNum);\r\n+      const context = pdfViewer.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n \r\n-  await page.render({ canvasContext: context, viewport }).promise;\r\n-  canvas.dataset.rendered = \"true\";\r\n-}\r\n+      pdfViewer.height = viewport.height;\r\n+      pdfViewer.width = viewport.width;\r\n \r\n-// Lazy load pages when scrolling\r\n-function setupLazyLoading() {\r\n-  const observer = new IntersectionObserver(entries => {\r\n-    entries.forEach(entry => {\r\n-      if (entry.isIntersecting) {\r\n-        const canvas = entry.target;\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-        if (!canvas.dataset.rendered) renderPage(pageNum, canvas);\r\n+      await page.render({ canvasContext: context, viewport }).promise;\r\n+      pageInfo.textContent = `${pageNum} / ${Math.min(pdfDoc.numPages, limitPages)}`;\r\n+      currentPage = pageNum;\r\n+    }\r\n+\r\n+    // Render sidebar thumbnails for navigation\r\n+    function renderThumbnails(totalPages) {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = 1; i <= totalPages; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n+\r\n+          canvas.onclick = () => renderPage(i);\r\n+        });\r\n       }\r\n-    });\r\n-  }, { root: pdfViewer, threshold: 0.1 });\r\n+    }\r\n \r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-}\r\n+    // Zoom controls\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      renderPage(currentPage);\r\n+    };\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        renderPage(currentPage);\r\n+      }\r\n+    };\r\n \r\n-// Render sidebar thumbnails\r\n-function renderThumbnails(totalPages) {\r\n-  sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= totalPages; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      sidebar.appendChild(canvas);\r\n+    // Close viewer\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n+    };\r\n \r\n-      canvas.onclick = () => {\r\n-        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-      };\r\n-    });\r\n-  }\r\n-}\r\n+    // Scroll navigation\r\n+    function enableScrollNavigation() {\r\n+      let scrollCooldown = false; // prevent multiple scrolls at once\r\n \r\n-// Zoom controls\r\n-document.getElementById(\"zoomIn\").onclick = () => {\r\n-  scale += 0.2;\r\n-  rerenderVisiblePages();\r\n-};\r\n-document.getElementById(\"zoomOut\").onclick = () => {\r\n-  if (scale > 0.4) {\r\n-    scale -= 0.2;\r\n-    rerenderVisiblePages();\r\n-  }\r\n-};\r\n+      pdfViewer.addEventListener(\"wheel\", (event) => {\r\n+        if (scrollCooldown) return;\r\n \r\n-// Rerender all visible pages after zoom\r\n-function rerenderVisiblePages() {\r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-    const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-    renderPage(pageNum, canvas);\r\n-  });\r\n-}\r\n+        if (event.deltaY > 0) { // scroll down ‚Üí next page\r\n+          if (currentPage < limitPages) {\r\n+            renderPage(currentPage + 1);\r\n+            scrollCooldown = true;\r\n+          }\r\n+        } else if (event.deltaY < 0) { // scroll up ‚Üí previous page\r\n+          if (currentPage > 1) {\r\n+            renderPage(currentPage - 1);\r\n+            scrollCooldown = true;\r\n+          }\r\n+        }\r\n \r\n-// Close viewer\r\n-document.getElementById(\"closeBtn\").onclick = () => {\r\n-  document.getElementById(\"container\").style.display = \"none\";\r\n-};\r\n+        // Small timeout to avoid multiple page jumps per wheel event\r\n+        setTimeout(() => {\r\n+          scrollCooldown = false;\r\n+        }, 150);\r\n+      });\r\n+    }\r\n \r\n+\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756989010823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,115 +123,120 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    // PDF.js worker\r\n-    pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n-      \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n+// PDF.js worker\r\n+pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n+  \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n-    let currentPage = 1;\r\n-    const limitPages = 50; // maximum pages to render\r\n+const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n+const limitPages = 50; // max pages to render\r\n \r\n-    const pdfViewer = document.getElementById(\"mainCanvas\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+const pdfViewer = document.getElementById(\"viewer\"); // scrollable container\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    (async function initPDF() {\r\n-      pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n-      const totalPages = Math.min(pdfDoc.numPages, limitPages); // limit pages\r\n-      pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n+(async function initPDF() {\r\n+  pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n+  const totalPages = Math.min(pdfDoc.numPages, limitPages);\r\n+  pageInfo.textContent = `1 / ${totalPages}`;\r\n \r\n-      // Render the first page immediately\r\n-      await renderPage(currentPage);\r\n+  // Create canvas for each page (stacked)\r\n+  for (let i = 1; i <= totalPages; i++) {\r\n+    const canvas = document.createElement(\"canvas\");\r\n+    canvas.classList.add(\"pdf-page\");\r\n+    canvas.dataset.pageNumber = i;\r\n+    canvas.style.display = \"block\"; // ensures stacked vertically\r\n+    pdfViewer.appendChild(canvas);\r\n+  }\r\n \r\n-      // Render sidebar thumbnails for pages 1 ‚Üí limitPages\r\n-      renderThumbnails(totalPages);\r\n+  // Render first page immediately\r\n+  const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n+  renderPage(1, firstCanvas);\r\n \r\n-      // Enable scroll navigation\r\n-      enableScrollNavigation();\r\n-    })();\r\n+  // Lazy load the rest as they come into view\r\n+  setupLazyLoading();\r\n \r\n-    // Render a single page in the main canvas\r\n-    async function renderPage(pageNum) {\r\n-      if (pageNum < 1 || pageNum > limitPages) return; // safety check\r\n+  // Render sidebar thumbnails\r\n+  renderThumbnails(totalPages);\r\n+})();\r\n \r\n-      const page = await pdfDoc.getPage(pageNum);\r\n-      const context = pdfViewer.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n+// Render a page into a canvas\r\n+async function renderPage(pageNum, canvas) {\r\n+  if (!canvas) return;\r\n+  const page = await pdfDoc.getPage(pageNum);\r\n+  const viewport = page.getViewport({ scale });\r\n+  const context = canvas.getContext(\"2d\");\r\n+  canvas.width = viewport.width;\r\n+  canvas.height = viewport.height;\r\n \r\n-      pdfViewer.height = viewport.height;\r\n-      pdfViewer.width = viewport.width;\r\n+  await page.render({ canvasContext: context, viewport }).promise;\r\n+  canvas.dataset.rendered = \"true\";\r\n+}\r\n \r\n-      await page.render({ canvasContext: context, viewport }).promise;\r\n-      pageInfo.textContent = `${pageNum} / ${Math.min(pdfDoc.numPages, limitPages)}`;\r\n-      currentPage = pageNum;\r\n-    }\r\n-\r\n-    // Render sidebar thumbnails for navigation\r\n-    function renderThumbnails(totalPages) {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = 1; i <= totalPages; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n-\r\n-          canvas.onclick = () => renderPage(i);\r\n-        });\r\n+// Lazy loading\r\n+function setupLazyLoading() {\r\n+  const observer = new IntersectionObserver(entries => {\r\n+    entries.forEach(entry => {\r\n+      if (entry.isIntersecting) {\r\n+        const canvas = entry.target;\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+        if (!canvas.dataset.rendered) renderPage(pageNum, canvas);\r\n       }\r\n-    }\r\n+    });\r\n+  }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-    // Zoom controls\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n-      renderPage(currentPage);\r\n-    };\r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        renderPage(currentPage);\r\n-      }\r\n-    };\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+}\r\n \r\n-    // Close viewer\r\n-    document.getElementById(\"closeBtn\").onclick = () => {\r\n-      document.getElementById(\"container\").style.display = \"none\";\r\n-    };\r\n+// Sidebar thumbnails\r\n+function renderThumbnails(totalPages) {\r\n+  sidebar.innerHTML = \"\";\r\n+  for (let i = 1; i <= totalPages; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n \r\n-    // Scroll navigation\r\n-    function enableScrollNavigation() {\r\n-      let scrollCooldown = false; // prevent multiple scrolls at once\r\n+      canvas.onclick = () => {\r\n+        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+      };\r\n+    });\r\n+  }\r\n+}\r\n \r\n-      pdfViewer.addEventListener(\"wheel\", (event) => {\r\n-        if (scrollCooldown) return;\r\n+// Zoom controls\r\n+document.getElementById(\"zoomIn\").onclick = () => {\r\n+  scale += 0.2;\r\n+  rerenderVisiblePages();\r\n+};\r\n+document.getElementById(\"zoomOut\").onclick = () => {\r\n+  if (scale > 0.4) {\r\n+    scale -= 0.2;\r\n+    rerenderVisiblePages();\r\n+  }\r\n+};\r\n \r\n-        if (event.deltaY > 0) { // scroll down ‚Üí next page\r\n-          if (currentPage < limitPages) {\r\n-            renderPage(currentPage + 1);\r\n-            scrollCooldown = true;\r\n-          }\r\n-        } else if (event.deltaY < 0) { // scroll up ‚Üí previous page\r\n-          if (currentPage > 1) {\r\n-            renderPage(currentPage - 1);\r\n-            scrollCooldown = true;\r\n-          }\r\n-        }\r\n+// Rerender all visible pages after zoom\r\n+function rerenderVisiblePages() {\r\n+  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+    const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+    renderPage(pageNum, canvas);\r\n+  });\r\n+}\r\n \r\n-        // Small timeout to avoid multiple page jumps per wheel event\r\n-        setTimeout(() => {\r\n-          scrollCooldown = false;\r\n-        }, 150);\r\n-      });\r\n-    }\r\n+// Close viewer\r\n+document.getElementById(\"closeBtn\").onclick = () => {\r\n+  document.getElementById(\"container\").style.display = \"none\";\r\n+};\r\n \r\n-\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756989017116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,119 +123,119 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-// PDF.js worker\r\n-pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n-  \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n+    // PDF.js worker\r\n+    pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n+      \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n-const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n-const limitPages = 50; // max pages to render\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n+    const limitPages = 50; // max pages to render\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\"); // scrollable container\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const pdfViewer = document.getElementById(\"viewer\"); // scrollable container\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-(async function initPDF() {\r\n-  pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n-  const totalPages = Math.min(pdfDoc.numPages, limitPages);\r\n-  pageInfo.textContent = `1 / ${totalPages}`;\r\n+    (async function initPDF() {\r\n+      pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n+      const totalPages = Math.min(pdfDoc.numPages, limitPages);\r\n+      pageInfo.textContent = `1 / ${totalPages}`;\r\n \r\n-  // Create canvas for each page (stacked)\r\n-  for (let i = 1; i <= totalPages; i++) {\r\n-    const canvas = document.createElement(\"canvas\");\r\n-    canvas.classList.add(\"pdf-page\");\r\n-    canvas.dataset.pageNumber = i;\r\n-    canvas.style.display = \"block\"; // ensures stacked vertically\r\n-    pdfViewer.appendChild(canvas);\r\n-  }\r\n+      // Create canvas for each page (stacked)\r\n+      for (let i = 1; i <= totalPages; i++) {\r\n+        const canvas = document.createElement(\"canvas\");\r\n+        canvas.classList.add(\"pdf-page\");\r\n+        canvas.dataset.pageNumber = i;\r\n+        canvas.style.display = \"block\"; // ensures stacked vertically\r\n+        pdfViewer.appendChild(canvas);\r\n+      }\r\n \r\n-  // Render first page immediately\r\n-  const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n-  renderPage(1, firstCanvas);\r\n+      // Render first page immediately\r\n+      const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n+      renderPage(1, firstCanvas);\r\n \r\n-  // Lazy load the rest as they come into view\r\n-  setupLazyLoading();\r\n+      // Lazy load the rest as they come into view\r\n+      setupLazyLoading();\r\n \r\n-  // Render sidebar thumbnails\r\n-  renderThumbnails(totalPages);\r\n-})();\r\n+      // Render sidebar thumbnails\r\n+      renderThumbnails(totalPages);\r\n+    })();\r\n \r\n-// Render a page into a canvas\r\n-async function renderPage(pageNum, canvas) {\r\n-  if (!canvas) return;\r\n-  const page = await pdfDoc.getPage(pageNum);\r\n-  const viewport = page.getViewport({ scale });\r\n-  const context = canvas.getContext(\"2d\");\r\n-  canvas.width = viewport.width;\r\n-  canvas.height = viewport.height;\r\n+    // Render a page into a canvas\r\n+    async function renderPage(pageNum, canvas) {\r\n+      if (!canvas) return;\r\n+      const page = await pdfDoc.getPage(pageNum);\r\n+      const viewport = page.getViewport({ scale });\r\n+      const context = canvas.getContext(\"2d\");\r\n+      canvas.width = viewport.width;\r\n+      canvas.height = viewport.height;\r\n \r\n-  await page.render({ canvasContext: context, viewport }).promise;\r\n-  canvas.dataset.rendered = \"true\";\r\n-}\r\n+      await page.render({ canvasContext: context, viewport }).promise;\r\n+      canvas.dataset.rendered = \"true\";\r\n+    }\r\n \r\n-// Lazy loading\r\n-function setupLazyLoading() {\r\n-  const observer = new IntersectionObserver(entries => {\r\n-    entries.forEach(entry => {\r\n-      if (entry.isIntersecting) {\r\n-        const canvas = entry.target;\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-        if (!canvas.dataset.rendered) renderPage(pageNum, canvas);\r\n-      }\r\n-    });\r\n-  }, { root: pdfViewer, threshold: 0.1 });\r\n+    // Lazy loading\r\n+    function setupLazyLoading() {\r\n+      const observer = new IntersectionObserver(entries => {\r\n+        entries.forEach(entry => {\r\n+          if (entry.isIntersecting) {\r\n+            const canvas = entry.target;\r\n+            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+            if (!canvas.dataset.rendered) renderPage(pageNum, canvas);\r\n+          }\r\n+        });\r\n+      }, { root: pdfViewer, threshold: 0.1 });\r\n \r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-}\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n+    }\r\n \r\n-// Sidebar thumbnails\r\n-function renderThumbnails(totalPages) {\r\n-  sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= totalPages; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      sidebar.appendChild(canvas);\r\n+    // Sidebar thumbnails\r\n+    function renderThumbnails(totalPages) {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = 1; i <= totalPages; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n \r\n-      canvas.onclick = () => {\r\n-        const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-        if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-      };\r\n-    });\r\n-  }\r\n-}\r\n+          canvas.onclick = () => {\r\n+            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n+            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n+          };\r\n+        });\r\n+      }\r\n+    }\r\n \r\n-// Zoom controls\r\n-document.getElementById(\"zoomIn\").onclick = () => {\r\n-  scale += 0.2;\r\n-  rerenderVisiblePages();\r\n-};\r\n-document.getElementById(\"zoomOut\").onclick = () => {\r\n-  if (scale > 0.4) {\r\n-    scale -= 0.2;\r\n-    rerenderVisiblePages();\r\n-  }\r\n-};\r\n+    // Zoom controls\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      rerenderVisiblePages();\r\n+    };\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        rerenderVisiblePages();\r\n+      }\r\n+    };\r\n \r\n-// Rerender all visible pages after zoom\r\n-function rerenderVisiblePages() {\r\n-  pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-    const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-    renderPage(pageNum, canvas);\r\n-  });\r\n-}\r\n+    // Rerender all visible pages after zoom\r\n+    function rerenderVisiblePages() {\r\n+      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n+        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n+        renderPage(pageNum, canvas);\r\n+      });\r\n+    }\r\n \r\n-// Close viewer\r\n-document.getElementById(\"closeBtn\").onclick = () => {\r\n-  document.getElementById(\"container\").style.display = \"none\";\r\n-};\r\n+    // Close viewer\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n+    };\r\n \r\n   </script>\r\n \r\n </body>\r\n"
                },
                {
                    "date": 1756989027791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,113 +130,108 @@\n \r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n     let scale = 1.5;\r\n-    const limitPages = 50; // max pages to render\r\n+    let currentPage = 1;\r\n+    const limitPages = 50; // maximum pages to render\r\n \r\n-    const pdfViewer = document.getElementById(\"viewer\"); // scrollable container\r\n+    const pdfViewer = document.getElementById(\"mainCanvas\");\r\n     const sidebar = document.getElementById(\"sidebar\");\r\n     const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n     (async function initPDF() {\r\n       pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n-      const totalPages = Math.min(pdfDoc.numPages, limitPages);\r\n-      pageInfo.textContent = `1 / ${totalPages}`;\r\n+      const totalPages = Math.min(pdfDoc.numPages, limitPages); // limit pages\r\n+      pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n \r\n-      // Create canvas for each page (stacked)\r\n-      for (let i = 1; i <= totalPages; i++) {\r\n-        const canvas = document.createElement(\"canvas\");\r\n-        canvas.classList.add(\"pdf-page\");\r\n-        canvas.dataset.pageNumber = i;\r\n-        canvas.style.display = \"block\"; // ensures stacked vertically\r\n-        pdfViewer.appendChild(canvas);\r\n-      }\r\n+      // Render the first page immediately\r\n+      await renderPage(currentPage);\r\n \r\n-      // Render first page immediately\r\n-      const firstCanvas = pdfViewer.querySelector('[data-page-number=\"1\"]');\r\n-      renderPage(1, firstCanvas);\r\n+      // Render sidebar thumbnails for pages 1 ‚Üí limitPages\r\n+      renderThumbnails(totalPages);\r\n \r\n-      // Lazy load the rest as they come into view\r\n-      setupLazyLoading();\r\n-\r\n-      // Render sidebar thumbnails\r\n-      renderThumbnails(totalPages);\r\n+      // Enable scroll navigation\r\n+      enableScrollNavigation();\r\n     })();\r\n \r\n-    // Render a page into a canvas\r\n-    async function renderPage(pageNum, canvas) {\r\n-      if (!canvas) return;\r\n+    // Render a single page in the main canvas\r\n+    async function renderPage(pageNum) {\r\n+      if (pageNum < 1 || pageNum > limitPages) return; // safety check\r\n+\r\n       const page = await pdfDoc.getPage(pageNum);\r\n+      const context = pdfViewer.getContext(\"2d\");\r\n       const viewport = page.getViewport({ scale });\r\n-      const context = canvas.getContext(\"2d\");\r\n-      canvas.width = viewport.width;\r\n-      canvas.height = viewport.height;\r\n \r\n+      pdfViewer.height = viewport.height;\r\n+      pdfViewer.width = viewport.width;\r\n+\r\n       await page.render({ canvasContext: context, viewport }).promise;\r\n-      canvas.dataset.rendered = \"true\";\r\n+      pageInfo.textContent = `${pageNum} / ${Math.min(pdfDoc.numPages, limitPages)}`;\r\n+      currentPage = pageNum;\r\n     }\r\n \r\n-    // Lazy loading\r\n-    function setupLazyLoading() {\r\n-      const observer = new IntersectionObserver(entries => {\r\n-        entries.forEach(entry => {\r\n-          if (entry.isIntersecting) {\r\n-            const canvas = entry.target;\r\n-            const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-            if (!canvas.dataset.rendered) renderPage(pageNum, canvas);\r\n-          }\r\n-        });\r\n-      }, { root: pdfViewer, threshold: 0.1 });\r\n-\r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => observer.observe(canvas));\r\n-    }\r\n-\r\n-    // Sidebar thumbnails\r\n+    // Render sidebar thumbnails for navigation\r\n     function renderThumbnails(totalPages) {\r\n       sidebar.innerHTML = \"\";\r\n       for (let i = 1; i <= totalPages; i++) {\r\n         pdfDoc.getPage(i).then(page => {\r\n           const viewport = page.getViewport({ scale: 0.2 });\r\n           const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n           canvas.height = viewport.height;\r\n           canvas.width = viewport.width;\r\n-          const ctx = canvas.getContext(\"2d\");\r\n           page.render({ canvasContext: ctx, viewport });\r\n           sidebar.appendChild(canvas);\r\n \r\n-          canvas.onclick = () => {\r\n-            const target = pdfViewer.querySelector(`[data-page-number='${i}']`);\r\n-            if (target) target.scrollIntoView({ behavior: \"smooth\" });\r\n-          };\r\n+          canvas.onclick = () => renderPage(i);\r\n         });\r\n       }\r\n     }\r\n \r\n     // Zoom controls\r\n     document.getElementById(\"zoomIn\").onclick = () => {\r\n       scale += 0.2;\r\n-      rerenderVisiblePages();\r\n+      renderPage(currentPage);\r\n     };\r\n     document.getElementById(\"zoomOut\").onclick = () => {\r\n       if (scale > 0.4) {\r\n         scale -= 0.2;\r\n-        rerenderVisiblePages();\r\n+        renderPage(currentPage);\r\n       }\r\n     };\r\n \r\n-    // Rerender all visible pages after zoom\r\n-    function rerenderVisiblePages() {\r\n-      pdfViewer.querySelectorAll(\".pdf-page\").forEach(canvas => {\r\n-        const pageNum = parseInt(canvas.dataset.pageNumber, 10);\r\n-        renderPage(pageNum, canvas);\r\n-      });\r\n-    }\r\n-\r\n     // Close viewer\r\n     document.getElementById(\"closeBtn\").onclick = () => {\r\n       document.getElementById(\"container\").style.display = \"none\";\r\n     };\r\n \r\n+    // Scroll navigation\r\n+    function enableScrollNavigation() {\r\n+      let scrollCooldown = false; // prevent multiple scrolls at once\r\n+\r\n+      pdfViewer.addEventListener(\"wheel\", (event) => {\r\n+        if (scrollCooldown) return;\r\n+\r\n+        if (event.deltaY > 0) { // scroll down ‚Üí next page\r\n+          if (currentPage < limitPages) {\r\n+            renderPage(currentPage + 1);\r\n+            scrollCooldown = true;\r\n+          }\r\n+        } else if (event.deltaY < 0) { // scroll up ‚Üí previous page\r\n+          if (currentPage > 1) {\r\n+            renderPage(currentPage - 1);\r\n+            scrollCooldown = true;\r\n+          }\r\n+        }\r\n+\r\n+        // Small timeout to avoid multiple page jumps per wheel event\r\n+        setTimeout(() => {\r\n+          scrollCooldown = false;\r\n+        }, 150);\r\n+      });\r\n+    }\r\n+\r\n+\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756989087869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,115 +123,113 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-    // PDF.js worker\r\n-    pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n-      \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n+// PDF.js worker\r\n+pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n+  \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n-    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-    let pdfDoc = null;\r\n-    let scale = 1.5;\r\n-    let currentPage = 1;\r\n-    const limitPages = 50; // maximum pages to render\r\n+const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+let pdfDoc = null;\r\n+let scale = 1.5;\r\n+let currentPage = 1;\r\n+const limitPages = 50; // maximum pages to render\r\n \r\n-    const pdfViewer = document.getElementById(\"mainCanvas\");\r\n-    const sidebar = document.getElementById(\"sidebar\");\r\n-    const pageInfo = document.getElementById(\"pageInfo\");\r\n+const pdfViewer = document.getElementById(\"viewer\"); // scrollable container\r\n+const mainCanvas = document.getElementById(\"mainCanvas\");\r\n+const sidebar = document.getElementById(\"sidebar\");\r\n+const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-    (async function initPDF() {\r\n-      pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n-      const totalPages = Math.min(pdfDoc.numPages, limitPages); // limit pages\r\n-      pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n+(async function initPDF() {\r\n+  pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n+  const totalPages = Math.min(pdfDoc.numPages, limitPages); // limit pages\r\n+  pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n \r\n-      // Render the first page immediately\r\n-      await renderPage(currentPage);\r\n+  // Set container height proportional to pages\r\n+  pdfViewer.style.height = `${totalPages * 1000}px`; // 1000px per page (approx)\r\n \r\n-      // Render sidebar thumbnails for pages 1 ‚Üí limitPages\r\n-      renderThumbnails(totalPages);\r\n+  // Render first page immediately\r\n+  await renderPage(currentPage);\r\n \r\n-      // Enable scroll navigation\r\n-      enableScrollNavigation();\r\n-    })();\r\n+  // Render sidebar thumbnails\r\n+  renderThumbnails(totalPages);\r\n \r\n-    // Render a single page in the main canvas\r\n-    async function renderPage(pageNum) {\r\n-      if (pageNum < 1 || pageNum > limitPages) return; // safety check\r\n+  // Enable scroll navigation\r\n+  enableScrollNavigation(totalPages);\r\n+})();\r\n \r\n-      const page = await pdfDoc.getPage(pageNum);\r\n-      const context = pdfViewer.getContext(\"2d\");\r\n-      const viewport = page.getViewport({ scale });\r\n+// Render a single page in the main canvas\r\n+async function renderPage(pageNum) {\r\n+  if (pageNum < 1 || pageNum > limitPages) return;\r\n \r\n-      pdfViewer.height = viewport.height;\r\n-      pdfViewer.width = viewport.width;\r\n+  const page = await pdfDoc.getPage(pageNum);\r\n+  const context = mainCanvas.getContext(\"2d\");\r\n+  const viewport = page.getViewport({ scale });\r\n \r\n-      await page.render({ canvasContext: context, viewport }).promise;\r\n-      pageInfo.textContent = `${pageNum} / ${Math.min(pdfDoc.numPages, limitPages)}`;\r\n-      currentPage = pageNum;\r\n-    }\r\n+  mainCanvas.height = viewport.height;\r\n+  mainCanvas.width = viewport.width;\r\n \r\n-    // Render sidebar thumbnails for navigation\r\n-    function renderThumbnails(totalPages) {\r\n-      sidebar.innerHTML = \"\";\r\n-      for (let i = 1; i <= totalPages; i++) {\r\n-        pdfDoc.getPage(i).then(page => {\r\n-          const viewport = page.getViewport({ scale: 0.2 });\r\n-          const canvas = document.createElement(\"canvas\");\r\n-          const ctx = canvas.getContext(\"2d\");\r\n-          canvas.height = viewport.height;\r\n-          canvas.width = viewport.width;\r\n-          page.render({ canvasContext: ctx, viewport });\r\n-          sidebar.appendChild(canvas);\r\n+  await page.render({ canvasContext: context, viewport }).promise;\r\n+  pageInfo.textContent = `${pageNum} / ${Math.min(pdfDoc.numPages, limitPages)}`;\r\n+  currentPage = pageNum;\r\n+}\r\n \r\n-          canvas.onclick = () => renderPage(i);\r\n-        });\r\n-      }\r\n-    }\r\n+// Render sidebar thumbnails\r\n+function renderThumbnails(totalPages) {\r\n+  sidebar.innerHTML = \"\";\r\n+  for (let i = 1; i <= totalPages; i++) {\r\n+    pdfDoc.getPage(i).then(page => {\r\n+      const viewport = page.getViewport({ scale: 0.2 });\r\n+      const canvas = document.createElement(\"canvas\");\r\n+      const ctx = canvas.getContext(\"2d\");\r\n+      canvas.height = viewport.height;\r\n+      canvas.width = viewport.width;\r\n+      page.render({ canvasContext: ctx, viewport });\r\n+      sidebar.appendChild(canvas);\r\n \r\n-    // Zoom controls\r\n-    document.getElementById(\"zoomIn\").onclick = () => {\r\n-      scale += 0.2;\r\n-      renderPage(currentPage);\r\n-    };\r\n-    document.getElementById(\"zoomOut\").onclick = () => {\r\n-      if (scale > 0.4) {\r\n-        scale -= 0.2;\r\n-        renderPage(currentPage);\r\n-      }\r\n-    };\r\n+      canvas.onclick = () => scrollToPage(i);\r\n+    });\r\n+  }\r\n+}\r\n \r\n-    // Close viewer\r\n-    document.getElementById(\"closeBtn\").onclick = () => {\r\n-      document.getElementById(\"container\").style.display = \"none\";\r\n-    };\r\n+// Scroll navigation with scrollbar\r\n+function enableScrollNavigation(totalPages) {\r\n+  pdfViewer.addEventListener(\"scroll\", () => {\r\n+    const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n+    const scrollRatio = pdfViewer.scrollTop / containerHeight;\r\n+    const pageNum = Math.min(\r\n+      limitPages,\r\n+      Math.max(1, Math.round(scrollRatio * totalPages))\r\n+    );\r\n+    if (pageNum !== currentPage) renderPage(pageNum);\r\n+  });\r\n+}\r\n \r\n-    // Scroll navigation\r\n-    function enableScrollNavigation() {\r\n-      let scrollCooldown = false; // prevent multiple scrolls at once\r\n+// Scroll to specific page\r\n+function scrollToPage(pageNum) {\r\n+  const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n+  const scrollTop = ((pageNum - 1) / limitPages) * containerHeight;\r\n+  pdfViewer.scrollTop = scrollTop;\r\n+  renderPage(pageNum);\r\n+}\r\n \r\n-      pdfViewer.addEventListener(\"wheel\", (event) => {\r\n-        if (scrollCooldown) return;\r\n+// Zoom controls\r\n+document.getElementById(\"zoomIn\").onclick = () => {\r\n+  scale += 0.2;\r\n+  renderPage(currentPage);\r\n+};\r\n+document.getElementById(\"zoomOut\").onclick = () => {\r\n+  if (scale > 0.4) {\r\n+    scale -= 0.2;\r\n+    renderPage(currentPage);\r\n+  }\r\n+};\r\n \r\n-        if (event.deltaY > 0) { // scroll down ‚Üí next page\r\n-          if (currentPage < limitPages) {\r\n-            renderPage(currentPage + 1);\r\n-            scrollCooldown = true;\r\n-          }\r\n-        } else if (event.deltaY < 0) { // scroll up ‚Üí previous page\r\n-          if (currentPage > 1) {\r\n-            renderPage(currentPage - 1);\r\n-            scrollCooldown = true;\r\n-          }\r\n-        }\r\n+// Close viewer\r\n+document.getElementById(\"closeBtn\").onclick = () => {\r\n+  document.getElementById(\"container\").style.display = \"none\";\r\n+};\r\n \r\n-        // Small timeout to avoid multiple page jumps per wheel event\r\n-        setTimeout(() => {\r\n-          scrollCooldown = false;\r\n-        }, 150);\r\n-      });\r\n-    }\r\n-\r\n-\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756989133094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,113 +123,115 @@\n \r\n   <!-- PDF.js -->\r\n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js\"></script>\r\n   <script>\r\n-// PDF.js worker\r\n-pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n-  \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n+    // PDF.js worker\r\n+    pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n+      \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n-const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n-let pdfDoc = null;\r\n-let scale = 1.5;\r\n-let currentPage = 1;\r\n-const limitPages = 50; // maximum pages to render\r\n+    const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n+    let pdfDoc = null;\r\n+    let scale = 1.5;\r\n+    let currentPage = 1;\r\n+    const limitPages = 50; // maximum pages to render\r\n \r\n-const pdfViewer = document.getElementById(\"viewer\"); // scrollable container\r\n-const mainCanvas = document.getElementById(\"mainCanvas\");\r\n-const sidebar = document.getElementById(\"sidebar\");\r\n-const pageInfo = document.getElementById(\"pageInfo\");\r\n+    const pdfViewer = document.getElementById(\"mainCanvas\");\r\n+    const sidebar = document.getElementById(\"sidebar\");\r\n+    const pageInfo = document.getElementById(\"pageInfo\");\r\n \r\n-(async function initPDF() {\r\n-  pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n-  const totalPages = Math.min(pdfDoc.numPages, limitPages); // limit pages\r\n-  pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n+    (async function initPDF() {\r\n+      pdfDoc = await pdfjsLib.getDocument(url).promise;\r\n+      const totalPages = Math.min(pdfDoc.numPages, limitPages); // limit pages\r\n+      pageInfo.textContent = `${currentPage} / ${totalPages}`;\r\n \r\n-  // Set container height proportional to pages\r\n-  pdfViewer.style.height = `${totalPages * 1000}px`; // 1000px per page (approx)\r\n+      // Render the first page immediately\r\n+      await renderPage(currentPage);\r\n \r\n-  // Render first page immediately\r\n-  await renderPage(currentPage);\r\n+      // Render sidebar thumbnails for pages 1 ‚Üí limitPages\r\n+      renderThumbnails(totalPages);\r\n \r\n-  // Render sidebar thumbnails\r\n-  renderThumbnails(totalPages);\r\n+      // Enable scroll navigation\r\n+      enableScrollNavigation();\r\n+    })();\r\n \r\n-  // Enable scroll navigation\r\n-  enableScrollNavigation(totalPages);\r\n-})();\r\n+    // Render a single page in the main canvas\r\n+    async function renderPage(pageNum) {\r\n+      if (pageNum < 1 || pageNum > limitPages) return; // safety check\r\n \r\n-// Render a single page in the main canvas\r\n-async function renderPage(pageNum) {\r\n-  if (pageNum < 1 || pageNum > limitPages) return;\r\n+      const page = await pdfDoc.getPage(pageNum);\r\n+      const context = pdfViewer.getContext(\"2d\");\r\n+      const viewport = page.getViewport({ scale });\r\n \r\n-  const page = await pdfDoc.getPage(pageNum);\r\n-  const context = mainCanvas.getContext(\"2d\");\r\n-  const viewport = page.getViewport({ scale });\r\n+      pdfViewer.height = viewport.height;\r\n+      pdfViewer.width = viewport.width;\r\n \r\n-  mainCanvas.height = viewport.height;\r\n-  mainCanvas.width = viewport.width;\r\n+      await page.render({ canvasContext: context, viewport }).promise;\r\n+      pageInfo.textContent = `${pageNum} / ${Math.min(pdfDoc.numPages, limitPages)}`;\r\n+      currentPage = pageNum;\r\n+    }\r\n \r\n-  await page.render({ canvasContext: context, viewport }).promise;\r\n-  pageInfo.textContent = `${pageNum} / ${Math.min(pdfDoc.numPages, limitPages)}`;\r\n-  currentPage = pageNum;\r\n-}\r\n+    // Render sidebar thumbnails for navigation\r\n+    function renderThumbnails(totalPages) {\r\n+      sidebar.innerHTML = \"\";\r\n+      for (let i = 1; i <= totalPages; i++) {\r\n+        pdfDoc.getPage(i).then(page => {\r\n+          const viewport = page.getViewport({ scale: 0.2 });\r\n+          const canvas = document.createElement(\"canvas\");\r\n+          const ctx = canvas.getContext(\"2d\");\r\n+          canvas.height = viewport.height;\r\n+          canvas.width = viewport.width;\r\n+          page.render({ canvasContext: ctx, viewport });\r\n+          sidebar.appendChild(canvas);\r\n \r\n-// Render sidebar thumbnails\r\n-function renderThumbnails(totalPages) {\r\n-  sidebar.innerHTML = \"\";\r\n-  for (let i = 1; i <= totalPages; i++) {\r\n-    pdfDoc.getPage(i).then(page => {\r\n-      const viewport = page.getViewport({ scale: 0.2 });\r\n-      const canvas = document.createElement(\"canvas\");\r\n-      const ctx = canvas.getContext(\"2d\");\r\n-      canvas.height = viewport.height;\r\n-      canvas.width = viewport.width;\r\n-      page.render({ canvasContext: ctx, viewport });\r\n-      sidebar.appendChild(canvas);\r\n+          canvas.onclick = () => renderPage(i);\r\n+        });\r\n+      }\r\n+    }\r\n \r\n-      canvas.onclick = () => scrollToPage(i);\r\n-    });\r\n-  }\r\n-}\r\n+    // Zoom controls\r\n+    document.getElementById(\"zoomIn\").onclick = () => {\r\n+      scale += 0.2;\r\n+      renderPage(currentPage);\r\n+    };\r\n+    document.getElementById(\"zoomOut\").onclick = () => {\r\n+      if (scale > 0.4) {\r\n+        scale -= 0.2;\r\n+        renderPage(currentPage);\r\n+      }\r\n+    };\r\n \r\n-// Scroll navigation with scrollbar\r\n-function enableScrollNavigation(totalPages) {\r\n-  pdfViewer.addEventListener(\"scroll\", () => {\r\n-    const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n-    const scrollRatio = pdfViewer.scrollTop / containerHeight;\r\n-    const pageNum = Math.min(\r\n-      limitPages,\r\n-      Math.max(1, Math.round(scrollRatio * totalPages))\r\n-    );\r\n-    if (pageNum !== currentPage) renderPage(pageNum);\r\n-  });\r\n-}\r\n+    // Close viewer\r\n+    document.getElementById(\"closeBtn\").onclick = () => {\r\n+      document.getElementById(\"container\").style.display = \"none\";\r\n+    };\r\n \r\n-// Scroll to specific page\r\n-function scrollToPage(pageNum) {\r\n-  const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n-  const scrollTop = ((pageNum - 1) / limitPages) * containerHeight;\r\n-  pdfViewer.scrollTop = scrollTop;\r\n-  renderPage(pageNum);\r\n-}\r\n+    // Scroll navigation\r\n+    function enableScrollNavigation() {\r\n+      let scrollCooldown = false; // prevent multiple scrolls at once\r\n \r\n-// Zoom controls\r\n-document.getElementById(\"zoomIn\").onclick = () => {\r\n-  scale += 0.2;\r\n-  renderPage(currentPage);\r\n-};\r\n-document.getElementById(\"zoomOut\").onclick = () => {\r\n-  if (scale > 0.4) {\r\n-    scale -= 0.2;\r\n-    renderPage(currentPage);\r\n-  }\r\n-};\r\n+      pdfViewer.addEventListener(\"wheel\", (event) => {\r\n+        if (scrollCooldown) return;\r\n \r\n-// Close viewer\r\n-document.getElementById(\"closeBtn\").onclick = () => {\r\n-  document.getElementById(\"container\").style.display = \"none\";\r\n-};\r\n+        if (event.deltaY > 0) { // scroll down ‚Üí next page\r\n+          if (currentPage < limitPages) {\r\n+            renderPage(currentPage + 1);\r\n+            scrollCooldown = true;\r\n+          }\r\n+        } else if (event.deltaY < 0) { // scroll up ‚Üí previous page\r\n+          if (currentPage > 1) {\r\n+            renderPage(currentPage - 1);\r\n+            scrollCooldown = true;\r\n+          }\r\n+        }\r\n \r\n+        // Small timeout to avoid multiple page jumps per wheel event\r\n+        setTimeout(() => {\r\n+          scrollCooldown = false;\r\n+        }, 150);\r\n+      });\r\n+    }\r\n+\r\n+\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756989157856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,8 +230,30 @@\n       });\r\n     }\r\n \r\n \r\n+    // Scroll navigation for PDF viewer\r\n+function enableScrollNavigation(totalPages) {\r\n+  pdfViewer.addEventListener(\"scroll\", () => {\r\n+    const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n+    const scrollRatio = pdfViewer.scrollTop / containerHeight;\r\n+    const pageNum = Math.min(\r\n+      limitPages,\r\n+      Math.max(1, Math.round(scrollRatio * totalPages))\r\n+    );\r\n+    if (pageNum !== currentPage) renderPage(pageNum);\r\n+  });\r\n+}\r\n+\r\n+// Optional: scroll to a specific page (e.g., thumbnail click)\r\n+function scrollToPage(pageNum) {\r\n+  const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n+  pdfViewer.scrollTop = ((pageNum - 1) / limitPages) * containerHeight;\r\n+  renderPage(pageNum);\r\n+}\r\n+\r\n+\r\n+\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756989170427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,29 +231,32 @@\n     }\r\n \r\n \r\n     // Scroll navigation for PDF viewer\r\n-function enableScrollNavigation(totalPages) {\r\n-  pdfViewer.addEventListener(\"scroll\", () => {\r\n-    const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n-    const scrollRatio = pdfViewer.scrollTop / containerHeight;\r\n-    const pageNum = Math.min(\r\n-      limitPages,\r\n-      Math.max(1, Math.round(scrollRatio * totalPages))\r\n-    );\r\n-    if (pageNum !== currentPage) renderPage(pageNum);\r\n-  });\r\n-}\r\n+    function enableScrollNavigation(totalPages) {\r\n+      pdfViewer.addEventListener(\"scroll\", () => {\r\n+        const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n+        const scrollRatio = pdfViewer.scrollTop / containerHeight;\r\n+        const pageNum = Math.min(\r\n+          limitPages,\r\n+          Math.max(1, Math.round(scrollRatio * totalPages))\r\n+        );\r\n+        if (pageNum !== currentPage) renderPage(pageNum);\r\n+      });\r\n+    }\r\n \r\n-// Optional: scroll to a specific page (e.g., thumbnail click)\r\n-function scrollToPage(pageNum) {\r\n-  const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n-  pdfViewer.scrollTop = ((pageNum - 1) / limitPages) * containerHeight;\r\n-  renderPage(pageNum);\r\n-}\r\n+    // Optional: scroll to a specific page (e.g., thumbnail click)\r\n+    function scrollToPage(pageNum) {\r\n+      const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n+      pdfViewer.scrollTop = ((pageNum - 1) / limitPages) * containerHeight;\r\n+      renderPage(pageNum);\r\n+    }\r\n \r\n+    enableScrollNavigation(Math.min(pdfDoc.numPages, limitPages));\r\n \r\n \r\n+\r\n+\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756989222205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,32 +231,45 @@\n     }\r\n \r\n \r\n     // Scroll navigation for PDF viewer\r\n-    function enableScrollNavigation(totalPages) {\r\n-      pdfViewer.addEventListener(\"scroll\", () => {\r\n-        const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n-        const scrollRatio = pdfViewer.scrollTop / containerHeight;\r\n-        const pageNum = Math.min(\r\n-          limitPages,\r\n-          Math.max(1, Math.round(scrollRatio * totalPages))\r\n-        );\r\n-        if (pageNum !== currentPage) renderPage(pageNum);\r\n-      });\r\n-    }\r\n+function enableScrollNavigation(totalPages) {\r\n+  let scrollCooldown = false;\r\n \r\n-    // Optional: scroll to a specific page (e.g., thumbnail click)\r\n-    function scrollToPage(pageNum) {\r\n-      const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n-      pdfViewer.scrollTop = ((pageNum - 1) / limitPages) * containerHeight;\r\n-      renderPage(pageNum);\r\n+  // Scroll with mouse wheel ‚Üí next/previous page\r\n+  pdfViewer.addEventListener(\"wheel\", (event) => {\r\n+    if (scrollCooldown) return;\r\n+\r\n+    if (event.deltaY > 0 && currentPage < limitPages) {\r\n+      renderPage(currentPage + 1);\r\n+      scrollCooldown = true;\r\n+    } else if (event.deltaY < 0 && currentPage > 1) {\r\n+      renderPage(currentPage - 1);\r\n+      scrollCooldown = true;\r\n     }\r\n \r\n-    enableScrollNavigation(Math.min(pdfDoc.numPages, limitPages));\r\n+    setTimeout(() => { scrollCooldown = false; }, 150);\r\n+  });\r\n \r\n+  // Scroll bar navigation ‚Üí proportional page\r\n+  pdfViewer.addEventListener(\"scroll\", () => {\r\n+    const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n+    if (containerHeight <= 0) return;\r\n+    const scrollRatio = pdfViewer.scrollTop / containerHeight;\r\n+    const pageNum = Math.min(\r\n+      limitPages,\r\n+      Math.max(1, Math.round(scrollRatio * totalPages))\r\n+    );\r\n+    if (pageNum !== currentPage) renderPage(pageNum);\r\n+  });\r\n+}\r\n \r\n+// Initialize\r\n+enableScrollNavigation(Math.min(pdfDoc.numPages, limitPages));\r\n \r\n \r\n+\r\n+\r\n   </script>\r\n \r\n </body>\r\n \r\n"
                },
                {
                    "date": 1756989305311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,9 @@\n       display: flex;\r\n       flex-direction: column;\r\n       justify-content: center;\r\n       align-items: center;\r\n+      mar\r\n       background: #eaeaea;\r\n       overflow: auto;\r\n     }\r\n \r\n@@ -231,41 +232,41 @@\n     }\r\n \r\n \r\n     // Scroll navigation for PDF viewer\r\n-function enableScrollNavigation(totalPages) {\r\n-  let scrollCooldown = false;\r\n+    function enableScrollNavigation(totalPages) {\r\n+      let scrollCooldown = false;\r\n \r\n-  // Scroll with mouse wheel ‚Üí next/previous page\r\n-  pdfViewer.addEventListener(\"wheel\", (event) => {\r\n-    if (scrollCooldown) return;\r\n+      // Scroll with mouse wheel ‚Üí next/previous page\r\n+      pdfViewer.addEventListener(\"wheel\", (event) => {\r\n+        if (scrollCooldown) return;\r\n \r\n-    if (event.deltaY > 0 && currentPage < limitPages) {\r\n-      renderPage(currentPage + 1);\r\n-      scrollCooldown = true;\r\n-    } else if (event.deltaY < 0 && currentPage > 1) {\r\n-      renderPage(currentPage - 1);\r\n-      scrollCooldown = true;\r\n-    }\r\n+        if (event.deltaY > 0 && currentPage < limitPages) {\r\n+          renderPage(currentPage + 1);\r\n+          scrollCooldown = true;\r\n+        } else if (event.deltaY < 0 && currentPage > 1) {\r\n+          renderPage(currentPage - 1);\r\n+          scrollCooldown = true;\r\n+        }\r\n \r\n-    setTimeout(() => { scrollCooldown = false; }, 150);\r\n-  });\r\n+        setTimeout(() => { scrollCooldown = false; }, 150);\r\n+      });\r\n \r\n-  // Scroll bar navigation ‚Üí proportional page\r\n-  pdfViewer.addEventListener(\"scroll\", () => {\r\n-    const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n-    if (containerHeight <= 0) return;\r\n-    const scrollRatio = pdfViewer.scrollTop / containerHeight;\r\n-    const pageNum = Math.min(\r\n-      limitPages,\r\n-      Math.max(1, Math.round(scrollRatio * totalPages))\r\n-    );\r\n-    if (pageNum !== currentPage) renderPage(pageNum);\r\n-  });\r\n-}\r\n+      // Scroll bar navigation ‚Üí proportional page\r\n+      pdfViewer.addEventListener(\"scroll\", () => {\r\n+        const containerHeight = pdfViewer.scrollHeight - pdfViewer.clientHeight;\r\n+        if (containerHeight <= 0) return;\r\n+        const scrollRatio = pdfViewer.scrollTop / containerHeight;\r\n+        const pageNum = Math.min(\r\n+          limitPages,\r\n+          Math.max(1, Math.round(scrollRatio * totalPages))\r\n+        );\r\n+        if (pageNum !== currentPage) renderPage(pageNum);\r\n+      });\r\n+    }\r\n \r\n-// Initialize\r\n-enableScrollNavigation(Math.min(pdfDoc.numPages, limitPages));\r\n+    // Initialize\r\n+    enableScrollNavigation(Math.min(pdfDoc.numPages, limitPages));\r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1756989318596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n       display: flex;\r\n       flex-direction: column;\r\n       justify-content: center;\r\n       align-items: center;\r\n-      mar\r\n+      padd\r\n       background: #eaeaea;\r\n       overflow: auto;\r\n     }\r\n \r\n"
                },
                {
                    "date": 1756989324466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n       display: flex;\r\n       flex-direction: column;\r\n       justify-content: center;\r\n       align-items: center;\r\n-      padd\r\n+      padding-top: 4rem;\r\n       background: #eaeaea;\r\n       overflow: auto;\r\n     }\r\n \r\n"
                },
                {
                    "date": 1756989338726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,8 @@\n       display: flex;\r\n       flex-direction: column;\r\n       justify-content: center;\r\n       align-items: center;\r\n-      padding-top: 4rem;\r\n       background: #eaeaea;\r\n       overflow: auto;\r\n     }\r\n \r\n"
                },
                {
                    "date": 1756989419965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n       \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n-    let scale = 1.5;\r\n+    let scale = 2.0;\r\n     let currentPage = 1;\r\n     const limitPages = 50; // maximum pages to render\r\n \r\n     const pdfViewer = document.getElementById(\"mainCanvas\");\r\n"
                },
                {
                    "date": 1756989426163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n       \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n-    let scale = 2.0;\r\n+    let scale = 1;\r\n     let currentPage = 1;\r\n     const limitPages = 50; // maximum pages to render\r\n \r\n     const pdfViewer = document.getElementById(\"mainCanvas\");\r\n"
                },
                {
                    "date": 1756989434368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n       \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n-    let scale = 1;\r\n+    let scale = 0.7;\r\n     let currentPage = 1;\r\n     const limitPages = 50; // maximum pages to render\r\n \r\n     const pdfViewer = document.getElementById(\"mainCanvas\");\r\n"
                },
                {
                    "date": 1756989440240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n       \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n     const url = \"books-pdf/[Herb_Schildt]_Herb_Schildt's_Java_Programming_Coo(libcats.org).pdf\";\r\n     let pdfDoc = null;\r\n-    let scale = 0.7;\r\n+    let scale = 0.9;\r\n     let currentPage = 1;\r\n     const limitPages = 50; // maximum pages to render\r\n \r\n     const pdfViewer = document.getElementById(\"mainCanvas\");\r\n"
                },
                {
                    "date": 1756989547807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,9 @@\n \r\n     #mainCanvas {\r\n       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n       border-radius: 6px;\r\n+      padding: ;\r\n     }\r\n \r\n     #viewer {\r\n       flex: 1;\r\n"
                },
                {
                    "date": 1756989558304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,8 @@\n \r\n     #mainCanvas {\r\n       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n       border-radius: 6px;\r\n-      padding: ;\r\n     }\r\n \r\n     #viewer {\r\n       flex: 1;\r\n"
                },
                {
                    "date": 1756989588637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,8 @@\n       flex: 1;\r\n       overflow-y: auto;\r\n       /* ‚úÖ enables vertical scroll */\r\n       background: #eaeaea;\r\n-      padding: 20px;\r\n     }\r\n   </style>\r\n </head>\r\n \r\n"
                },
                {
                    "date": 1756989594987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,8 +89,9 @@\n       flex: 1;\r\n       overflow-y: auto;\r\n       /* ‚úÖ enables vertical scroll */\r\n       background: #eaeaea;\r\n+      padding: 20px;\r\n     }\r\n   </style>\r\n </head>\r\n \r\n"
                },
                {
                    "date": 1756989611405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n       color: #fff;\r\n       display: flex;\r\n       justify-content: space-between;\r\n       align-items: center;\r\n-      padding: 10px 20px;\r\n+      padding:  20px;\r\n     }\r\n \r\n     #topbar h1 {\r\n       margin: 0;\r\n"
                },
                {
                    "date": 1756989624514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n       color: #fff;\r\n       display: flex;\r\n       justify-content: space-between;\r\n       align-items: center;\r\n-      padding:  20px;\r\n+      padding: 10px 20px;\r\n     }\r\n \r\n     #topbar h1 {\r\n       margin: 0;\r\n"
                },
                {
                    "date": 1756989660394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n \r\n     #mainCanvas {\r\n       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n       border-radius: 6px;\r\n-      pad\r\n+      padding: ;\r\n     }\r\n \r\n     #viewer {\r\n       flex: 1;\r\n"
                },
                {
                    "date": 1756995179592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,26 +128,26 @@\n     // PDF.js worker\r\n     pdfjsLib.GlobalWorkerOptions.workerSrc =\r\n       \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js\";\r\n \r\n-   const previewBooks = JSON.parse(localStorage.getItem(\"previewBooks\")) || [];\r\n+    const previewBooks = JSON.parse(localStorage.getItem(\"previewBooks\")) || [];\r\n \r\n-if (previewBooks.length > 0) {\r\n-  const bookTitle = previewBooks[0]; // get first book from previewBooks\r\n+    if (previewBooks.length > 0) {\r\n+      const bookTitle = previewBooks[0]; // get first book from previewBooks\r\n \r\n-  fetch(\"all-books.json\")\r\n-    .then(res => res.json())\r\n-    .then(allBooks => {\r\n-      const book = allBooks.find(b => b.title === bookTitle);\r\n-      if (book) {\r\n-        const pdfPath = book.pdf; // ‚úÖ PDF path\r\n-        console.log(\"PDF path:\", pdfPath);\r\n-        // use pdfPath in your existing PDF.js logic\r\n-      } else {\r\n-        console.warn(\"Book not found in all-books.json\");\r\n-      }\r\n-    });\r\n-}\r\n+      fetch(\"all-books.json\")\r\n+        .then(res => res.json())\r\n+        .then(allBooks => {\r\n+          const book = allBooks.find(b => b.title === bookTitle);\r\n+          if (book) {\r\n+            const pdfPath = book.pdf; // ‚úÖ PDF path\r\n+            console.log(\"PDF path:\", pdfPath);\r\n+            // use pdfPath in your existing PDF.js logic\r\n+          } else {\r\n+            console.warn(\"Book not found in all-books.json\");\r\n+          }\r\n+        });\r\n+    }\r\n \r\n     let pdfDoc = null;\r\n     let scale = 0.9;\r\n     let currentPage = 1;\r\n"
                }
            ],
            "date": 1756803159383,
            "name": "Commit-0",
            "content": "<!-- Modal Background -->\r\n<div class=\"modal-overlay\">\r\n  <div class=\"modal\">\r\n    <div class=\"modal-content\">\r\n      \r\n      <!-- Book Cover -->\r\n      <div class=\"book-image\">\r\n        <img src=\"img/java-book.jpg\" alt=\"Java: The Complete Reference\">\r\n      </div>\r\n\r\n      <!-- Book Info -->\r\n      <div class=\"book-details\">\r\n        <h2>Java: The Complete Reference</h2>\r\n        <p class=\"price\">$54.99</p>\r\n        <p class=\"rating\">‚≠ê ‚≠ê ‚≠ê ‚≠ê ‚≠ê 4.7/5</p>\r\n\r\n        <p class=\"description\">\r\n          Comprehensive coverage of C++ programming language, including modern \r\n          C++ features, templates, and STL.\r\n        </p>\r\n\r\n        <div class=\"meta\">\r\n          <p><strong>Year:</strong> 2021</p>\r\n          <p><strong>Pages:</strong> 1248</p>\r\n          <p><strong>ISBN:</strong> 978-1260454468</p>\r\n          <p><strong>Category:</strong> JAVA</p>\r\n        </div>\r\n\r\n        <!-- Action Buttons -->\r\n        <div class=\"actions\">\r\n          <button class=\"preview\">üëÅ Preview</button>\r\n          <button class=\"add-cart\">üõí Add to cart</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        }
    ]
}
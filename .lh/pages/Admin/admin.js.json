{
    "sourceFile": "pages/Admin/admin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1757578338397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757578448302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,43 +22,25 @@\n   }\r\n   function setData(key, value){ localStorage.setItem(key, JSON.stringify(value)); }\r\n \r\n   // Seed demo data if empty\r\n-  async function seed() {\r\n+  function seed(){\r\n     const seeded = getData('hs_seeded', false);\r\n-    if (seeded) return;\r\n+    if(seeded) return;\r\n+    const demoBooks = [\r\n+      {id: crypto.randomUUID(), title:'C: The Complete Reference', category:'C Programming', price:49.99, type:'PDF'},\r\n+      {id: crypto.randomUUID(), title:'Java: The Complete Reference', category:'Java Programming', price:59.99, type:'PHYSICAL'}\r\n+    ];\r\n+    const demoUsers = [\r\n+      {id: crypto.randomUUID(), name:'C: The Compl...', email:'c@example.com', purchases:['Java Programming..'], joined:'10/11/2025', blocked:false},\r\n+    ];\r\n+    const demoOrders = 15;\r\n+    setData(STORAGE_KEYS.books, demoBooks);\r\n+    setData(STORAGE_KEYS.users, demoUsers);\r\n+    setData(STORAGE_KEYS.orders, demoOrders);\r\n+    setData('hs_seeded', true);\r\n+  }\r\n \r\n-    try {\r\n-        // Fetch all books from backend\r\n-        const response = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n-        const books = await response.json();\r\n-\r\n-        if (!books || books.length === 0) {\r\n-            console.warn(\"No books fetched from database, using demo data.\");\r\n-            return;\r\n-        }\r\n-\r\n-        // Optionally, you can still seed demo users or orders\r\n-        const demoUsers = [\r\n-            {id: crypto.randomUUID(), name:'Demo User', email:'demo@example.com', purchases:[], joined:'10/11/2025', blocked:false},\r\n-        ];\r\n-        const demoOrders = 15;\r\n-\r\n-        // Save to localStorage\r\n-        setData(STORAGE_KEYS.books, books);\r\n-        setData(STORAGE_KEYS.users, demoUsers);\r\n-        setData(STORAGE_KEYS.orders, demoOrders);\r\n-        setData('hs_seeded', true);\r\n-\r\n-        console.log(\"[DEBUG] Books seeded from database:\", books);\r\n-\r\n-    } catch (err) {\r\n-        console.error(\"Failed to fetch books from backend:\", err);\r\n-    }\r\n-}\r\n-\r\n-document.addEventListener(\"DOMContentLoaded\", seed);\r\n-\r\n   function switchSection(target){\r\n     Object.values(SECTIONS).forEach(s => s.classList.remove('visible'));\r\n     SECTIONS[target].classList.add('visible');\r\n     $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target===target));\r\n"
                },
                {
                    "date": 1757578557102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,25 +22,47 @@\n   }\r\n   function setData(key, value){ localStorage.setItem(key, JSON.stringify(value)); }\r\n \r\n   // Seed demo data if empty\r\n-  function seed(){\r\n+  async function seed() {\r\n     const seeded = getData('hs_seeded', false);\r\n-    if(seeded) return;\r\n-    const demoBooks = [\r\n-      {id: crypto.randomUUID(), title:'C: The Complete Reference', category:'C Programming', price:49.99, type:'PDF'},\r\n-      {id: crypto.randomUUID(), title:'Java: The Complete Reference', category:'Java Programming', price:59.99, type:'PHYSICAL'}\r\n-    ];\r\n-    const demoUsers = [\r\n-      {id: crypto.randomUUID(), name:'C: The Compl...', email:'c@example.com', purchases:['Java Programming..'], joined:'10/11/2025', blocked:false},\r\n-    ];\r\n-    const demoOrders = 15;\r\n-    setData(STORAGE_KEYS.books, demoBooks);\r\n-    setData(STORAGE_KEYS.users, demoUsers);\r\n-    setData(STORAGE_KEYS.orders, demoOrders);\r\n-    setData('hs_seeded', true);\r\n-  }\r\n+    if (seeded) return;\r\n \r\n+    try {\r\n+        const response = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n+        if (!response.ok) throw new Error(\"Failed to fetch books\");\r\n+\r\n+        const books = await response.json();\r\n+        setData(STORAGE_KEYS.books, books); // Save fetched books in localStorage\r\n+\r\n+        const listArea = document.getElementById(\"listArea\");\r\n+        listArea.innerHTML = \"\"; // Clear existing content\r\n+\r\n+        books.forEach(book => {\r\n+            const bookDiv = document.createElement(\"div\");\r\n+            bookDiv.classList.add(\"book-item\");\r\n+\r\n+            bookDiv.innerHTML = `\r\n+                <h3>${book.title}</h3>\r\n+                <p>Author: ${book.author}</p>\r\n+                <p>Category: ${book.category}</p>\r\n+                <p>Price: $${book.price}</p>\r\n+                <p>Rating: ${book.rating}</p>\r\n+                <img src=\"${book.image}\" alt=\"${book.title}\" width=\"100\">\r\n+            `;\r\n+\r\n+            listArea.appendChild(bookDiv);\r\n+        });\r\n+\r\n+        setData('hs_seeded', true); // Mark as seeded\r\n+    } catch (error) {\r\n+        console.error(\"Error loading books:\", error);\r\n+    }\r\n+}\r\n+\r\n+// Call on page load\r\n+window.addEventListener(\"DOMContentLoaded\", seed);\r\n+\r\n   function switchSection(target){\r\n     Object.values(SECTIONS).forEach(s => s.classList.remove('visible'));\r\n     SECTIONS[target].classList.add('visible');\r\n     $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target===target));\r\n"
                },
                {
                    "date": 1757578605538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,47 +22,25 @@\n   }\r\n   function setData(key, value){ localStorage.setItem(key, JSON.stringify(value)); }\r\n \r\n   // Seed demo data if empty\r\n-  async function seed() {\r\n+  function seed(){\r\n     const seeded = getData('hs_seeded', false);\r\n-    if (seeded) return;\r\n+    if(seeded) return;\r\n+    const demoBooks = [\r\n+      {id: crypto.randomUUID(), title:'C: The Complete Reference', category:'C Programming', price:49.99, type:'PDF'},\r\n+      {id: crypto.randomUUID(), title:'Java: The Complete Reference', category:'Java Programming', price:59.99, type:'PHYSICAL'}\r\n+    ];\r\n+    const demoUsers = [\r\n+      {id: crypto.randomUUID(), name:'C: The Compl...', email:'c@example.com', purchases:['Java Programming..'], joined:'10/11/2025', blocked:false},\r\n+    ];\r\n+    const demoOrders = 15;\r\n+    setData(STORAGE_KEYS.books, demoBooks);\r\n+    setData(STORAGE_KEYS.users, demoUsers);\r\n+    setData(STORAGE_KEYS.orders, demoOrders);\r\n+    setData('hs_seeded', true);\r\n+  }\r\n \r\n-    try {\r\n-        const response = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n-        if (!response.ok) throw new Error(\"Failed to fetch books\");\r\n-\r\n-        const books = await response.json();\r\n-        setData(STORAGE_KEYS.books, books); // Save fetched books in localStorage\r\n-\r\n-        const listArea = document.getElementById(\"listArea\");\r\n-        listArea.innerHTML = \"\"; // Clear existing content\r\n-\r\n-        books.forEach(book => {\r\n-            const bookDiv = document.createElement(\"div\");\r\n-            bookDiv.classList.add(\"book-item\");\r\n-\r\n-            bookDiv.innerHTML = `\r\n-                <h3>${book.title}</h3>\r\n-                <p>Author: ${book.author}</p>\r\n-                <p>Category: ${book.category}</p>\r\n-                <p>Price: $${book.price}</p>\r\n-                <p>Rating: ${book.rating}</p>\r\n-                <img src=\"${book.image}\" alt=\"${book.title}\" width=\"100\">\r\n-            `;\r\n-\r\n-            listArea.appendChild(bookDiv);\r\n-        });\r\n-\r\n-        setData('hs_seeded', true); // Mark as seeded\r\n-    } catch (error) {\r\n-        console.error(\"Error loading books:\", error);\r\n-    }\r\n-}\r\n-\r\n-// Call on page load\r\n-window.addEventListener(\"DOMContentLoaded\", seed);\r\n-\r\n   function switchSection(target){\r\n     Object.values(SECTIONS).forEach(s => s.classList.remove('visible'));\r\n     SECTIONS[target].classList.add('visible');\r\n     $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target===target));\r\n"
                },
                {
                    "date": 1757578657816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,24 +22,24 @@\n   }\r\n   function setData(key, value){ localStorage.setItem(key, JSON.stringify(value)); }\r\n \r\n   // Seed demo data if empty\r\n-  function seed(){\r\n-    const seeded = getData('hs_seeded', false);\r\n-    if(seeded) return;\r\n-    const demoBooks = [\r\n-      {id: crypto.randomUUID(), title:'C: The Complete Reference', category:'C Programming', price:49.99, type:'PDF'},\r\n-      {id: crypto.randomUUID(), title:'Java: The Complete Reference', category:'Java Programming', price:59.99, type:'PHYSICAL'}\r\n-    ];\r\n-    const demoUsers = [\r\n-      {id: crypto.randomUUID(), name:'C: The Compl...', email:'c@example.com', purchases:['Java Programming..'], joined:'10/11/2025', blocked:false},\r\n-    ];\r\n-    const demoOrders = 15;\r\n-    setData(STORAGE_KEYS.books, demoBooks);\r\n-    setData(STORAGE_KEYS.users, demoUsers);\r\n-    setData(STORAGE_KEYS.orders, demoOrders);\r\n-    setData('hs_seeded', true);\r\n-  }\r\n+  // function seed(){\r\n+  //   const seeded = getData('hs_seeded', false);\r\n+  //   if(seeded) return;\r\n+  //   const demoBooks = [\r\n+  //     {id: crypto.randomUUID(), title:'C: The Complete Reference', category:'C Programming', price:49.99, type:'PDF'},\r\n+  //     {id: crypto.randomUUID(), title:'Java: The Complete Reference', category:'Java Programming', price:59.99, type:'PHYSICAL'}\r\n+  //   ];\r\n+  //   const demoUsers = [\r\n+  //     {id: crypto.randomUUID(), name:'C: The Compl...', email:'c@example.com', purchases:['Java Programming..'], joined:'10/11/2025', blocked:false},\r\n+  //   ];\r\n+  //   const demoOrders = 15;\r\n+  //   setData(STORAGE_KEYS.books, demoBooks);\r\n+  //   setData(STORAGE_KEYS.users, demoUsers);\r\n+  //   setData(STORAGE_KEYS.orders, demoOrders);\r\n+  //   setData('hs_seeded', true);\r\n+  // }\r\n \r\n   function switchSection(target){\r\n     Object.values(SECTIONS).forEach(s => s.classList.remove('visible'));\r\n     SECTIONS[target].classList.add('visible');\r\n"
                },
                {
                    "date": 1757578668323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,24 +22,24 @@\n   }\r\n   function setData(key, value){ localStorage.setItem(key, JSON.stringify(value)); }\r\n \r\n   // Seed demo data if empty\r\n-  // function seed(){\r\n-  //   const seeded = getData('hs_seeded', false);\r\n-  //   if(seeded) return;\r\n-  //   const demoBooks = [\r\n-  //     {id: crypto.randomUUID(), title:'C: The Complete Reference', category:'C Programming', price:49.99, type:'PDF'},\r\n-  //     {id: crypto.randomUUID(), title:'Java: The Complete Reference', category:'Java Programming', price:59.99, type:'PHYSICAL'}\r\n-  //   ];\r\n-  //   const demoUsers = [\r\n-  //     {id: crypto.randomUUID(), name:'C: The Compl...', email:'c@example.com', purchases:['Java Programming..'], joined:'10/11/2025', blocked:false},\r\n-  //   ];\r\n-  //   const demoOrders = 15;\r\n-  //   setData(STORAGE_KEYS.books, demoBooks);\r\n-  //   setData(STORAGE_KEYS.users, demoUsers);\r\n-  //   setData(STORAGE_KEYS.orders, demoOrders);\r\n-  //   setData('hs_seeded', true);\r\n-  // }\r\n+  function seed(){\r\n+    const seeded = getData('hs_seeded', false);\r\n+    if(seeded) return;\r\n+    const demoBooks = [\r\n+      {id: crypto.randomUUID(), title:'C: The Complete Reference', category:'C Programming', price:49.99, type:'PDF'},\r\n+      {id: crypto.randomUUID(), title:'Java: The Complete Reference', category:'Java Programming', price:59.99, type:'PHYSICAL'}\r\n+    ];\r\n+    const demoUsers = [\r\n+      {id: crypto.randomUUID(), name:'C: The Compl...', email:'c@example.com', purchases:['Java Programming..'], joined:'10/11/2025', blocked:false},\r\n+    ];\r\n+    const demoOrders = 15;\r\n+    setData(STORAGE_KEYS.books, demoBooks);\r\n+    setData(STORAGE_KEYS.users, demoUsers);\r\n+    setData(STORAGE_KEYS.orders, demoOrders);\r\n+    setData('hs_seeded', true);\r\n+  }\r\n \r\n   function switchSection(target){\r\n     Object.values(SECTIONS).forEach(s => s.classList.remove('visible'));\r\n     SECTIONS[target].classList.add('visible');\r\n"
                },
                {
                    "date": 1757578711946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,25 +22,34 @@\n   }\r\n   function setData(key, value){ localStorage.setItem(key, JSON.stringify(value)); }\r\n \r\n   // Seed demo data if empty\r\n-  function seed(){\r\n+  async function seed(){\r\n     const seeded = getData('hs_seeded', false);\r\n     if(seeded) return;\r\n-    const demoBooks = [\r\n-      {id: crypto.randomUUID(), title:'C: The Complete Reference', category:'C Programming', price:49.99, type:'PDF'},\r\n-      {id: crypto.randomUUID(), title:'Java: The Complete Reference', category:'Java Programming', price:59.99, type:'PHYSICAL'}\r\n-    ];\r\n-    const demoUsers = [\r\n-      {id: crypto.randomUUID(), name:'C: The Compl...', email:'c@example.com', purchases:['Java Programming..'], joined:'10/11/2025', blocked:false},\r\n-    ];\r\n-    const demoOrders = 15;\r\n-    setData(STORAGE_KEYS.books, demoBooks);\r\n-    setData(STORAGE_KEYS.users, demoUsers);\r\n-    setData(STORAGE_KEYS.orders, demoOrders);\r\n-    setData('hs_seeded', true);\r\n-  }\r\n \r\n+    try {\r\n+        // Fetch books from backend\r\n+        const response = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n+        if (!response.ok) throw new Error(\"Failed to fetch books\");\r\n+        const books = await response.json();\r\n+        setData(STORAGE_KEYS.books, books);\r\n+\r\n+        // Optionally, fetch users from backend if you have an endpoint\r\n+        // const usersResponse = await fetch(\"http://127.0.0.1:5000/get-users\");\r\n+        // const users = await usersResponse.json();\r\n+        // setData(STORAGE_KEYS.users, users);\r\n+\r\n+        // For now, if no users endpoint, keep users empty\r\n+        setData(STORAGE_KEYS.users, []);\r\n+        setData(STORAGE_KEYS.orders, 0);\r\n+\r\n+        setData('hs_seeded', true);\r\n+    } catch (error) {\r\n+        console.error(\"Error fetching initial data:\", error);\r\n+    }\r\n+}\r\n+\r\n   function switchSection(target){\r\n     Object.values(SECTIONS).forEach(s => s.classList.remove('visible'));\r\n     SECTIONS[target].classList.add('visible');\r\n     $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target===target));\r\n"
                },
                {
                    "date": 1757578846872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-/* Minimal, readable JS for the Admin dashboard. Uses localStorage for demo data. */\r\n (function(){\r\n   \"use strict\";\r\n \r\n   const $ = (sel, root=document) => root.querySelector(sel);\r\n@@ -21,42 +20,35 @@\n     try{ return JSON.parse(localStorage.getItem(key)) ?? fallback; }catch{ return fallback; }\r\n   }\r\n   function setData(key, value){ localStorage.setItem(key, JSON.stringify(value)); }\r\n \r\n-  // Seed demo data if empty\r\n+  // Fetch initial data from backend if not seeded\r\n   async function seed(){\r\n     const seeded = getData('hs_seeded', false);\r\n     if(seeded) return;\r\n \r\n     try {\r\n-        // Fetch books from backend\r\n         const response = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n         if (!response.ok) throw new Error(\"Failed to fetch books\");\r\n         const books = await response.json();\r\n         setData(STORAGE_KEYS.books, books);\r\n \r\n-        // Optionally, fetch users from backend if you have an endpoint\r\n-        // const usersResponse = await fetch(\"http://127.0.0.1:5000/get-users\");\r\n-        // const users = await usersResponse.json();\r\n-        // setData(STORAGE_KEYS.users, users);\r\n-\r\n-        // For now, if no users endpoint, keep users empty\r\n+        // Users and orders can be fetched from backend if endpoints exist\r\n         setData(STORAGE_KEYS.users, []);\r\n         setData(STORAGE_KEYS.orders, 0);\r\n \r\n         setData('hs_seeded', true);\r\n     } catch (error) {\r\n         console.error(\"Error fetching initial data:\", error);\r\n     }\r\n-}\r\n+  }\r\n \r\n   function switchSection(target){\r\n     Object.values(SECTIONS).forEach(s => s.classList.remove('visible'));\r\n     SECTIONS[target].classList.add('visible');\r\n     $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target===target));\r\n   }\r\n \r\n-  // Dashboard counters\r\n   function refreshStats(){\r\n     const books = getData(STORAGE_KEYS.books, []);\r\n     const total = books.length;\r\n     const pdf = books.filter(b => b.type==='PDF').length;\r\n@@ -67,9 +59,8 @@\n     $('#stat-physical').textContent = physical;\r\n     $('#stat-orders').textContent = orders;\r\n   }\r\n \r\n-  // BOOK MANAGEMENT\r\n   function renderBooks(){\r\n     const tbody = $('#books-tbody');\r\n     const books = getData(STORAGE_KEYS.books, []);\r\n     tbody.innerHTML = books.map(b => `\r\n@@ -89,34 +80,26 @@\n     const titleEl = $('#book-modal-title');\r\n     const submitBtn = $('#book-submit');\r\n     const form = $('#book-form');\r\n     const typeSel = $('#book-type');\r\n-    const fields = {\r\n-      title: $('#book-title'),\r\n-      description: $('#book-description'),\r\n-      price: $('#book-price'),\r\n-      category: $('#book-category'),\r\n-      rating: $('#book-rating'),\r\n-      year: $('#book-year'),\r\n-      pages: $('#book-pages'),\r\n-      isbn: $('#book-isbn')\r\n-    };\r\n     form.reset();\r\n     form.dataset.editId = editId || '';\r\n+\r\n     if(editId){\r\n       const book = getData(STORAGE_KEYS.books, []).find(b => b.id===editId);\r\n       if(book){\r\n         titleEl.textContent = 'Edit Book';\r\n         submitBtn.textContent = 'Save Changes';\r\n-        fields.title.value = book.title;\r\n-        fields.price.value = book.price;\r\n-        fields.category.value = book.category;\r\n+        $('#book-title').value = book.title;\r\n+        $('#book-price').value = book.price;\r\n+        $('#book-category').value = book.category;\r\n         typeSel.value = book.type;\r\n       }\r\n     } else {\r\n-      titleEl.textContent = 'Add New Books';\r\n+      titleEl.textContent = 'Add New Book';\r\n       submitBtn.textContent = 'Add New Book';\r\n     }\r\n+\r\n     modal.classList.add('show');\r\n     modal.setAttribute('aria-hidden', 'false');\r\n   }\r\n \r\n@@ -139,9 +122,9 @@\n     const editId = e.currentTarget.dataset.editId;\r\n     if(editId){\r\n       const idx = books.findIndex(b => b.id===editId);\r\n       if(idx>-1) books[idx] = {...books[idx], ...newData};\r\n-    }else{\r\n+    } else {\r\n       books.push({id: crypto.randomUUID(), ...newData});\r\n     }\r\n     setData(STORAGE_KEYS.books, books);\r\n     closeBookModal();\r\n@@ -162,17 +145,16 @@\n       refreshStats();\r\n     }\r\n   }\r\n \r\n-  // USERS MANAGEMENT\r\n   function renderUsers(){\r\n     const tbody = $('#users-tbody');\r\n     const users = getData(STORAGE_KEYS.users, []);\r\n     tbody.innerHTML = users.map(u => `\r\n       <tr>\r\n         <td>${u.name}</td>\r\n         <td>${u.email}</td>\r\n-        <td>${(u.purchases?.[0]||'').slice(0,16) || ''}</td>\r\n+        <td>${(u.purchases?.[0]||'').slice(0,16)}</td>\r\n         <td>${u.joined || ''}</td>\r\n         <td><button data-action=\"view\" data-id=\"${u.id}\">View</button></td>\r\n       </tr>\r\n     `).join('');\r\n@@ -184,10 +166,9 @@\n     if(!user) return;\r\n     $('#u-fullname').textContent = user.name;\r\n     $('#u-email').textContent = user.email;\r\n     $('#u-joined').textContent = user.joined || '';\r\n-    const chips = $('#u-books');\r\n-    chips.innerHTML = (user.purchases||[]).map(t => `<span class=\"chip\">${t}</span>`).join('');\r\n+    $('#u-books').innerHTML = (user.purchases||[]).map(t => `<span class=\"chip\">${t}</span>`).join('');\r\n     $('#user-delete').onclick = function(){\r\n       setData(STORAGE_KEYS.users, users.filter(u => u.id!==id));\r\n       closeUserModal();\r\n       renderUsers();\r\n@@ -212,9 +193,8 @@\n     if(!btn) return;\r\n     if(btn.dataset.action==='view') openUserModal(btn.dataset.id);\r\n   }\r\n \r\n-  // NAV + responsive sidebar\r\n   function setupNav(){\r\n     $$('.menu-item').forEach(b => b.addEventListener('click', ()=> switchSection(b.dataset.target)));\r\n     $('#btn-open-add-book').addEventListener('click', ()=> openBookModal());\r\n     $('#books-tbody').addEventListener('click', onBooksTableClick);\r\n@@ -232,6 +212,4 @@\n   renderBooks();\r\n   renderUsers();\r\n   refreshStats();\r\n })();\r\n-\r\n-\r\n"
                },
                {
                    "date": 1757579166647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,62 +9,19 @@\n     books: $('#books'),\r\n     users: $('#users')\r\n   };\r\n \r\n-  const STORAGE_KEYS = {\r\n-    books: 'hs_books',\r\n-    users: 'hs_users',\r\n-    orders: 'hs_orders'\r\n-  };\r\n-\r\n-  function getData(key, fallback){\r\n-    try{ return JSON.parse(localStorage.getItem(key)) ?? fallback; }catch{ return fallback; }\r\n-  }\r\n-  function setData(key, value){ localStorage.setItem(key, JSON.stringify(value)); }\r\n-\r\n-  // Fetch initial data from backend if not seeded\r\n-  async function seed(){\r\n-    const seeded = getData('hs_seeded', false);\r\n-    if(seeded) return;\r\n-\r\n-    try {\r\n-        const response = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n-        if (!response.ok) throw new Error(\"Failed to fetch books\");\r\n-        const books = await response.json();\r\n-        setData(STORAGE_KEYS.books, books);\r\n-\r\n-        // Users and orders can be fetched from backend if endpoints exist\r\n-        setData(STORAGE_KEYS.users, []);\r\n-        setData(STORAGE_KEYS.orders, 0);\r\n-\r\n-        setData('hs_seeded', true);\r\n-    } catch (error) {\r\n-        console.error(\"Error fetching initial data:\", error);\r\n-    }\r\n-  }\r\n-\r\n+  // Section switching\r\n   function switchSection(target){\r\n     Object.values(SECTIONS).forEach(s => s.classList.remove('visible'));\r\n     SECTIONS[target].classList.add('visible');\r\n     $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target===target));\r\n   }\r\n \r\n-  function refreshStats(){\r\n-    const books = getData(STORAGE_KEYS.books, []);\r\n-    const total = books.length;\r\n-    const pdf = books.filter(b => b.type==='PDF').length;\r\n-    const physical = books.filter(b => b.type==='PHYSICAL').length;\r\n-    const orders = getData(STORAGE_KEYS.orders, 0);\r\n-    $('#stat-total-books').textContent = total;\r\n-    $('#stat-pdf').textContent = pdf;\r\n-    $('#stat-physical').textContent = physical;\r\n-    $('#stat-orders').textContent = orders;\r\n-  }\r\n-\r\n-  function renderBooks(){\r\n+  // BOOK MANAGEMENT\r\n+  function renderBooks(books){\r\n     const tbody = $('#books-tbody');\r\n-    const books = getData(STORAGE_KEYS.books, []);\r\n-    tbody.innerHTML = books.map(b => `\r\n+    tbody.innerHTML = (books || []).map(b => `\r\n       <tr>\r\n         <td>${b.title}</td>\r\n         <td>${b.category}</td>\r\n         <td>$${Number(b.price).toFixed(2)}</td>\r\n@@ -74,27 +31,24 @@\n       </tr>\r\n     `).join('');\r\n   }\r\n \r\n-  function openBookModal(editId){\r\n+  function openBookModal(editBook){\r\n     const modal = $('#book-modal');\r\n     const titleEl = $('#book-modal-title');\r\n     const submitBtn = $('#book-submit');\r\n     const form = $('#book-form');\r\n     const typeSel = $('#book-type');\r\n     form.reset();\r\n-    form.dataset.editId = editId || '';\r\n+    form.dataset.editId = editBook?.id || '';\r\n \r\n-    if(editId){\r\n-      const book = getData(STORAGE_KEYS.books, []).find(b => b.id===editId);\r\n-      if(book){\r\n-        titleEl.textContent = 'Edit Book';\r\n-        submitBtn.textContent = 'Save Changes';\r\n-        $('#book-title').value = book.title;\r\n-        $('#book-price').value = book.price;\r\n-        $('#book-category').value = book.category;\r\n-        typeSel.value = book.type;\r\n-      }\r\n+    if(editBook){\r\n+      titleEl.textContent = 'Edit Book';\r\n+      submitBtn.textContent = 'Save Changes';\r\n+      $('#book-title').value = editBook.title;\r\n+      $('#book-price').value = editBook.price;\r\n+      $('#book-category').value = editBook.category;\r\n+      typeSel.value = editBook.type;\r\n     } else {\r\n       titleEl.textContent = 'Add New Book';\r\n       submitBtn.textContent = 'Add New Book';\r\n     }\r\n@@ -108,78 +62,28 @@\n     modal.classList.remove('show');\r\n     modal.setAttribute('aria-hidden', 'true');\r\n   }\r\n \r\n-  function handleBookSubmit(e){\r\n-    e.preventDefault();\r\n-    const books = getData(STORAGE_KEYS.books, []);\r\n-    const typeSel = $('#book-type');\r\n-    const newData = {\r\n-      title: $('#book-title').value.trim(),\r\n-      category: $('#book-category').value.trim(),\r\n-      price: Number($('#book-price').value || 0),\r\n-      type: typeSel.value\r\n-    };\r\n-    const editId = e.currentTarget.dataset.editId;\r\n-    if(editId){\r\n-      const idx = books.findIndex(b => b.id===editId);\r\n-      if(idx>-1) books[idx] = {...books[idx], ...newData};\r\n-    } else {\r\n-      books.push({id: crypto.randomUUID(), ...newData});\r\n-    }\r\n-    setData(STORAGE_KEYS.books, books);\r\n-    closeBookModal();\r\n-    renderBooks();\r\n-    refreshStats();\r\n-  }\r\n-\r\n-  function onBooksTableClick(e){\r\n-    const btn = e.target.closest('button');\r\n-    if(!btn) return;\r\n-    const id = btn.dataset.id;\r\n-    const action = btn.dataset.action;\r\n-    if(action==='edit') openBookModal(id);\r\n-    if(action==='delete'){\r\n-      const books = getData(STORAGE_KEYS.books, []);\r\n-      setData(STORAGE_KEYS.books, books.filter(b => b.id!==id));\r\n-      renderBooks();\r\n-      refreshStats();\r\n-    }\r\n-  }\r\n-\r\n-  function renderUsers(){\r\n+  // USERS MANAGEMENT\r\n+  function renderUsers(users){\r\n     const tbody = $('#users-tbody');\r\n-    const users = getData(STORAGE_KEYS.users, []);\r\n-    tbody.innerHTML = users.map(u => `\r\n+    tbody.innerHTML = (users || []).map(u => `\r\n       <tr>\r\n-        <td>${u.name}</td>\r\n-        <td>${u.email}</td>\r\n-        <td>${(u.purchases?.[0]||'').slice(0,16)}</td>\r\n-        <td>${u.joined || ''}</td>\r\n-        <td><button data-action=\"view\" data-id=\"${u.id}\">View</button></td>\r\n+        <td>${u.FullName || u.name}</td>\r\n+        <td>${u.Email || u.email}</td>\r\n+        <td>${u.Paid_Book || ''}</td>\r\n+        <td>${u.Date_Joined || u.joined || ''}</td>\r\n+        <td><button data-action=\"view\" data-id=\"${u.UserID || u.id}\">View</button></td>\r\n       </tr>\r\n     `).join('');\r\n   }\r\n \r\n-  function openUserModal(id){\r\n-    const users = getData(STORAGE_KEYS.users, []);\r\n-    const user = users.find(u => u.id===id);\r\n+  function openUserModal(user){\r\n     if(!user) return;\r\n-    $('#u-fullname').textContent = user.name;\r\n-    $('#u-email').textContent = user.email;\r\n-    $('#u-joined').textContent = user.joined || '';\r\n-    $('#u-books').innerHTML = (user.purchases||[]).map(t => `<span class=\"chip\">${t}</span>`).join('');\r\n-    $('#user-delete').onclick = function(){\r\n-      setData(STORAGE_KEYS.users, users.filter(u => u.id!==id));\r\n-      closeUserModal();\r\n-      renderUsers();\r\n-    };\r\n-    $('#user-block').onclick = function(){\r\n-      const idx = users.findIndex(u => u.id===id);\r\n-      if(idx>-1){ users[idx].blocked = !users[idx].blocked; setData(STORAGE_KEYS.users, users); }\r\n-      closeUserModal();\r\n-      renderUsers();\r\n-    };\r\n+    $('#u-fullname').textContent = user.FullName || user.name;\r\n+    $('#u-email').textContent = user.Email || user.email;\r\n+    $('#u-joined').textContent = user.Date_Joined || user.joined || '';\r\n+    $('#u-books').innerHTML = (user.Paid_Book || user.purchases || []).map(t => `<span class=\"chip\">${t}</span>`).join('');\r\n     $('#user-modal').classList.add('show');\r\n     $('#user-modal').setAttribute('aria-hidden','false');\r\n   }\r\n \r\n@@ -187,29 +91,35 @@\n     $('#user-modal').classList.remove('show');\r\n     $('#user-modal').setAttribute('aria-hidden','true');\r\n   }\r\n \r\n+  // Table click handlers\r\n+  function onBooksTableClick(e){\r\n+    const btn = e.target.closest('button');\r\n+    if(!btn) return;\r\n+    const id = btn.dataset.id;\r\n+    const action = btn.dataset.action;\r\n+    // trigger callbacks externally if needed\r\n+  }\r\n+\r\n   function onUsersTableClick(e){\r\n     const btn = e.target.closest('button');\r\n     if(!btn) return;\r\n-    if(btn.dataset.action==='view') openUserModal(btn.dataset.id);\r\n+    const action = btn.dataset.action;\r\n+    // trigger callbacks externally if needed\r\n   }\r\n \r\n+  // Navigation + sidebar\r\n   function setupNav(){\r\n     $$('.menu-item').forEach(b => b.addEventListener('click', ()=> switchSection(b.dataset.target)));\r\n     $('#btn-open-add-book').addEventListener('click', ()=> openBookModal());\r\n     $('#books-tbody').addEventListener('click', onBooksTableClick);\r\n     $('#users-tbody').addEventListener('click', onUsersTableClick);\r\n     $('#book-modal-close').addEventListener('click', closeBookModal);\r\n     $('#book-cancel').addEventListener('click', closeBookModal);\r\n-    $('#book-form').addEventListener('submit', handleBookSubmit);\r\n     $('#user-modal-close').addEventListener('click', closeUserModal);\r\n     $('#burger').addEventListener('click', ()=> $('.sidebar').classList.toggle('open'));\r\n   }\r\n \r\n-  // init\r\n-  seed();\r\n+  // init interface only\r\n   setupNav();\r\n-  renderBooks();\r\n-  renderUsers();\r\n-  refreshStats();\r\n })();\r\n"
                },
                {
                    "date": 1757579200586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,18 +76,10 @@\n       </tr>\r\n     `).join('');\r\n   }\r\n \r\n-  function openUserModal(user){\r\n-    if(!user) return;\r\n-    $('#u-fullname').textContent = user.FullName || user.name;\r\n-    $('#u-email').textContent = user.Email || user.email;\r\n-    $('#u-joined').textContent = user.Date_Joined || user.joined || '';\r\n-    $('#u-books').innerHTML = (user.Paid_Book || user.purchases || []).map(t => `<span class=\"chip\">${t}</span>`).join('');\r\n-    $('#user-modal').classList.add('show');\r\n-    $('#user-modal').setAttribute('aria-hidden','false');\r\n-  }\r\n \r\n+\r\n   function closeUserModal(){\r\n     $('#user-modal').classList.remove('show');\r\n     $('#user-modal').setAttribute('aria-hidden','true');\r\n   }\r\n"
                },
                {
                    "date": 1757579229405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,10 +76,18 @@\n       </tr>\r\n     `).join('');\r\n   }\r\n \r\n+  function openUserModal(user){\r\n+    if(!user) return;\r\n+    $('#u-fullname').textContent = user.FullName || user.name;\r\n+    $('#u-email').textContent = user.Email || user.email;\r\n+    $('#u-joined').textContent = user.Date_Joined || user.joined || '';\r\n+    $('#u-books').innerHTML = (user.Paid_Book || user.purchases || []).map(t => `<span class=\"chip\">${t}</span>`).join('');\r\n+    $('#user-modal').classList.add('show');\r\n+    $('#user-modal').setAttribute('aria-hidden','false');\r\n+  }\r\n \r\n-\r\n   function closeUserModal(){\r\n     $('#user-modal').classList.remove('show');\r\n     $('#user-modal').setAttribute('aria-hidden','true');\r\n   }\r\n"
                },
                {
                    "date": 1757579310279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n     $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target===target));\r\n   }\r\n \r\n   // BOOK MANAGEMENT\r\n-  function renderBooks(books){\r\n-    const tbody = $('#books-tbody');\r\n+ function renderBooks(books){\r\n+    const tbody = document.querySelector('#books-tbody');\r\n     tbody.innerHTML = (books || []).map(b => `\r\n       <tr>\r\n         <td>${b.title}</td>\r\n         <td>${b.category}</td>\r\n@@ -29,9 +29,9 @@\n         <td><button data-action=\"edit\" data-id=\"${b.id}\">EDIT</button></td>\r\n         <td><button data-action=\"delete\" data-id=\"${b.id}\">DELETE</button></td>\r\n       </tr>\r\n     `).join('');\r\n-  }\r\n+}\r\n \r\n   function openBookModal(editBook){\r\n     const modal = $('#book-modal');\r\n     const titleEl = $('#book-modal-title');\r\n"
                },
                {
                    "date": 1757579317165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,14 @@\n       </tr>\r\n     `).join('');\r\n }\r\n \r\n+fetch(\"http://127.0.0.1:5000/get-books\")\r\n+  .then(res => res.json())\r\n+  .then(data => renderBooks(data))\r\n+  .catch(err => console.error(err));\r\n+\r\n+\r\n   function openBookModal(editBook){\r\n     const modal = $('#book-modal');\r\n     const titleEl = $('#book-modal-title');\r\n     const submitBtn = $('#book-submit');\r\n"
                },
                {
                    "date": 1757579526145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,14 @@\n     $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target===target));\r\n   }\r\n \r\n   // BOOK MANAGEMENT\r\n- function renderBooks(books){\r\n+function renderBooks(books){\r\n     const tbody = document.querySelector('#books-tbody');\r\n-    tbody.innerHTML = (books || []).map(b => `\r\n+    // Limit to first 6 books\r\n+    const displayBooks = (books || []).slice(0, 6);\r\n+\r\n+    tbody.innerHTML = displayBooks.map(b => `\r\n       <tr>\r\n         <td>${b.title}</td>\r\n         <td>${b.category}</td>\r\n         <td>$${Number(b.price).toFixed(2)}</td>\r\n@@ -31,8 +34,9 @@\n       </tr>\r\n     `).join('');\r\n }\r\n \r\n+\r\n fetch(\"http://127.0.0.1:5000/get-books\")\r\n   .then(res => res.json())\r\n   .then(data => renderBooks(data))\r\n   .catch(err => console.error(err));\r\n"
                },
                {
                    "date": 1757579597502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,14 +17,11 @@\n     $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target===target));\r\n   }\r\n \r\n   // BOOK MANAGEMENT\r\n-function renderBooks(books){\r\n+ function renderBooks(books){\r\n     const tbody = document.querySelector('#books-tbody');\r\n-    // Limit to first 6 books\r\n-    const displayBooks = (books || []).slice(0, 6);\r\n-\r\n-    tbody.innerHTML = displayBooks.map(b => `\r\n+    tbody.innerHTML = (books || []).map(b => `\r\n       <tr>\r\n         <td>${b.title}</td>\r\n         <td>${b.category}</td>\r\n         <td>$${Number(b.price).toFixed(2)}</td>\r\n@@ -34,9 +31,8 @@\n       </tr>\r\n     `).join('');\r\n }\r\n \r\n-\r\n fetch(\"http://127.0.0.1:5000/get-books\")\r\n   .then(res => res.json())\r\n   .then(data => renderBooks(data))\r\n   .catch(err => console.error(err));\r\n"
                },
                {
                    "date": 1757579611246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,14 @@\n     $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target===target));\r\n   }\r\n \r\n   // BOOK MANAGEMENT\r\n- function renderBooks(books){\r\n+function renderBooks(books){\r\n     const tbody = document.querySelector('#books-tbody');\r\n-    tbody.innerHTML = (books || []).map(b => `\r\n+    // Limit to first 6 books\r\n+    const displayBooks = (books || []).slice(0, 6);\r\n+\r\n+    tbody.innerHTML = displayBooks.map(b => `\r\n       <tr>\r\n         <td>${b.title}</td>\r\n         <td>${b.category}</td>\r\n         <td>$${Number(b.price).toFixed(2)}</td>\r\n@@ -31,8 +34,9 @@\n       </tr>\r\n     `).join('');\r\n }\r\n \r\n+\r\n fetch(\"http://127.0.0.1:5000/get-books\")\r\n   .then(res => res.json())\r\n   .then(data => renderBooks(data))\r\n   .catch(err => console.error(err));\r\n"
                },
                {
                    "date": 1757580122452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // BOOK MANAGEMENT\r\n function renderBooks(books){\r\n     const tbody = document.querySelector('#books-tbody');\r\n     // Limit to first 6 books\r\n-    const displayBooks = (books || []).slice(0, 6);\r\n+    const displayBooks = (books || []).slice(0, 8);\r\n \r\n     tbody.innerHTML = displayBooks.map(b => `\r\n       <tr>\r\n         <td>${b.title}</td>\r\n"
                },
                {
                    "date": 1757580136986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,8 @@\n   // BOOK MANAGEMENT\r\n function renderBooks(books){\r\n     const tbody = document.querySelector('#books-tbody');\r\n     // Limit to first 6 books\r\n-    const displayBooks = (books || []).slice(0, 8);\r\n \r\n     tbody.innerHTML = displayBooks.map(b => `\r\n       <tr>\r\n         <td>${b.title}</td>\r\n"
                },
                {
                    "date": 1757580149441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,13 +17,11 @@\n     $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target===target));\r\n   }\r\n \r\n   // BOOK MANAGEMENT\r\n-function renderBooks(books){\r\n+ function renderBooks(books){\r\n     const tbody = document.querySelector('#books-tbody');\r\n-    // Limit to first 6 books\r\n-\r\n-    tbody.innerHTML = displayBooks.map(b => `\r\n+    tbody.innerHTML = (books || []).map(b => `\r\n       <tr>\r\n         <td>${b.title}</td>\r\n         <td>${b.category}</td>\r\n         <td>$${Number(b.price).toFixed(2)}</td>\r\n@@ -34,14 +32,9 @@\n     `).join('');\r\n }\r\n \r\n \r\n-fetch(\"http://127.0.0.1:5000/get-books\")\r\n-  .then(res => res.json())\r\n-  .then(data => renderBooks(data))\r\n-  .catch(err => console.error(err));\r\n \r\n-\r\n   function openBookModal(editBook){\r\n     const modal = $('#book-modal');\r\n     const titleEl = $('#book-modal-title');\r\n     const submitBtn = $('#book-submit');\r\n"
                },
                {
                    "date": 1757581694858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,12 @@\n       </tr>\r\n     `).join('');\r\n }\r\n \r\n+fetch(\"http://127.0.0.1:5000/get-books\")\r\n+  .then(res => res.json())\r\n+  .then(data => renderBooks(data))\r\n+  .catch(err => console.error(err));\r\n \r\n \r\n   function openBookModal(editBook){\r\n     const modal = $('#book-modal');\r\n@@ -64,22 +68,37 @@\n     modal.classList.remove('show');\r\n     modal.setAttribute('aria-hidden', 'true');\r\n   }\r\n \r\n-  // USERS MANAGEMENT\r\n-  function renderUsers(users){\r\n-    const tbody = $('#users-tbody');\r\n+// Fetch users from backend and render in table\r\n+async function fetchAndRenderUsers() {\r\n+    try {\r\n+        const response = await fetch(\"http://127.0.0.1:5000/get-users\");\r\n+        if (!response.ok) throw new Error(\"Failed to fetch users\");\r\n+        const users = await response.json();\r\n+        renderUsers(users);\r\n+    } catch (error) {\r\n+        console.error(\"Error fetching users:\", error);\r\n+    }\r\n+}\r\n+\r\n+// Render users into the table\r\n+function renderUsers(users){\r\n+    const tbody = document.querySelector('#users-tbody');\r\n     tbody.innerHTML = (users || []).map(u => `\r\n       <tr>\r\n-        <td>${u.FullName || u.name}</td>\r\n-        <td>${u.Email || u.email}</td>\r\n+        <td>${u.FullName}</td>\r\n+        <td>${u.Email}</td>\r\n         <td>${u.Paid_Book || ''}</td>\r\n-        <td>${u.Date_Joined || u.joined || ''}</td>\r\n-        <td><button data-action=\"view\" data-id=\"${u.UserID || u.id}\">View</button></td>\r\n+        <td>${u.Date_Joined || ''}</td>\r\n+        <td><button data-action=\"view\" data-id=\"${u.UserID}\">View</button></td>\r\n       </tr>\r\n     `).join('');\r\n-  }\r\n+}\r\n \r\n+// Call this when the page loads\r\n+fetchAndRenderUsers();\r\n+\r\n   function openUserModal(user){\r\n     if(!user) return;\r\n     $('#u-fullname').textContent = user.FullName || user.name;\r\n     $('#u-email').textContent = user.Email || user.email;\r\n"
                },
                {
                    "date": 1757581767803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,25 @@\n-(function(){\r\n+(function () {\r\n   \"use strict\";\r\n \r\n-  const $ = (sel, root=document) => root.querySelector(sel);\r\n-  const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));\r\n+  const $ = (sel, root = document) => root.querySelector(sel);\r\n+  const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));\r\n \r\n   const SECTIONS = {\r\n     dashboard: $('#dashboard'),\r\n     books: $('#books'),\r\n     users: $('#users')\r\n   };\r\n \r\n   // Section switching\r\n-  function switchSection(target){\r\n+  function switchSection(target) {\r\n     Object.values(SECTIONS).forEach(s => s.classList.remove('visible'));\r\n     SECTIONS[target].classList.add('visible');\r\n-    $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target===target));\r\n+    $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target === target));\r\n   }\r\n \r\n   // BOOK MANAGEMENT\r\n- function renderBooks(books){\r\n+  function renderBooks(books) {\r\n     const tbody = document.querySelector('#books-tbody');\r\n     tbody.innerHTML = (books || []).map(b => `\r\n       <tr>\r\n         <td>${b.title}</td>\r\n@@ -29,26 +29,26 @@\n         <td><button data-action=\"edit\" data-id=\"${b.id}\">EDIT</button></td>\r\n         <td><button data-action=\"delete\" data-id=\"${b.id}\">DELETE</button></td>\r\n       </tr>\r\n     `).join('');\r\n-}\r\n+  }\r\n \r\n-fetch(\"http://127.0.0.1:5000/get-books\")\r\n-  .then(res => res.json())\r\n-  .then(data => renderBooks(data))\r\n-  .catch(err => console.error(err));\r\n+  fetch(\"http://127.0.0.1:5000/get-books\")\r\n+    .then(res => res.json())\r\n+    .then(data => renderBooks(data))\r\n+    .catch(err => console.error(err));\r\n \r\n \r\n-  function openBookModal(editBook){\r\n+  function openBookModal(editBook) {\r\n     const modal = $('#book-modal');\r\n     const titleEl = $('#book-modal-title');\r\n     const submitBtn = $('#book-submit');\r\n     const form = $('#book-form');\r\n     const typeSel = $('#book-type');\r\n     form.reset();\r\n     form.dataset.editId = editBook?.id || '';\r\n \r\n-    if(editBook){\r\n+    if (editBook) {\r\n       titleEl.textContent = 'Edit Book';\r\n       submitBtn.textContent = 'Save Changes';\r\n       $('#book-title').value = editBook.title;\r\n       $('#book-price').value = editBook.price;\r\n@@ -62,84 +62,90 @@\n     modal.classList.add('show');\r\n     modal.setAttribute('aria-hidden', 'false');\r\n   }\r\n \r\n-  function closeBookModal(){\r\n+  function closeBookModal() {\r\n     const modal = $('#book-modal');\r\n     modal.classList.remove('show');\r\n     modal.setAttribute('aria-hidden', 'true');\r\n   }\r\n \r\n-// Fetch users from backend and render in table\r\n-async function fetchAndRenderUsers() {\r\n+  // Fetch users from backend and render in table\r\n+  async function fetchAndRenderUsers() {\r\n     try {\r\n-        const response = await fetch(\"http://127.0.0.1:5000/get-users\");\r\n-        if (!response.ok) throw new Error(\"Failed to fetch users\");\r\n-        const users = await response.json();\r\n-        renderUsers(users);\r\n+      const response = await fetch(\"http://127.0.0.1:5000/get-users\");\r\n+      if (!response.ok) throw new Error(\"Failed to fetch users\");\r\n+      const users = await response.json();\r\n+      renderUsers(users);\r\n     } catch (error) {\r\n-        console.error(\"Error fetching users:\", error);\r\n+      console.error(\"Error fetching users:\", error);\r\n     }\r\n-}\r\n+  }\r\n \r\n-// Render users into the table\r\n-function renderUsers(users){\r\n-    const tbody = document.querySelector('#users-tbody');\r\n-    tbody.innerHTML = (users || []).map(u => `\r\n+  // Render users into the table\r\n+function renderUsers(users) {\r\n+  const tbody = document.querySelector('#users-tbody');\r\n+  tbody.innerHTML = (users || []).map(u => {\r\n+    let paidBook = u.Paid_Book || '';\r\n+    if (paidBook.length > 20) {\r\n+      paidBook = paidBook.slice(0, 20) + '…';\r\n+    }\r\n+    return `\r\n       <tr>\r\n         <td>${u.FullName}</td>\r\n         <td>${u.Email}</td>\r\n-        <td>${u.Paid_Book || ''}</td>\r\n+        <td>${paidBook}</td>\r\n         <td>${u.Date_Joined || ''}</td>\r\n         <td><button data-action=\"view\" data-id=\"${u.UserID}\">View</button></td>\r\n       </tr>\r\n-    `).join('');\r\n+    `;\r\n+  }).join('');\r\n }\r\n \r\n-// Call this when the page loads\r\n-fetchAndRenderUsers();\r\n+  // Call this when the page loads\r\n+  fetchAndRenderUsers();\r\n \r\n-  function openUserModal(user){\r\n-    if(!user) return;\r\n+  function openUserModal(user) {\r\n+    if (!user) return;\r\n     $('#u-fullname').textContent = user.FullName || user.name;\r\n     $('#u-email').textContent = user.Email || user.email;\r\n     $('#u-joined').textContent = user.Date_Joined || user.joined || '';\r\n     $('#u-books').innerHTML = (user.Paid_Book || user.purchases || []).map(t => `<span class=\"chip\">${t}</span>`).join('');\r\n     $('#user-modal').classList.add('show');\r\n-    $('#user-modal').setAttribute('aria-hidden','false');\r\n+    $('#user-modal').setAttribute('aria-hidden', 'false');\r\n   }\r\n \r\n-  function closeUserModal(){\r\n+  function closeUserModal() {\r\n     $('#user-modal').classList.remove('show');\r\n-    $('#user-modal').setAttribute('aria-hidden','true');\r\n+    $('#user-modal').setAttribute('aria-hidden', 'true');\r\n   }\r\n \r\n   // Table click handlers\r\n-  function onBooksTableClick(e){\r\n+  function onBooksTableClick(e) {\r\n     const btn = e.target.closest('button');\r\n-    if(!btn) return;\r\n+    if (!btn) return;\r\n     const id = btn.dataset.id;\r\n     const action = btn.dataset.action;\r\n     // trigger callbacks externally if needed\r\n   }\r\n \r\n-  function onUsersTableClick(e){\r\n+  function onUsersTableClick(e) {\r\n     const btn = e.target.closest('button');\r\n-    if(!btn) return;\r\n+    if (!btn) return;\r\n     const action = btn.dataset.action;\r\n     // trigger callbacks externally if needed\r\n   }\r\n \r\n   // Navigation + sidebar\r\n-  function setupNav(){\r\n-    $$('.menu-item').forEach(b => b.addEventListener('click', ()=> switchSection(b.dataset.target)));\r\n-    $('#btn-open-add-book').addEventListener('click', ()=> openBookModal());\r\n+  function setupNav() {\r\n+    $$('.menu-item').forEach(b => b.addEventListener('click', () => switchSection(b.dataset.target)));\r\n+    $('#btn-open-add-book').addEventListener('click', () => openBookModal());\r\n     $('#books-tbody').addEventListener('click', onBooksTableClick);\r\n     $('#users-tbody').addEventListener('click', onUsersTableClick);\r\n     $('#book-modal-close').addEventListener('click', closeBookModal);\r\n     $('#book-cancel').addEventListener('click', closeBookModal);\r\n     $('#user-modal-close').addEventListener('click', closeUserModal);\r\n-    $('#burger').addEventListener('click', ()=> $('.sidebar').classList.toggle('open'));\r\n+    $('#burger').addEventListener('click', () => $('.sidebar').classList.toggle('open'));\r\n   }\r\n \r\n   // init interface only\r\n   setupNav();\r\n"
                },
                {
                    "date": 1757581804284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,26 +81,20 @@\n     }\r\n   }\r\n \r\n   // Render users into the table\r\n-function renderUsers(users) {\r\n-  const tbody = document.querySelector('#users-tbody');\r\n-  tbody.innerHTML = (users || []).map(u => {\r\n-    let paidBook = u.Paid_Book || '';\r\n-    if (paidBook.length > 20) {\r\n-      paidBook = paidBook.slice(0, 20) + '…';\r\n-    }\r\n-    return `\r\n+  function renderUsers(users) {\r\n+    const tbody = document.querySelector('#users-tbody');\r\n+    tbody.innerHTML = (users || []).map(u => `\r\n       <tr>\r\n         <td>${u.FullName}</td>\r\n         <td>${u.Email}</td>\r\n-        <td>${paidBook}</td>\r\n+        <td>${u.Paid_Book || ''}</td>\r\n         <td>${u.Date_Joined || ''}</td>\r\n         <td><button data-action=\"view\" data-id=\"${u.UserID}\">View</button></td>\r\n       </tr>\r\n-    `;\r\n-  }).join('');\r\n-}\r\n+    `).join('');\r\n+  }\r\n \r\n   // Call this when the page loads\r\n   fetchAndRenderUsers();\r\n \r\n"
                },
                {
                    "date": 1757581863877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,8 @@\n       <tr>\r\n         <td>${u.FullName}</td>\r\n         <td>${u.Email}</td>\r\n       <td>${(u.Paid_Book || '').length > 20 ? (u.Paid_Book.slice(0, 20) + '…') : u.Paid_Book}</td>\r\n-\r\n         <td>${u.Date_Joined || ''}</td>\r\n         <td><button data-action=\"view\" data-id=\"${u.UserID}\">View</button></td>\r\n       </tr>\r\n     `).join('');\r\n"
                },
                {
                    "date": 1758457683285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,378 @@\n+(function () {\r\n+  \"use strict\";\r\n+\r\n+  const $ = (selector, root = document) => root.querySelector(selector);\r\n+  const $$ = (selector, root = document) => Array.from(root.querySelectorAll(selector));\r\n+\r\n+  const SECTIONS = {\r\n+    dashboard: $('#dashboard'),\r\n+    books: $('#books'),\r\n+    users: $('#users')\r\n+  };\r\n+\r\n+  /*** Section Switching ***/\r\n+  function switchSection(target) {\r\n+    Object.values(SECTIONS).forEach(section => section.classList.remove('visible'));\r\n+    SECTIONS[target].classList.add('visible');\r\n+    $$('.menu-item').forEach(btn => btn.classList.toggle('active', btn.dataset.target === target));\r\n+  }\r\n+\r\n+  /*** BOOKS ***/\r\n+  async function fetchBooks() {\r\n+    try {\r\n+      const res = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n+      if (!res.ok) throw new Error(\"Failed to fetch books\");\r\n+      return await res.json();\r\n+    } catch (err) {\r\n+      console.error(\"Error fetching books:\", err);\r\n+      return [];\r\n+    }\r\n+  }\r\n+\r\n+\r\n+ function renderBooks(books) {\r\n+  const tbody = $('#books-tbody');\r\n+  tbody.innerHTML = (books || []).map(book => `\r\n+    <tr>\r\n+      <td>${book.title}</td>\r\n+      <td>${book.category}</td>\r\n+      <td>$${Number(book.price).toFixed(2)}</td>\r\n+      <td>${book.type || (book.pdf ? 'PDF' : 'PHYSICAL')}</td>\r\n+      <td><button data-action=\"edit\" data-id=\"${book.id}\">EDIT</button></td>\r\n+      <td><button data-action=\"delete\" data-id=\"${book.id}\">DELETE</button></td>\r\n+    </tr>\r\n+  `).join('');\r\n+}\r\n+\r\n+// Global event listener for EDIT and DELETE\r\n+document.addEventListener(\"click\", async (e) => {\r\n+  const action = e.target.dataset.action;\r\n+  const bookId = e.target.dataset.id;\r\n+\r\n+// inside your table click handler\r\n+if (action === \"edit\") {\r\n+  try {\r\n+    const res = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n+    const data = await res.json();\r\n+\r\n+    // If Flask returns {books: [...]}, unwrap it\r\n+    const books = Array.isArray(data) ? data : data.books;\r\n+\r\n+    if (Array.isArray(books)) {\r\n+      const book = books.find(b => b.id == bookId);\r\n+      if (book) {\r\n+        openEditModal(book);\r\n+      } else {\r\n+        console.error(\"Book not found with id:\", bookId);\r\n+      }\r\n+    } else {\r\n+      console.error(\"Response is not an array:\", data);\r\n+    }\r\n+  } catch (err) {\r\n+    console.error(\"Failed to fetch books:\", err);\r\n+  }\r\n+}\r\n+\r\n+\r\n+\r\n+  if (action === \"delete\") {\r\n+    if (confirm(\"Are you sure you want to delete this book?\")) {\r\n+      await fetch(`/delete-book/${bookId}`, { method: \"DELETE\" });\r\n+      // Refresh list after deletion\r\n+      const res = await fetch(\"/get-books\");\r\n+      const books = await res.json();\r\n+      renderBooks(books);\r\n+    }\r\n+  }\r\n+});\r\n+\r\n+document.getElementById(\"edit-book-submit\").addEventListener(\"click\", async () => {\r\n+  const modal = document.getElementById(\"edit-book-modal\");\r\n+  const bookId = modal.dataset.bookId;\r\n+\r\n+  const updatedBook = {\r\n+    title: document.getElementById(\"edit-book-title\").value,\r\n+    description: document.getElementById(\"edit-book-description\").value,\r\n+    price: document.getElementById(\"edit-book-price\").value,\r\n+    category: document.getElementById(\"edit-book-category\").value,\r\n+    rating: document.getElementById(\"edit-rating\").value,\r\n+    year: document.getElementById(\"edit-book-year\").value,\r\n+    pages: document.getElementById(\"edit-book-pages\").value,\r\n+    isbn: document.getElementById(\"edit-book-isbn\").value,\r\n+    pdf: document.getElementById(\"edit-pdf-file-name\").innerText || null,\r\n+    image: document.querySelector(\".edit-img-cover\").style.backgroundImage.replace(/^url\\([\"']?/, '').replace(/[\"']?\\)$/, ''),\r\n+    goodsread: document.getElementById(\"edit-web-link\").value,\r\n+    amazon: document.getElementById(\"edit-web-link\").value\r\n+  };\r\n+\r\n+  await fetch(`/update-book/${bookId}`, {\r\n+    method: \"PUT\",\r\n+    headers: { \"Content-Type\": \"application/json\" },\r\n+    body: JSON.stringify(updatedBook)\r\n+  });\r\n+\r\n+  // Refresh list\r\n+  const res = await fetch(\"/get-books\");\r\n+  const books = await res.json();\r\n+  renderBooks(books);\r\n+\r\n+  // Close modal\r\n+  modal.setAttribute(\"aria-hidden\", \"true\");\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+function openEditModal(book) {\r\n+  // Show modal\r\n+  const modal = document.getElementById(\"edit-book-modal\");\r\n+  modal.setAttribute(\"aria-hidden\", \"false\");\r\n+\r\n+  // Fill inputs\r\n+  document.getElementById(\"edit-book-title\").value = book.title || \"\";\r\n+  document.getElementById(\"edit-book-description\").value = book.description || \"\";\r\n+  document.getElementById(\"edit-book-price\").value = book.price || \"\";\r\n+  document.getElementById(\"edit-book-category\").value = book.category || \"\";\r\n+  document.getElementById(\"edit-rating\").value = book.rating || \"3.0\";\r\n+  document.getElementById(\"edit-book-year\").value = book.year || \"\";\r\n+  document.getElementById(\"edit-book-pages\").value = book.pages || \"\";\r\n+  document.getElementById(\"edit-book-isbn\").value = book.isbn || \"\";\r\n+\r\n+  // Book type: PDF or PHYSICAL\r\n+  const bookTypeSelect = document.getElementById(\"edit-book-type\");\r\n+  if (book.pdf) {\r\n+    bookTypeSelect.value = \"PDF\";\r\n+    document.getElementById(\"edit-bookpdf\").style.display = \"block\";\r\n+    document.querySelector(\".edit-physical-link\").style.display = \"none\";\r\n+    document.getElementById(\"edit-pdf-file-name\").innerText = book.pdf;\r\n+  } else {\r\n+    bookTypeSelect.value = \"PHYSICAL\";\r\n+    document.getElementById(\"edit-bookpdf\").style.display = \"none\";\r\n+    document.querySelector(\".edit-physical-link\").style.display = \"block\";\r\n+    document.getElementById(\"edit-web-link\").value = book.goodsread || book.amazon || \"\";\r\n+  }\r\n+\r\n+  // Cover image preview\r\n+  const imgCover = document.querySelector(\".edit-img-cover\");\r\n+  if (book.image) {\r\n+    imgCover.style.backgroundImage = `url(${book.image})`;\r\n+    imgCover.style.backgroundSize = \"cover\";\r\n+    imgCover.style.backgroundPosition = \"center\";\r\n+  } else {\r\n+    imgCover.style.backgroundImage = \"none\";\r\n+  }\r\n+}\r\n+\r\n+// Close modal handlers\r\n+document.getElementById(\"edit-book-modal-close\").addEventListener(\"click\", () => {\r\n+  document.getElementById(\"edit-book-modal\").setAttribute(\"aria-hidden\", \"true\");\r\n+});\r\n+document.getElementById(\"edit-book-cancel\").addEventListener(\"click\", () => {\r\n+  document.getElementById(\"edit-book-modal\").setAttribute(\"aria-hidden\", \"true\");\r\n+});\r\n+\r\n+\r\n+  // Listen for clicks on the tbody\r\n+  document.getElementById(\"books-tbody\").addEventListener(\"click\", function (e) {\r\n+    const btn = e.target;\r\n+    const id = btn.dataset.id;\r\n+\r\n+    if (!id) return;\r\n+\r\n+    if (btn.dataset.action === \"edit\") {\r\n+      // Find the book object by id from your books array\r\n+      const book = books.find(b => b.id == id);\r\n+      if (book) {\r\n+        openBookModal(book); // call your modal function\r\n+      }\r\n+    }\r\n+\r\n+    if (btn.dataset.action === \"delete\") {\r\n+      // Call delete function here\r\n+      deleteBook(id);\r\n+    }\r\n+  });\r\n+\r\n+\r\n+  function setupDeleteBooks() {\r\n+    const tbody = document.getElementById('books-tbody');\r\n+\r\n+    // Use event delegation so dynamically added rows also work\r\n+    tbody.addEventListener('click', async function (e) {\r\n+      const btn = e.target.closest('button[data-action=\"delete\"]');\r\n+      if (!btn) return;\r\n+\r\n+      const bookId = btn.getAttribute('data-id');\r\n+      if (!bookId) return;\r\n+\r\n+      if (!confirm(\"Are you sure you want to delete this book?\")) return;\r\n+\r\n+      try {\r\n+        const res = await fetch(`http://127.0.0.1:5000/delete-book/${bookId}`, {\r\n+          method: 'DELETE'\r\n+        });\r\n+\r\n+        if (res.ok) {\r\n+          alert(\"Book deleted successfully!\");\r\n+          // Remove row from table without refresh\r\n+          btn.closest('tr').remove();\r\n+        } else {\r\n+          const data = await res.json();\r\n+          alert(\"Failed to delete book: \" + (data.error || 'Unknown error'));\r\n+        }\r\n+      } catch (err) {\r\n+        console.error(\"Error deleting book:\", err);\r\n+        alert(\"Request error. Check console for details.\");\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  // Call this function after rendering books\r\n+  setupDeleteBooks();\r\n+\r\n+\r\n+  function openBookModal(book = null) {\r\n+    const modal = $('#book-modal');\r\n+    const form = $('#book-form');\r\n+    const titleEl = $('#book-modal-title');\r\n+    const submitBtn = $('#book-submit');\r\n+    const typeSel = $('#book-type');\r\n+\r\n+    form.reset();\r\n+    form.dataset.editId = book?.id || '';\r\n+\r\n+    if (book) {\r\n+      titleEl.textContent = 'Edit Book';\r\n+      submitBtn.textContent = 'Save Changes';\r\n+      $('#book-title').value = book.title;\r\n+      $('#book-price').value = book.price;\r\n+      $('#book-category').value = book.category;\r\n+      typeSel.value = book.type || (book.pdf ? 'PDF' : 'PHYSICAL');\r\n+    } else {\r\n+      titleEl.textContent = 'Add New Book';\r\n+      submitBtn.textContent = 'Add New Book';\r\n+    }\r\n+\r\n+    modal.classList.add('show');\r\n+    modal.setAttribute('aria-hidden', 'false');\r\n+  }\r\n+\r\n+  function closeBookModal() {\r\n+    const modal = $('#book-modal');\r\n+    modal.classList.remove('show');\r\n+    modal.setAttribute('aria-hidden', 'true');\r\n+  }\r\n+\r\n+  /*** USERS ***/\r\n+  async function fetchUsers() {\r\n+    try {\r\n+      const res = await fetch(\"http://127.0.0.1:5000/get-users\");\r\n+      if (!res.ok) throw new Error(\"Failed to fetch users\");\r\n+      return await res.json();\r\n+    } catch (err) {\r\n+      console.error(\"Error fetching users:\", err);\r\n+      return [];\r\n+    }\r\n+  }\r\n+\r\n+ function renderUsers(users) {\r\n+    const tbody = $('#users-tbody');\r\n+    tbody.innerHTML = (users || []).map((user, index) => `\r\n+      <tr>\r\n+        <td>${user.FullName || ''}</td>\r\n+        <td>${(user.Email || '').length > 25 ? (user.Email.slice(0, 15) + '…') : user.Email}</td>\r\n+        <td>${(user.Paid_Book || '').length > 20 ? (user.Paid_Book.slice(0, 20) + '…') : user.Paid_Book}</td>\r\n+        <td>${user.Date_Joined || ''}</td>\r\n+        <td><button class=\"view-btn\" data-index=\"${index}\">View</button></td>\r\n+      </tr>\r\n+    `).join('');\r\n+\r\n+    // Attach click event to each \"View\" button\r\n+    tbody.querySelectorAll('.view-btn').forEach(btn => {\r\n+      btn.addEventListener('click', () => openUserModal(users[btn.dataset.index]));\r\n+    });\r\n+  }\r\n+\r\n+  function openUserModal(user) {\r\n+    if (!user) return;\r\n+    $('#u-fullname').textContent = user.FullName || user.name || '';\r\n+    $('#u-email').textContent = user.Email || user.email || '';\r\n+    $('#u-joined').textContent = user.Date_Joined || user.joined || '';\r\n+    $('#u-books').innerHTML = ((user.Paid_Book || '').toString())\r\n+      .split(',')\r\n+      .map(book => `<span class=\"chip\">${book.trim()}</span>`)\r\n+      .join('');\r\n+    \r\n+    const modal = $('#user-modal');\r\n+    modal.classList.add('show');\r\n+    modal.setAttribute('aria-hidden', 'false');\r\n+  }\r\n+\r\n+  // Close modal\r\n+  $('#user-modal-close').addEventListener('click', () => {\r\n+    const modal = $('#user-modal');\r\n+    modal.classList.remove('show');\r\n+    modal.setAttribute('aria-hidden', 'true');\r\n+  });\r\n+  function closeUserModal() {\r\n+    $('#user-modal').classList.remove('show');\r\n+    $('#user-modal').setAttribute('aria-hidden', 'true');\r\n+  }\r\n+\r\n+  /*** DASHBOARD REFRESH ***/\r\n+  async function refreshDashboard() {\r\n+    const books = await fetchBooks();\r\n+    const users = await fetchUsers();\r\n+\r\n+    // Total books\r\n+    $('#stat-total-books').textContent = books.length;\r\n+\r\n+    // Total PDFs\r\n+    const pdfCount = books.filter(b => b.pdf).length;\r\n+    $('#stat-pdf').textContent = pdfCount;\r\n+\r\n+    // Total physical books (goodsread + amazon)\r\n+    const physicalCount = books.filter(b => b.goodsread || b.amazon).length;\r\n+    $('#stat-physical').textContent = physicalCount;\r\n+\r\n+    // Total books paid by users\r\n+    const totalPaidBooks = users.reduce((sum, u) => {\r\n+      const paid = u.Paid_Book ? u.Paid_Book.split(',').length : 0;\r\n+      return sum + paid;\r\n+    }, 0);\r\n+    $('#stat-orders').textContent = totalPaidBooks;\r\n+\r\n+    // Render tables\r\n+    renderBooks(books);\r\n+    renderUsers(users);\r\n+  }\r\n+\r\n+  /*** TABLE CLICK HANDLERS ***/\r\n+  function onBooksTableClick(e) {\r\n+    const btn = e.target.closest('button');\r\n+    if (!btn) return;\r\n+    // handle edit/delete externally if needed\r\n+  }\r\n+\r\n+  function onUsersTableClick(e) {\r\n+    const btn = e.target.closest('button');\r\n+    if (!btn) return;\r\n+    // handle view externally if needed\r\n+  }\r\n+\r\n+  /*** NAVIGATION + SIDEBAR ***/\r\n+  function setupNav() {\r\n+    $$('.menu-item').forEach(btn => btn.addEventListener('click', () => switchSection(btn.dataset.target)));\r\n+    $('#btn-open-add-book').addEventListener('click', () => openBookModal());\r\n+    $('#books-tbody').addEventListener('click', onBooksTableClick);\r\n+    $('#users-tbody').addEventListener('click', onUsersTableClick);\r\n+    $('#book-modal-close').addEventListener('click', closeBookModal);\r\n+    $('#book-cancel').addEventListener('click', closeBookModal);\r\n+    $('#user-modal-close').addEventListener('click', closeUserModal);\r\n+    $('#burger').addEventListener('click', () => $('.sidebar').classList.toggle('open'));\r\n+  }\r\n+\r\n+  /*** INIT INTERFACE ***/\r\n+  setupNav();\r\n+  refreshDashboard();\r\n+})();\r\n"
                }
            ],
            "date": 1757578338397,
            "name": "Commit-0",
            "content": "/* Minimal, readable JS for the Admin dashboard. Uses localStorage for demo data. */\r\n(function(){\r\n  \"use strict\";\r\n\r\n  const $ = (sel, root=document) => root.querySelector(sel);\r\n  const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));\r\n\r\n  const SECTIONS = {\r\n    dashboard: $('#dashboard'),\r\n    books: $('#books'),\r\n    users: $('#users')\r\n  };\r\n\r\n  const STORAGE_KEYS = {\r\n    books: 'hs_books',\r\n    users: 'hs_users',\r\n    orders: 'hs_orders'\r\n  };\r\n\r\n  function getData(key, fallback){\r\n    try{ return JSON.parse(localStorage.getItem(key)) ?? fallback; }catch{ return fallback; }\r\n  }\r\n  function setData(key, value){ localStorage.setItem(key, JSON.stringify(value)); }\r\n\r\n  // Seed demo data if empty\r\n  async function seed() {\r\n    const seeded = getData('hs_seeded', false);\r\n    if (seeded) return;\r\n\r\n    try {\r\n        // Fetch all books from backend\r\n        const response = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n        const books = await response.json();\r\n\r\n        if (!books || books.length === 0) {\r\n            console.warn(\"No books fetched from database, using demo data.\");\r\n            return;\r\n        }\r\n\r\n        // Optionally, you can still seed demo users or orders\r\n        const demoUsers = [\r\n            {id: crypto.randomUUID(), name:'Demo User', email:'demo@example.com', purchases:[], joined:'10/11/2025', blocked:false},\r\n        ];\r\n        const demoOrders = 15;\r\n\r\n        // Save to localStorage\r\n        setData(STORAGE_KEYS.books, books);\r\n        setData(STORAGE_KEYS.users, demoUsers);\r\n        setData(STORAGE_KEYS.orders, demoOrders);\r\n        setData('hs_seeded', true);\r\n\r\n        console.log(\"[DEBUG] Books seeded from database:\", books);\r\n\r\n    } catch (err) {\r\n        console.error(\"Failed to fetch books from backend:\", err);\r\n    }\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", seed);\r\n\r\n  function switchSection(target){\r\n    Object.values(SECTIONS).forEach(s => s.classList.remove('visible'));\r\n    SECTIONS[target].classList.add('visible');\r\n    $$('.menu-item').forEach(b => b.classList.toggle('active', b.dataset.target===target));\r\n  }\r\n\r\n  // Dashboard counters\r\n  function refreshStats(){\r\n    const books = getData(STORAGE_KEYS.books, []);\r\n    const total = books.length;\r\n    const pdf = books.filter(b => b.type==='PDF').length;\r\n    const physical = books.filter(b => b.type==='PHYSICAL').length;\r\n    const orders = getData(STORAGE_KEYS.orders, 0);\r\n    $('#stat-total-books').textContent = total;\r\n    $('#stat-pdf').textContent = pdf;\r\n    $('#stat-physical').textContent = physical;\r\n    $('#stat-orders').textContent = orders;\r\n  }\r\n\r\n  // BOOK MANAGEMENT\r\n  function renderBooks(){\r\n    const tbody = $('#books-tbody');\r\n    const books = getData(STORAGE_KEYS.books, []);\r\n    tbody.innerHTML = books.map(b => `\r\n      <tr>\r\n        <td>${b.title}</td>\r\n        <td>${b.category}</td>\r\n        <td>$${Number(b.price).toFixed(2)}</td>\r\n        <td>${b.type}</td>\r\n        <td><button data-action=\"edit\" data-id=\"${b.id}\">EDIT</button></td>\r\n        <td><button data-action=\"delete\" data-id=\"${b.id}\">DELETE</button></td>\r\n      </tr>\r\n    `).join('');\r\n  }\r\n\r\n  function openBookModal(editId){\r\n    const modal = $('#book-modal');\r\n    const titleEl = $('#book-modal-title');\r\n    const submitBtn = $('#book-submit');\r\n    const form = $('#book-form');\r\n    const typeSel = $('#book-type');\r\n    const fields = {\r\n      title: $('#book-title'),\r\n      description: $('#book-description'),\r\n      price: $('#book-price'),\r\n      category: $('#book-category'),\r\n      rating: $('#book-rating'),\r\n      year: $('#book-year'),\r\n      pages: $('#book-pages'),\r\n      isbn: $('#book-isbn')\r\n    };\r\n    form.reset();\r\n    form.dataset.editId = editId || '';\r\n    if(editId){\r\n      const book = getData(STORAGE_KEYS.books, []).find(b => b.id===editId);\r\n      if(book){\r\n        titleEl.textContent = 'Edit Book';\r\n        submitBtn.textContent = 'Save Changes';\r\n        fields.title.value = book.title;\r\n        fields.price.value = book.price;\r\n        fields.category.value = book.category;\r\n        typeSel.value = book.type;\r\n      }\r\n    } else {\r\n      titleEl.textContent = 'Add New Books';\r\n      submitBtn.textContent = 'Add New Book';\r\n    }\r\n    modal.classList.add('show');\r\n    modal.setAttribute('aria-hidden', 'false');\r\n  }\r\n\r\n  function closeBookModal(){\r\n    const modal = $('#book-modal');\r\n    modal.classList.remove('show');\r\n    modal.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  function handleBookSubmit(e){\r\n    e.preventDefault();\r\n    const books = getData(STORAGE_KEYS.books, []);\r\n    const typeSel = $('#book-type');\r\n    const newData = {\r\n      title: $('#book-title').value.trim(),\r\n      category: $('#book-category').value.trim(),\r\n      price: Number($('#book-price').value || 0),\r\n      type: typeSel.value\r\n    };\r\n    const editId = e.currentTarget.dataset.editId;\r\n    if(editId){\r\n      const idx = books.findIndex(b => b.id===editId);\r\n      if(idx>-1) books[idx] = {...books[idx], ...newData};\r\n    }else{\r\n      books.push({id: crypto.randomUUID(), ...newData});\r\n    }\r\n    setData(STORAGE_KEYS.books, books);\r\n    closeBookModal();\r\n    renderBooks();\r\n    refreshStats();\r\n  }\r\n\r\n  function onBooksTableClick(e){\r\n    const btn = e.target.closest('button');\r\n    if(!btn) return;\r\n    const id = btn.dataset.id;\r\n    const action = btn.dataset.action;\r\n    if(action==='edit') openBookModal(id);\r\n    if(action==='delete'){\r\n      const books = getData(STORAGE_KEYS.books, []);\r\n      setData(STORAGE_KEYS.books, books.filter(b => b.id!==id));\r\n      renderBooks();\r\n      refreshStats();\r\n    }\r\n  }\r\n\r\n  // USERS MANAGEMENT\r\n  function renderUsers(){\r\n    const tbody = $('#users-tbody');\r\n    const users = getData(STORAGE_KEYS.users, []);\r\n    tbody.innerHTML = users.map(u => `\r\n      <tr>\r\n        <td>${u.name}</td>\r\n        <td>${u.email}</td>\r\n        <td>${(u.purchases?.[0]||'').slice(0,16) || ''}</td>\r\n        <td>${u.joined || ''}</td>\r\n        <td><button data-action=\"view\" data-id=\"${u.id}\">View</button></td>\r\n      </tr>\r\n    `).join('');\r\n  }\r\n\r\n  function openUserModal(id){\r\n    const users = getData(STORAGE_KEYS.users, []);\r\n    const user = users.find(u => u.id===id);\r\n    if(!user) return;\r\n    $('#u-fullname').textContent = user.name;\r\n    $('#u-email').textContent = user.email;\r\n    $('#u-joined').textContent = user.joined || '';\r\n    const chips = $('#u-books');\r\n    chips.innerHTML = (user.purchases||[]).map(t => `<span class=\"chip\">${t}</span>`).join('');\r\n    $('#user-delete').onclick = function(){\r\n      setData(STORAGE_KEYS.users, users.filter(u => u.id!==id));\r\n      closeUserModal();\r\n      renderUsers();\r\n    };\r\n    $('#user-block').onclick = function(){\r\n      const idx = users.findIndex(u => u.id===id);\r\n      if(idx>-1){ users[idx].blocked = !users[idx].blocked; setData(STORAGE_KEYS.users, users); }\r\n      closeUserModal();\r\n      renderUsers();\r\n    };\r\n    $('#user-modal').classList.add('show');\r\n    $('#user-modal').setAttribute('aria-hidden','false');\r\n  }\r\n\r\n  function closeUserModal(){\r\n    $('#user-modal').classList.remove('show');\r\n    $('#user-modal').setAttribute('aria-hidden','true');\r\n  }\r\n\r\n  function onUsersTableClick(e){\r\n    const btn = e.target.closest('button');\r\n    if(!btn) return;\r\n    if(btn.dataset.action==='view') openUserModal(btn.dataset.id);\r\n  }\r\n\r\n  // NAV + responsive sidebar\r\n  function setupNav(){\r\n    $$('.menu-item').forEach(b => b.addEventListener('click', ()=> switchSection(b.dataset.target)));\r\n    $('#btn-open-add-book').addEventListener('click', ()=> openBookModal());\r\n    $('#books-tbody').addEventListener('click', onBooksTableClick);\r\n    $('#users-tbody').addEventListener('click', onUsersTableClick);\r\n    $('#book-modal-close').addEventListener('click', closeBookModal);\r\n    $('#book-cancel').addEventListener('click', closeBookModal);\r\n    $('#book-form').addEventListener('submit', handleBookSubmit);\r\n    $('#user-modal-close').addEventListener('click', closeUserModal);\r\n    $('#burger').addEventListener('click', ()=> $('.sidebar').classList.toggle('open'));\r\n  }\r\n\r\n  // init\r\n  seed();\r\n  setupNav();\r\n  renderBooks();\r\n  renderUsers();\r\n  refreshStats();\r\n})();\r\n\r\n\r\n"
        }
    ]
}
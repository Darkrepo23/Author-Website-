{
    "sourceFile": "cart.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 104,
            "patches": [
                {
                    "date": 1756807735778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756809070016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n     constructor() {\r\n         this.items = this.loadCartFromStorage();\r\n         this.shippingCost = 5.99;\r\n         this.taxRate = 0.08; // 8% tax rate\r\n-        \r\n+\r\n         // Sample book data for demonstration\r\n         this.bookData = {\r\n             'java-complete': {\r\n                 id: 'java-complete',\r\n@@ -42,27 +42,27 @@\n                 price: 44.99,\r\n                 image: '../img/books/Java2.jpg'\r\n             }\r\n         };\r\n-        \r\n+\r\n         this.init();\r\n     }\r\n-    \r\n+\r\n     init() {\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.bindEvents();\r\n         this.addSampleItems(); // Add some sample items for demonstration\r\n     }\r\n-    \r\n+\r\n     // Add sample items for demonstration\r\n     addSampleItems() {\r\n         if (this.items.length === 0) {\r\n             this.addItem('java-complete', 1);\r\n             this.addItem('c-complete', 1);\r\n         }\r\n     }\r\n-    \r\n+\r\n     // Load cart from localStorage\r\n     loadCartFromStorage() {\r\n         try {\r\n             const saved = localStorage.getItem('herbertSchildtCart');\r\n@@ -71,28 +71,28 @@\n             console.error('Error loading cart from storage:', error);\r\n             return [];\r\n         }\r\n     }\r\n-    \r\n+\r\n     // Save cart to localStorage\r\n     saveCartToStorage() {\r\n         try {\r\n             localStorage.setItem('herbertSchildtCart', JSON.stringify(this.items));\r\n         } catch (error) {\r\n             console.error('Error saving cart to storage:', error);\r\n         }\r\n     }\r\n-    \r\n+\r\n     // Add item to cart\r\n     addItem(bookId, quantity = 1) {\r\n         const book = this.bookData[bookId];\r\n         if (!book) {\r\n             console.error('Book not found:', bookId);\r\n             return;\r\n         }\r\n-        \r\n+\r\n         const existingItem = this.items.find(item => item.id === bookId);\r\n-        \r\n+\r\n         if (existingItem) {\r\n             existingItem.quantity += quantity;\r\n         } else {\r\n             this.items.push({\r\n@@ -103,133 +103,126 @@\n                 image: book.image,\r\n                 quantity: quantity\r\n             });\r\n         }\r\n-        \r\n+\r\n         this.saveCartToStorage();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n-    \r\n+\r\n     // Remove item from cart\r\n     removeItem(bookId) {\r\n         this.items = this.items.filter(item => item.id !== bookId);\r\n         this.saveCartToStorage();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.showNotification('Item removed from cart');\r\n     }\r\n-    \r\n+\r\n     // Update item quantity\r\n     updateQuantity(bookId, newQuantity) {\r\n         if (newQuantity <= 0) {\r\n             this.removeItem(bookId);\r\n             return;\r\n         }\r\n-        \r\n+\r\n         const item = this.items.find(item => item.id === bookId);\r\n         if (item) {\r\n             item.quantity = newQuantity;\r\n             this.saveCartToStorage();\r\n             this.renderCart();\r\n             this.updateCartCount();\r\n         }\r\n     }\r\n-    \r\n+\r\n     // Clear entire cart\r\n     clearCart() {\r\n         if (this.items.length === 0) return;\r\n-        \r\n+\r\n         if (confirm('Are you sure you want to clear all items from your cart?')) {\r\n             this.items = [];\r\n             this.saveCartToStorage();\r\n             this.renderCart();\r\n             this.updateCartCount();\r\n             this.showNotification('Cart cleared');\r\n         }\r\n     }\r\n-    \r\n+\r\n     // Calculate subtotal\r\n     calculateSubtotal() {\r\n         return this.items.reduce((total, item) => total + (item.price * item.quantity), 0);\r\n     }\r\n-    \r\n+\r\n     // Calculate tax\r\n     calculateTax() {\r\n         return this.calculateSubtotal() * this.taxRate;\r\n     }\r\n-    \r\n+\r\n     // Calculate total\r\n     calculateTotal() {\r\n         const subtotal = this.calculateSubtotal();\r\n         const tax = this.calculateTax();\r\n         return subtotal + tax + this.shippingCost;\r\n     }\r\n-    \r\n+\r\n     // Update cart count in header\r\n     updateCartCount() {\r\n         const count = this.items.reduce((total, item) => total + item.quantity, 0);\r\n         const cartCountElement = document.getElementById('cart-count');\r\n         if (cartCountElement) {\r\n             cartCountElement.textContent = count;\r\n         }\r\n     }\r\n-    \r\n+\r\n     // Render cart items\r\n-    renderCart() {\r\n-        const cartItemsContainer = document.getElementById('cart-items');\r\n-        if (!cartItemsContainer) return;\r\n-        \r\n-        if (this.items.length === 0) {\r\n-            cartItemsContainer.innerHTML = `\r\n-                <div class=\"empty-cart\">\r\n-                    <div class=\"empty-cart-content\">\r\n-                        <img src=\"../img/books/Java Complete.jpg\" alt=\"Empty Cart\" class=\"empty-cart-image\">\r\n-                        <h3>Your cart is empty</h3>\r\n-                        <p>Add some books to get started!</p>\r\n-                        <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n-                    </div>\r\n+renderCart() {\r\n+    const cartItemsContainer = document.getElementById('cart-items');\r\n+    if (!cartItemsContainer) return;\r\n+\r\n+    if (this.items.length === 0) {\r\n+        cartItemsContainer.innerHTML = `\r\n+            <div class=\"empty-cart\">\r\n+                <div class=\"empty-cart-content\">\r\n+                    <img src=\"../img/books/Java Complete.jpg\" alt=\"Empty Cart\" class=\"empty-cart-image\">\r\n+                    <h3>Your cart is empty</h3>\r\n+                    <p>Add some books to get started!</p>\r\n+                    <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n                 </div>\r\n-            `;\r\n-        } else {\r\n-            cartItemsContainer.innerHTML = this.items.map(item => `\r\n-                <div class=\"cart-item\" data-book-id=\"${item.id}\">\r\n-                    <img src=\"${item.image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n-                    <div class=\"cart-item-details\">\r\n-                        <h3 class=\"cart-item-title\">${item.title}</h3>\r\n-                        <p class=\"cart-item-author\">by ${item.author}</p>\r\n-                        <p class=\"cart-item-price\">$${item.price.toFixed(2)}</p>\r\n-                    </div>\r\n-                    <div class=\"cart-item-controls\">\r\n-                        <div class=\"quantity-controls\">\r\n-                            <button class=\"quantity-btn\" onclick=\"cart.updateQuantity('${item.id}', ${item.quantity - 1})\">-</button>\r\n-                            <input type=\"number\" class=\"quantity-input\" value=\"${item.quantity}\" min=\"1\" \r\n-                                   onchange=\"cart.updateQuantity('${item.id}', parseInt(this.value))\">\r\n-                            <button class=\"quantity-btn\" onclick=\"cart.updateQuantity('${item.id}', ${item.quantity + 1})\">+</button>\r\n-                        </div>\r\n-                        <button class=\"remove-btn\" onclick=\"cart.removeItem('${item.id}')\">Remove</button>\r\n-                    </div>\r\n+            </div>\r\n+        `;\r\n+    } else {\r\n+        cartItemsContainer.innerHTML = this.items.map(item => `\r\n+            <div class=\"cart-item\" data-book-id=\"${item.id}\">\r\n+                <img src=\"${item.image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n+                <div class=\"cart-item-details\">\r\n+                    <h3 class=\"cart-item-title\">${item.title}</h3>\r\n+                    <p class=\"cart-item-author\">by ${item.author}</p>\r\n+                    <p class=\"cart-item-price\">$${item.price.toFixed(2)}</p>\r\n                 </div>\r\n-            `).join('');\r\n-        }\r\n-        \r\n-        this.updateSummary();\r\n+                <div class=\"cart-item-controls\">\r\n+                    <button class=\"remove-btn\" onclick=\"cart.removeItem('${item.id}')\">Remove</button>\r\n+                </div>\r\n+            </div>\r\n+        `).join('');\r\n     }\r\n-    \r\n-    // Update order summary\r\n-updateSummary() {\r\n-    const subtotal = this.calculateSubtotal();\r\n \r\n-    // Update subtotal element\r\n-    document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;\r\n+    this.updateSummary();\r\n+}\r\n+ order summary\r\n+    updateSummary() {\r\n+        const subtotal = this.calculateSubtotal();\r\n \r\n-    // Enable/disable checkout button\r\n-    const checkoutBtn = document.getElementById('checkout-btn');\r\n-    if (checkoutBtn) {\r\n-        checkoutBtn.disabled = this.items.length === 0;\r\n+        // Update subtotal element\r\n+        document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;\r\n+\r\n+        // Enable/disable checkout button\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n+        if (checkoutBtn) {\r\n+            checkoutBtn.disabled = this.items.length === 0;\r\n+        }\r\n     }\r\n-}\r\n \r\n     // Show notification\r\n     showNotification(message) {\r\n         // Create notification element\r\n@@ -247,11 +240,11 @@\n             font-family: 'Inter Medium';\r\n             z-index: 1000;\r\n             animation: slideInRight 0.3s ease;\r\n         `;\r\n-        \r\n+\r\n         document.body.appendChild(notification);\r\n-        \r\n+\r\n         // Remove notification after 3 seconds\r\n         setTimeout(() => {\r\n             notification.style.animation = 'slideOutRight 0.3s ease';\r\n             setTimeout(() => {\r\n@@ -260,40 +253,40 @@\n                 }\r\n             }, 300);\r\n         }, 3000);\r\n     }\r\n-    \r\n+\r\n     // Bind event listeners\r\n     bindEvents() {\r\n         // Clear cart button\r\n         const clearCartBtn = document.getElementById('clear-cart');\r\n         if (clearCartBtn) {\r\n             clearCartBtn.addEventListener('click', () => this.clearCart());\r\n         }\r\n-        \r\n+\r\n         // Checkout button\r\n         const checkoutBtn = document.getElementById('checkout-btn');\r\n         if (checkoutBtn) {\r\n             checkoutBtn.addEventListener('click', () => this.proceedToCheckout());\r\n         }\r\n-        \r\n+\r\n         // Add to cart buttons in recommended section\r\n         document.addEventListener('click', (e) => {\r\n             if (e.target.classList.contains('add-to-cart-btn')) {\r\n                 const bookId = e.target.getAttribute('data-book-id');\r\n                 this.addItem(bookId, 1);\r\n             }\r\n         });\r\n     }\r\n-    \r\n+\r\n     // Proceed to checkout (placeholder)\r\n     proceedToCheckout() {\r\n         if (this.items.length === 0) return;\r\n-        \r\n+\r\n         // In a real application, this would redirect to a checkout page\r\n         // For now, we'll show an alert\r\n         alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n-        \r\n+\r\n         // You can integrate this with your groupmate's checkout system\r\n         console.log('Checkout data:', {\r\n             items: this.items,\r\n             subtotal: this.calculateSubtotal(),\r\n@@ -301,9 +294,9 @@\n             shipping: this.shippingCost,\r\n             total: this.calculateTotal()\r\n         });\r\n     }\r\n-    \r\n+\r\n     // Get cart data for integration with other pages\r\n     getCartData() {\r\n         return {\r\n             items: this.items,\r\n"
                },
                {
                    "date": 1756809077907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,42 +175,49 @@\n         }\r\n     }\r\n \r\n     // Render cart items\r\n-renderCart() {\r\n-    const cartItemsContainer = document.getElementById('cart-items');\r\n-    if (!cartItemsContainer) return;\r\n+    renderCart() {\r\n+        const cartItemsContainer = document.getElementById('cart-items');\r\n+        if (!cartItemsContainer) return;\r\n \r\n-    if (this.items.length === 0) {\r\n-        cartItemsContainer.innerHTML = `\r\n-            <div class=\"empty-cart\">\r\n-                <div class=\"empty-cart-content\">\r\n-                    <img src=\"../img/books/Java Complete.jpg\" alt=\"Empty Cart\" class=\"empty-cart-image\">\r\n-                    <h3>Your cart is empty</h3>\r\n-                    <p>Add some books to get started!</p>\r\n-                    <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n+        if (this.items.length === 0) {\r\n+            cartItemsContainer.innerHTML = `\r\n+                <div class=\"empty-cart\">\r\n+                    <div class=\"empty-cart-content\">\r\n+                        <img src=\"../img/books/Java Complete.jpg\" alt=\"Empty Cart\" class=\"empty-cart-image\">\r\n+                        <h3>Your cart is empty</h3>\r\n+                        <p>Add some books to get started!</p>\r\n+                        <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n+                    </div>\r\n                 </div>\r\n-            </div>\r\n-        `;\r\n-    } else {\r\n-        cartItemsContainer.innerHTML = this.items.map(item => `\r\n-            <div class=\"cart-item\" data-book-id=\"${item.id}\">\r\n-                <img src=\"${item.image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n-                <div class=\"cart-item-details\">\r\n-                    <h3 class=\"cart-item-title\">${item.title}</h3>\r\n-                    <p class=\"cart-item-author\">by ${item.author}</p>\r\n-                    <p class=\"cart-item-price\">$${item.price.toFixed(2)}</p>\r\n+            `;\r\n+        } else {\r\n+            cartItemsContainer.innerHTML = this.items.map(item => `\r\n+                <div class=\"cart-item\" data-book-id=\"${item.id}\">\r\n+                    <img src=\"${item.image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n+                    <div class=\"cart-item-details\">\r\n+                        <h3 class=\"cart-item-title\">${item.title}</h3>\r\n+                        <p class=\"cart-item-author\">by ${item.author}</p>\r\n+                        <p class=\"cart-item-price\">$${item.price.toFixed(2)}</p>\r\n+                    </div>\r\n+                    <div class=\"cart-item-controls\">\r\n+                        <div class=\"quantity-controls\">\r\n+                            <button class=\"quantity-btn\" onclick=\"cart.updateQuantity('${item.id}', ${item.quantity - 1})\">-</button>\r\n+                            <input type=\"number\" class=\"quantity-input\" value=\"${item.quantity}\" min=\"1\" \r\n+                                   onchange=\"cart.updateQuantity('${item.id}', parseInt(this.value))\">\r\n+                            <button class=\"quantity-btn\" onclick=\"cart.updateQuantity('${item.id}', ${item.quantity + 1})\">+</button>\r\n+                        </div>\r\n+                        <button class=\"remove-btn\" onclick=\"cart.removeItem('${item.id}')\">Remove</button>\r\n+                    </div>\r\n                 </div>\r\n-                <div class=\"cart-item-controls\">\r\n-                    <button class=\"remove-btn\" onclick=\"cart.removeItem('${item.id}')\">Remove</button>\r\n-                </div>\r\n-            </div>\r\n-        `).join('');\r\n+            `).join('');\r\n+        }\r\n+\r\n+        this.updateSummary();\r\n     }\r\n \r\n-    this.updateSummary();\r\n-}\r\n- order summary\r\n+    // Update order summary\r\n     updateSummary() {\r\n         const subtotal = this.calculateSubtotal();\r\n \r\n         // Update subtotal element\r\n"
                },
                {
                    "date": 1756809089492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,48 +175,43 @@\n         }\r\n     }\r\n \r\n     // Render cart items\r\n-    renderCart() {\r\n-        const cartItemsContainer = document.getElementById('cart-items');\r\n-        if (!cartItemsContainer) return;\r\n+renderCart() {\r\n+    const cartItemsContainer = document.getElementById('cart-items');\r\n+    if (!cartItemsContainer) return;\r\n \r\n-        if (this.items.length === 0) {\r\n-            cartItemsContainer.innerHTML = `\r\n-                <div class=\"empty-cart\">\r\n-                    <div class=\"empty-cart-content\">\r\n-                        <img src=\"../img/books/Java Complete.jpg\" alt=\"Empty Cart\" class=\"empty-cart-image\">\r\n-                        <h3>Your cart is empty</h3>\r\n-                        <p>Add some books to get started!</p>\r\n-                        <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n-                    </div>\r\n+    if (this.items.length === 0) {\r\n+        cartItemsContainer.innerHTML = `\r\n+            <div class=\"empty-cart\">\r\n+                <div class=\"empty-cart-content\">\r\n+                    <img src=\"../img/books/Java Complete.jpg\" alt=\"Empty Cart\" class=\"empty-cart-image\">\r\n+                    <h3>Your cart is empty</h3>\r\n+                    <p>Add some books to get started!</p>\r\n+                    <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n                 </div>\r\n-            `;\r\n-        } else {\r\n-            cartItemsContainer.innerHTML = this.items.map(item => `\r\n-                <div class=\"cart-item\" data-book-id=\"${item.id}\">\r\n-                    <img src=\"${item.image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n-                    <div class=\"cart-item-details\">\r\n-                        <h3 class=\"cart-item-title\">${item.title}</h3>\r\n-                        <p class=\"cart-item-author\">by ${item.author}</p>\r\n-                        <p class=\"cart-item-price\">$${item.price.toFixed(2)}</p>\r\n-                    </div>\r\n-                    <div class=\"cart-item-controls\">\r\n-                        <div class=\"quantity-controls\">\r\n-                            <button class=\"quantity-btn\" onclick=\"cart.updateQuantity('${item.id}', ${item.quantity - 1})\">-</button>\r\n-                            <input type=\"number\" class=\"quantity-input\" value=\"${item.quantity}\" min=\"1\" \r\n-                                   onchange=\"cart.updateQuantity('${item.id}', parseInt(this.value))\">\r\n-                            <button class=\"quantity-btn\" onclick=\"cart.updateQuantity('${item.id}', ${item.quantity + 1})\">+</button>\r\n-                        </div>\r\n-                        <button class=\"remove-btn\" onclick=\"cart.removeItem('${item.id}')\">Remove</button>\r\n-                    </div>\r\n+            </div>\r\n+        `;\r\n+    } else {\r\n+        cartItemsContainer.innerHTML = this.items.map(item => `\r\n+            <div class=\"cart-item\" data-book-id=\"${item.id}\">\r\n+                <img src=\"${item.image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n+                <div class=\"cart-item-details\">\r\n+                    <h3 class=\"cart-item-title\">${item.title}</h3>\r\n+                    <p class=\"cart-item-author\">by ${item.author}</p>\r\n+                    <p class=\"cart-item-price\">$${item.price.toFixed(2)}</p>\r\n                 </div>\r\n-            `).join('');\r\n-        }\r\n-\r\n-        this.updateSummary();\r\n+                <div class=\"cart-item-controls\">\r\n+                    <button class=\"remove-btn\" onclick=\"cart.removeItem('${item.id}')\">Remove</button>\r\n+                </div>\r\n+            </div>\r\n+        `).join('');\r\n     }\r\n \r\n+    this.updateSummary();\r\n+}\r\n+\r\n+\r\n     // Update order summary\r\n     updateSummary() {\r\n         const subtotal = this.calculateSubtotal();\r\n \r\n"
                },
                {
                    "date": 1756821153409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,103 +1,51 @@\n // Cart functionality for Herbert Schildt Book Store\r\n class ShoppingCart {\r\n     constructor() {\r\n-        this.items = this.loadCartFromStorage();\r\n+        this.items = JSON.parse(localStorage.getItem('bookCart')) || []; // load from localStorage\r\n         this.shippingCost = 5.99;\r\n         this.taxRate = 0.08; // 8% tax rate\r\n+        this.booksData = []; // will store all-books.json data\r\n \r\n-        // Sample book data for demonstration\r\n-        this.bookData = {\r\n-            'java-complete': {\r\n-                id: 'java-complete',\r\n-                title: 'Java: The Complete Reference',\r\n-                author: 'Herbert Schildt',\r\n-                price: 49.99,\r\n-                image: '../img/books/Java Complete.jpg'\r\n-            },\r\n-            'c-complete': {\r\n-                id: 'c-complete',\r\n-                title: 'C: The Complete Reference',\r\n-                author: 'Herbert Schildt',\r\n-                price: 45.99,\r\n-                image: '../img/books/C,_The_Complete_Reference.jpg'\r\n-            },\r\n-            'cpp-complete': {\r\n-                id: 'cpp-complete',\r\n-                title: 'C++: The Complete Reference',\r\n-                author: 'Herbert Schildt',\r\n-                price: 47.99,\r\n-                image: '../img/books/c++ complete.jpg'\r\n-            },\r\n-            'java-cookbook': {\r\n-                id: 'java-cookbook',\r\n-                title: 'Java Cookbook',\r\n-                author: 'Herbert Schildt',\r\n-                price: 42.99,\r\n-                image: '../img/books/java cookbook.jpg'\r\n-            },\r\n-            'java2': {\r\n-                id: 'java2',\r\n-                title: 'Java 2: The Complete Reference',\r\n-                author: 'Herbert Schildt',\r\n-                price: 44.99,\r\n-                image: '../img/books/Java2.jpg'\r\n-            }\r\n-        };\r\n-\r\n         this.init();\r\n     }\r\n \r\n-    init() {\r\n+    async init() {\r\n+        await this.loadBooksData();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.bindEvents();\r\n-        this.addSampleItems(); // Add some sample items for demonstration\r\n     }\r\n \r\n-    // Add sample items for demonstration\r\n-    addSampleItems() {\r\n-        if (this.items.length === 0) {\r\n-            this.addItem('java-complete', 1);\r\n-            this.addItem('c-complete', 1);\r\n-        }\r\n-    }\r\n-\r\n-    // Load cart from localStorage\r\n-    loadCartFromStorage() {\r\n+    // Load all-books.json\r\n+    async loadBooksData() {\r\n         try {\r\n-            const saved = localStorage.getItem('herbertSchildtCart');\r\n-            return saved ? JSON.parse(saved) : [];\r\n-        } catch (error) {\r\n-            console.error('Error loading cart from storage:', error);\r\n-            return [];\r\n+            const response = await fetch('all-books.json');\r\n+            this.booksData = await response.json();\r\n+        } catch (err) {\r\n+            console.error('Error loading all-books.json:', err);\r\n         }\r\n     }\r\n \r\n     // Save cart to localStorage\r\n     saveCartToStorage() {\r\n-        try {\r\n-            localStorage.setItem('herbertSchildtCart', JSON.stringify(this.items));\r\n-        } catch (error) {\r\n-            console.error('Error saving cart to storage:', error);\r\n-        }\r\n+        localStorage.setItem('bookCart', JSON.stringify(this.items));\r\n     }\r\n \r\n     // Add item to cart\r\n-    addItem(bookId, quantity = 1) {\r\n-        const book = this.bookData[bookId];\r\n+    addItem(title, quantity = 1) {\r\n+        const book = this.booksData.find(b => b.title.trim() === title.trim());\r\n         if (!book) {\r\n-            console.error('Book not found:', bookId);\r\n+            console.error('Book not found in JSON:', title);\r\n             return;\r\n         }\r\n \r\n-        const existingItem = this.items.find(item => item.id === bookId);\r\n+        const existingItem = this.items.find(item => item.title === book.title);\r\n \r\n         if (existingItem) {\r\n             existingItem.quantity += quantity;\r\n         } else {\r\n             this.items.push({\r\n-                id: bookId,\r\n                 title: book.title,\r\n                 author: book.author,\r\n                 price: book.price,\r\n                 image: book.image,\r\n@@ -111,48 +59,60 @@\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n     // Remove item from cart\r\n-    removeItem(bookId) {\r\n-        this.items = this.items.filter(item => item.id !== bookId);\r\n+    removeItem(title) {\r\n+        this.items = this.items.filter(item => item.title !== title);\r\n         this.saveCartToStorage();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.showNotification('Item removed from cart');\r\n     }\r\n \r\n-    // Update item quantity\r\n-    updateQuantity(bookId, newQuantity) {\r\n-        if (newQuantity <= 0) {\r\n-            this.removeItem(bookId);\r\n-            return;\r\n-        }\r\n+    // Render cart items\r\n+    renderCart() {\r\n+        const cartItemsContainer = document.getElementById('cart-items');\r\n+        if (!cartItemsContainer) return;\r\n \r\n-        const item = this.items.find(item => item.id === bookId);\r\n-        if (item) {\r\n-            item.quantity = newQuantity;\r\n-            this.saveCartToStorage();\r\n-            this.renderCart();\r\n-            this.updateCartCount();\r\n+        if (this.items.length === 0) {\r\n+            cartItemsContainer.innerHTML = `\r\n+                <div class=\"empty-cart\">\r\n+                    <div class=\"empty-cart-content\">\r\n+                        <h3>Your cart is empty</h3>\r\n+                        <p>Add some books to get started!</p>\r\n+                        <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n+                    </div>\r\n+                </div>\r\n+            `;\r\n+        } else {\r\n+            cartItemsContainer.innerHTML = this.items.map(item => {\r\n+                // Find the image in booksData\r\n+                const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n+                const image = book ? book.image : '';\r\n+\r\n+                return `\r\n+                    <div class=\"cart-item\" data-title=\"${item.title}\">\r\n+                        <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n+                        <div class=\"cart-item-details\">\r\n+                            <h3 class=\"cart-item-title\">${item.title}</h3>\r\n+                            <p class=\"cart-item-author\">by ${item.author}</p>\r\n+                            <p class=\"cart-item-price\">$${item.price.toFixed(2)}</p>\r\n+                            <p class=\"cart-item-quantity\">Qty: ${item.quantity}</p>\r\n+                        </div>\r\n+                        <div class=\"cart-item-controls\">\r\n+                            <button class=\"remove-btn\" onclick=\"cart.removeItem('${item.title}')\">Remove</button>\r\n+                        </div>\r\n+                    </div>\r\n+                `;\r\n+            }).join('');\r\n         }\r\n-    }\r\n \r\n-    // Clear entire cart\r\n-    clearCart() {\r\n-        if (this.items.length === 0) return;\r\n-\r\n-        if (confirm('Are you sure you want to clear all items from your cart?')) {\r\n-            this.items = [];\r\n-            this.saveCartToStorage();\r\n-            this.renderCart();\r\n-            this.updateCartCount();\r\n-            this.showNotification('Cart cleared');\r\n-        }\r\n+        this.updateSummary();\r\n     }\r\n \r\n     // Calculate subtotal\r\n     calculateSubtotal() {\r\n-        return this.items.reduce((total, item) => total + (item.price * item.quantity), 0);\r\n+        return this.items.reduce((total, item) => total + item.price * item.quantity, 0);\r\n     }\r\n \r\n     // Calculate tax\r\n     calculateTax() {\r\n@@ -160,75 +120,29 @@\n     }\r\n \r\n     // Calculate total\r\n     calculateTotal() {\r\n-        const subtotal = this.calculateSubtotal();\r\n-        const tax = this.calculateTax();\r\n-        return subtotal + tax + this.shippingCost;\r\n+        return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n     }\r\n \r\n     // Update cart count in header\r\n     updateCartCount() {\r\n         const count = this.items.reduce((total, item) => total + item.quantity, 0);\r\n         const cartCountElement = document.getElementById('cart-count');\r\n-        if (cartCountElement) {\r\n-            cartCountElement.textContent = count;\r\n-        }\r\n+        if (cartCountElement) cartCountElement.textContent = count;\r\n     }\r\n \r\n-    // Render cart items\r\n-renderCart() {\r\n-    const cartItemsContainer = document.getElementById('cart-items');\r\n-    if (!cartItemsContainer) return;\r\n-\r\n-    if (this.items.length === 0) {\r\n-        cartItemsContainer.innerHTML = `\r\n-            <div class=\"empty-cart\">\r\n-                <div class=\"empty-cart-content\">\r\n-                    <img src=\"../img/books/Java Complete.jpg\" alt=\"Empty Cart\" class=\"empty-cart-image\">\r\n-                    <h3>Your cart is empty</h3>\r\n-                    <p>Add some books to get started!</p>\r\n-                    <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n-                </div>\r\n-            </div>\r\n-        `;\r\n-    } else {\r\n-        cartItemsContainer.innerHTML = this.items.map(item => `\r\n-            <div class=\"cart-item\" data-book-id=\"${item.id}\">\r\n-                <img src=\"${item.image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n-                <div class=\"cart-item-details\">\r\n-                    <h3 class=\"cart-item-title\">${item.title}</h3>\r\n-                    <p class=\"cart-item-author\">by ${item.author}</p>\r\n-                    <p class=\"cart-item-price\">$${item.price.toFixed(2)}</p>\r\n-                </div>\r\n-                <div class=\"cart-item-controls\">\r\n-                    <button class=\"remove-btn\" onclick=\"cart.removeItem('${item.id}')\">Remove</button>\r\n-                </div>\r\n-            </div>\r\n-        `).join('');\r\n-    }\r\n-\r\n-    this.updateSummary();\r\n-}\r\n-\r\n-\r\n-    // Update order summary\r\n+    // Update summary\r\n     updateSummary() {\r\n-        const subtotal = this.calculateSubtotal();\r\n+        const subtotalEl = document.getElementById('subtotal');\r\n+        if (subtotalEl) subtotalEl.textContent = `$${this.calculateSubtotal().toFixed(2)}`;\r\n \r\n-        // Update subtotal element\r\n-        document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;\r\n-\r\n-        // Enable/disable checkout button\r\n         const checkoutBtn = document.getElementById('checkout-btn');\r\n-        if (checkoutBtn) {\r\n-            checkoutBtn.disabled = this.items.length === 0;\r\n-        }\r\n+        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n     }\r\n \r\n     // Show notification\r\n     showNotification(message) {\r\n-        // Create notification element\r\n         const notification = document.createElement('div');\r\n         notification.className = 'notification';\r\n         notification.textContent = message;\r\n         notification.style.cssText = `\r\n@@ -242,108 +156,66 @@\n             font-family: 'Inter Medium';\r\n             z-index: 1000;\r\n             animation: slideInRight 0.3s ease;\r\n         `;\r\n-\r\n         document.body.appendChild(notification);\r\n \r\n-        // Remove notification after 3 seconds\r\n         setTimeout(() => {\r\n             notification.style.animation = 'slideOutRight 0.3s ease';\r\n             setTimeout(() => {\r\n-                if (notification.parentNode) {\r\n-                    notification.parentNode.removeChild(notification);\r\n-                }\r\n+                if (notification.parentNode) notification.parentNode.removeChild(notification);\r\n             }, 300);\r\n         }, 3000);\r\n     }\r\n \r\n-    // Bind event listeners\r\n+    // Bind events\r\n     bindEvents() {\r\n-        // Clear cart button\r\n-        const clearCartBtn = document.getElementById('clear-cart');\r\n-        if (clearCartBtn) {\r\n-            clearCartBtn.addEventListener('click', () => this.clearCart());\r\n-        }\r\n+        const clearBtn = document.getElementById('clear-cart');\r\n+        if (clearBtn) clearBtn.addEventListener('click', () => this.clearCart());\r\n \r\n-        // Checkout button\r\n         const checkoutBtn = document.getElementById('checkout-btn');\r\n-        if (checkoutBtn) {\r\n-            checkoutBtn.addEventListener('click', () => this.proceedToCheckout());\r\n-        }\r\n+        if (checkoutBtn) checkoutBtn.addEventListener('click', () => this.proceedToCheckout());\r\n \r\n         // Add to cart buttons in recommended section\r\n-        document.addEventListener('click', (e) => {\r\n+        document.addEventListener('click', e => {\r\n             if (e.target.classList.contains('add-to-cart-btn')) {\r\n-                const bookId = e.target.getAttribute('data-book-id');\r\n-                this.addItem(bookId, 1);\r\n+                const title = e.target.getAttribute('data-title');\r\n+                this.addItem(title, 1);\r\n             }\r\n         });\r\n     }\r\n \r\n-    // Proceed to checkout (placeholder)\r\n+    // Clear cart\r\n+    clearCart() {\r\n+        if (!confirm('Are you sure you want to clear the cart?')) return;\r\n+        this.items = [];\r\n+        this.saveCartToStorage();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.showNotification('Cart cleared');\r\n+    }\r\n+\r\n+    // Checkout\r\n     proceedToCheckout() {\r\n         if (this.items.length === 0) return;\r\n-\r\n-        // In a real application, this would redirect to a checkout page\r\n-        // For now, we'll show an alert\r\n         alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n-\r\n-        // You can integrate this with your groupmate's checkout system\r\n-        console.log('Checkout data:', {\r\n-            items: this.items,\r\n-            subtotal: this.calculateSubtotal(),\r\n-            tax: this.calculateTax(),\r\n-            shipping: this.shippingCost,\r\n-            total: this.calculateTotal()\r\n-        });\r\n     }\r\n-\r\n-    // Get cart data for integration with other pages\r\n-    getCartData() {\r\n-        return {\r\n-            items: this.items,\r\n-            subtotal: this.calculateSubtotal(),\r\n-            tax: this.calculateTax(),\r\n-            shipping: this.shippingCost,\r\n-            total: this.calculateTotal(),\r\n-            itemCount: this.items.reduce((total, item) => total + item.quantity, 0)\r\n-        };\r\n-    }\r\n }\r\n \r\n-// Initialize cart when DOM is loaded\r\n+// Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n \r\n-// Add CSS animations for notifications\r\n+// CSS animations for notifications\r\n const style = document.createElement('style');\r\n style.textContent = `\r\n     @keyframes slideInRight {\r\n-        from {\r\n-            transform: translateX(100%);\r\n-            opacity: 0;\r\n-        }\r\n-        to {\r\n-            transform: translateX(0);\r\n-            opacity: 1;\r\n-        }\r\n+        from { transform: translateX(100%); opacity: 0; }\r\n+        to { transform: translateX(0); opacity: 1; }\r\n     }\r\n-    \r\n     @keyframes slideOutRight {\r\n-        from {\r\n-            transform: translateX(0);\r\n-            opacity: 1;\r\n-        }\r\n-        to {\r\n-            transform: translateX(100%);\r\n-            opacity: 0;\r\n-        }\r\n+        from { transform: translateX(0); opacity: 1; }\r\n+        to { transform: translateX(100%); opacity: 0; }\r\n     }\r\n `;\r\n document.head.appendChild(style);\r\n-\r\n-// Export for use in other pages\r\n-if (typeof module !== 'undefined' && module.exports) {\r\n-    module.exports = ShoppingCart;\r\n-}\r\n"
                },
                {
                    "date": 1756821253153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,53 +68,61 @@\n         this.showNotification('Item removed from cart');\r\n     }\r\n \r\n     // Render cart items\r\n-    renderCart() {\r\n-        const cartItemsContainer = document.getElementById('cart-items');\r\n-        if (!cartItemsContainer) return;\r\n+// Render cart items without quantity\r\n+renderCart() {\r\n+    const cartItemsContainer = document.getElementById('cart-items');\r\n+    if (!cartItemsContainer) return;\r\n \r\n-        if (this.items.length === 0) {\r\n-            cartItemsContainer.innerHTML = `\r\n-                <div class=\"empty-cart\">\r\n-                    <div class=\"empty-cart-content\">\r\n-                        <h3>Your cart is empty</h3>\r\n-                        <p>Add some books to get started!</p>\r\n-                        <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n+    if (this.items.length === 0) {\r\n+        cartItemsContainer.innerHTML = `\r\n+            <div class=\"empty-cart\">\r\n+                <div class=\"empty-cart-content\">\r\n+                    <h3>Your cart is empty</h3>\r\n+                    <p>Add some books to get started!</p>\r\n+                    <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n+                </div>\r\n+            </div>\r\n+        `;\r\n+    } else {\r\n+        cartItemsContainer.innerHTML = this.items.map(item => {\r\n+            const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n+            const image = book ? book.image : '';\r\n+            return `\r\n+                <div class=\"cart-item\" data-title=\"${item.title}\">\r\n+                    <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n+                    <div class=\"cart-item-details\">\r\n+                        <h3 class=\"cart-item-title\">${item.title}</h3>\r\n+                        <p class=\"cart-item-author\">by ${item.author}</p>\r\n+                        <p class=\"cart-item-price\">$${Number(item.price).toFixed(2)}</p>\r\n                     </div>\r\n+                    <div class=\"cart-item-controls\">\r\n+                        <button class=\"remove-btn\" onclick=\"cart.removeItem('${item.title}')\">Remove</button>\r\n+                    </div>\r\n                 </div>\r\n             `;\r\n+        }).join('');\r\n+    }\r\n+\r\n+    this.updateSummary();\r\n+}\r\n+\r\n+// Calculate subtotal with logging for debugging\r\n+calculateSubtotal() {\r\n+    let subtotal = 0;\r\n+    this.items.forEach(item => {\r\n+        const price = Number(item.price);\r\n+        if (isNaN(price)) {\r\n+            console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n         } else {\r\n-            cartItemsContainer.innerHTML = this.items.map(item => {\r\n-                // Find the image in booksData\r\n-                const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n-                const image = book ? book.image : '';\r\n-\r\n-                return `\r\n-                    <div class=\"cart-item\" data-title=\"${item.title}\">\r\n-                        <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n-                        <div class=\"cart-item-details\">\r\n-                            <h3 class=\"cart-item-title\">${item.title}</h3>\r\n-                            <p class=\"cart-item-author\">by ${item.author}</p>\r\n-                            <p class=\"cart-item-price\">$${item.price.toFixed(2)}</p>\r\n-                            <p class=\"cart-item-quantity\">Qty: ${item.quantity}</p>\r\n-                        </div>\r\n-                        <div class=\"cart-item-controls\">\r\n-                            <button class=\"remove-btn\" onclick=\"cart.removeItem('${item.title}')\">Remove</button>\r\n-                        </div>\r\n-                    </div>\r\n-                `;\r\n-            }).join('');\r\n+            subtotal += price;\r\n         }\r\n+    });\r\n+    console.log('Calculated subtotal:', subtotal);\r\n+    return subtotal;\r\n+}\r\n \r\n-        this.updateSummary();\r\n-    }\r\n-\r\n-    // Calculate subtotal\r\n-    calculateSubtotal() {\r\n-        return this.items.reduce((total, item) => total + item.price * item.quantity, 0);\r\n-    }\r\n-\r\n     // Calculate tax\r\n     calculateTax() {\r\n         return this.calculateSubtotal() * this.taxRate;\r\n     }\r\n"
                },
                {
                    "date": 1756821339387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,28 +68,28 @@\n         this.showNotification('Item removed from cart');\r\n     }\r\n \r\n     // Render cart items\r\n-// Render cart items without quantity\r\n-renderCart() {\r\n-    const cartItemsContainer = document.getElementById('cart-items');\r\n-    if (!cartItemsContainer) return;\r\n+    // Render cart items without quantity\r\n+    renderCart() {\r\n+        const cartItemsContainer = document.getElementById('cart-items');\r\n+        if (!cartItemsContainer) return;\r\n \r\n-    if (this.items.length === 0) {\r\n-        cartItemsContainer.innerHTML = `\r\n+        if (this.items.length === 0) {\r\n+            cartItemsContainer.innerHTML = `\r\n             <div class=\"empty-cart\">\r\n                 <div class=\"empty-cart-content\">\r\n                     <h3>Your cart is empty</h3>\r\n                     <p>Add some books to get started!</p>\r\n                     <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n                 </div>\r\n             </div>\r\n         `;\r\n-    } else {\r\n-        cartItemsContainer.innerHTML = this.items.map(item => {\r\n-            const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n-            const image = book ? book.image : '';\r\n-            return `\r\n+        } else {\r\n+            cartItemsContainer.innerHTML = this.items.map(item => {\r\n+                const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n+                const image = book ? book.image : '';\r\n+                return `\r\n                 <div class=\"cart-item\" data-title=\"${item.title}\">\r\n                     <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n                     <div class=\"cart-item-details\">\r\n                         <h3 class=\"cart-item-title\">${item.title}</h3>\r\n@@ -100,29 +100,29 @@\n                         <button class=\"remove-btn\" onclick=\"cart.removeItem('${item.title}')\">Remove</button>\r\n                     </div>\r\n                 </div>\r\n             `;\r\n-        }).join('');\r\n+            }).join('');\r\n+        }\r\n+\r\n+        this.updateSummary();\r\n     }\r\n \r\n-    this.updateSummary();\r\n-}\r\n+    // Calculate subtotal with logging for debugging\r\n+    calculateSubtotal() {\r\n+        let subtotal = 0;\r\n+        this.items.forEach(item => {\r\n+            const price = Number(item.price);\r\n+            if (isNaN(price)) {\r\n+                console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n+            } else {\r\n+                subtotal += price;\r\n+            }\r\n+        });\r\n+        console.log('Calculated subtotal:', subtotal);\r\n+        return subtotal;\r\n+    }\r\n \r\n-// Calculate subtotal with logging for debugging\r\n-calculateSubtotal() {\r\n-    let subtotal = 0;\r\n-    this.items.forEach(item => {\r\n-        const price = Number(item.price);\r\n-        if (isNaN(price)) {\r\n-            console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n-        } else {\r\n-            subtotal += price;\r\n-        }\r\n-    });\r\n-    console.log('Calculated subtotal:', subtotal);\r\n-    return subtotal;\r\n-}\r\n-\r\n     // Calculate tax\r\n     calculateTax() {\r\n         return this.calculateSubtotal() * this.taxRate;\r\n     }\r\n@@ -132,14 +132,29 @@\n         return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n     }\r\n \r\n     // Update cart count in header\r\n-    updateCartCount() {\r\n-        const count = this.items.reduce((total, item) => total + item.quantity, 0);\r\n+   // Update cart count in header\r\n+updateCartCount() {\r\n+    if (!this.items || this.items.length === 0) {\r\n         const cartCountElement = document.getElementById('cart-count');\r\n-        if (cartCountElement) cartCountElement.textContent = count;\r\n+        if (cartCountElement) cartCountElement.textContent = 0;\r\n+        return;\r\n     }\r\n \r\n+    // Since we removed quantity, count is simply the number of items in cart\r\n+    const count = this.items.length;\r\n+\r\n+    // Log for debugging\r\n+    console.log('Cart count:', count, this.items);\r\n+\r\n+    const cartCountElement = document.getElementById('cart-count');\r\n+    if (cartCountElement) {\r\n+        cartCountElement.textContent = count;\r\n+    }\r\n+}\r\n+\r\n+\r\n     // Update summary\r\n     updateSummary() {\r\n         const subtotalEl = document.getElementById('subtotal');\r\n         if (subtotalEl) subtotalEl.textContent = `$${this.calculateSubtotal().toFixed(2)}`;\r\n"
                },
                {
                    "date": 1756821909755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,16 @@\n // Cart functionality for Herbert Schildt Book Store\r\n+\r\n+\r\n+const oldCart = JSON.parse(localStorage.getItem('bookCart')) || [];\r\n+const newCart = oldCart.map(item => ({\r\n+    title: item.title,\r\n+    author: item.author,\r\n+    price: item.price,\r\n+    image: item.image\r\n+}));\r\n+localStorage.setItem('bookCart', JSON.stringify(newCart));\r\n+\r\n class ShoppingCart {\r\n     constructor() {\r\n         this.items = JSON.parse(localStorage.getItem('bookCart')) || []; // load from localStorage\r\n         this.shippingCost = 5.99;\r\n@@ -132,27 +143,27 @@\n         return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n     }\r\n \r\n     // Update cart count in header\r\n-   // Update cart count in header\r\n-updateCartCount() {\r\n-    if (!this.items || this.items.length === 0) {\r\n-        const cartCountElement = document.getElementById('cart-count');\r\n-        if (cartCountElement) cartCountElement.textContent = 0;\r\n-        return;\r\n-    }\r\n+    // Update cart count in header\r\n+    updateCartCount() {\r\n+        if (!this.items || this.items.length === 0) {\r\n+            const cartCountElement = document.getElementById('cart-count');\r\n+            if (cartCountElement) cartCountElement.textContent = 0;\r\n+            return;\r\n+        }\r\n \r\n-    // Since we removed quantity, count is simply the number of items in cart\r\n-    const count = this.items.length;\r\n+        // Since we removed quantity, count is simply the number of items in cart\r\n+        const count = this.items.length;\r\n \r\n-    // Log for debugging\r\n-    console.log('Cart count:', count, this.items);\r\n+        // Log for debugging\r\n+        console.log('Cart count:', count, this.items);\r\n \r\n-    const cartCountElement = document.getElementById('cart-count');\r\n-    if (cartCountElement) {\r\n-        cartCountElement.textContent = count;\r\n+        const cartCountElement = document.getElementById('cart-count');\r\n+        if (cartCountElement) {\r\n+            cartCountElement.textContent = count;\r\n+        }\r\n     }\r\n-}\r\n \r\n \r\n     // Update summary\r\n     updateSummary() {\r\n"
                },
                {
                    "date": 1756821925620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,7 @@\n // Cart functionality for Herbert Schildt Book Store\r\n \r\n \r\n-const oldCart = JSON.parse(localStorage.getItem('bookCart')) || [];\r\n-const newCart = oldCart.map(item => ({\r\n-    title: item.title,\r\n-    author: item.author,\r\n-    price: item.price,\r\n-    image: item.image\r\n-}));\r\n-localStorage.setItem('bookCart', JSON.stringify(newCart));\r\n \r\n class ShoppingCart {\r\n     constructor() {\r\n         this.items = JSON.parse(localStorage.getItem('bookCart')) || []; // load from localStorage\r\n"
                },
                {
                    "date": 1756821949598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // Cart functionality for Herbert Schildt Book Store\r\n+// Clear old cart\r\n+localStorage.removeItem('bookCart');\r\n \r\n-\r\n-\r\n class ShoppingCart {\r\n     constructor() {\r\n         this.items = JSON.parse(localStorage.getItem('bookCart')) || []; // load from localStorage\r\n         this.shippingCost = 5.99;\r\n"
                },
                {
                    "date": 1756821958981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n // Cart functionality for Herbert Schildt Book Store\r\n // Clear old cart\r\n-localStorage.removeItem('bookCart');\r\n \r\n class ShoppingCart {\r\n     constructor() {\r\n         this.items = JSON.parse(localStorage.getItem('bookCart')) || []; // load from localStorage\r\n"
                },
                {
                    "date": 1756822190410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,45 +71,57 @@\n     }\r\n \r\n     // Render cart items\r\n     // Render cart items without quantity\r\n-    renderCart() {\r\n-        const cartItemsContainer = document.getElementById('cart-items');\r\n-        if (!cartItemsContainer) return;\r\n+   renderCart() {\r\n+    const cartItemsContainer = document.getElementById('cart-items');\r\n+    if (!cartItemsContainer) return;\r\n \r\n-        if (this.items.length === 0) {\r\n-            cartItemsContainer.innerHTML = `\r\n-            <div class=\"empty-cart\">\r\n-                <div class=\"empty-cart-content\">\r\n-                    <h3>Your cart is empty</h3>\r\n-                    <p>Add some books to get started!</p>\r\n-                    <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n-                </div>\r\n+    if (this.items.length === 0) {\r\n+        cartItemsContainer.innerHTML = `\r\n+        <div class=\"empty-cart\">\r\n+            <div class=\"empty-cart-content\">\r\n+                <h3>Your cart is empty</h3>\r\n+                <p>Add some books to get started!</p>\r\n+                <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n             </div>\r\n+        </div>`;\r\n+        return;\r\n+    }\r\n+\r\n+    // Clear container first\r\n+    cartItemsContainer.innerHTML = '';\r\n+\r\n+    this.items.forEach(item => {\r\n+        const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n+        const image = book ? book.image : '';\r\n+\r\n+        const cartItem = document.createElement('div');\r\n+        cartItem.className = 'cart-item';\r\n+        cartItem.innerHTML = `\r\n+            <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n+            <div class=\"cart-item-details\">\r\n+                <h3 class=\"cart-item-title\">${item.title}</h3>\r\n+                <p class=\"cart-item-author\">by ${item.author}</p>\r\n+                <p class=\"cart-item-price\">$${Number(item.price).toFixed(2)}</p>\r\n+            </div>\r\n+            <div class=\"cart-item-controls\"></div>\r\n         `;\r\n-        } else {\r\n-            cartItemsContainer.innerHTML = this.items.map(item => {\r\n-                const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n-                const image = book ? book.image : '';\r\n-                return `\r\n-                <div class=\"cart-item\" data-title=\"${item.title}\">\r\n-                    <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n-                    <div class=\"cart-item-details\">\r\n-                        <h3 class=\"cart-item-title\">${item.title}</h3>\r\n-                        <p class=\"cart-item-author\">by ${item.author}</p>\r\n-                        <p class=\"cart-item-price\">$${Number(item.price).toFixed(2)}</p>\r\n-                    </div>\r\n-                    <div class=\"cart-item-controls\">\r\n-                        <button class=\"remove-btn\" onclick=\"cart.removeItem('${item.title}')\">Remove</button>\r\n-                    </div>\r\n-                </div>\r\n-            `;\r\n-            }).join('');\r\n-        }\r\n \r\n-        this.updateSummary();\r\n-    }\r\n+        // Add remove button safely\r\n+        const removeBtn = document.createElement('button');\r\n+        removeBtn.className = 'remove-btn';\r\n+        removeBtn.textContent = 'Remove';\r\n+        removeBtn.addEventListener('click', () => this.removeItem(item.title));\r\n+        cartItem.querySelector('.cart-item-controls').appendChild(removeBtn);\r\n \r\n+        cartItemsContainer.appendChild(cartItem);\r\n+    });\r\n+\r\n+    this.updateSummary();\r\n+}\r\n+\r\n+\r\n     // Calculate subtotal with logging for debugging\r\n     calculateSubtotal() {\r\n         let subtotal = 0;\r\n         this.items.forEach(item => {\r\n"
                },
                {
                    "date": 1756822285473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,34 +71,34 @@\n     }\r\n \r\n     // Render cart items\r\n     // Render cart items without quantity\r\n-   renderCart() {\r\n-    const cartItemsContainer = document.getElementById('cart-items');\r\n-    if (!cartItemsContainer) return;\r\n+    renderCart() {\r\n+        const cartItemsContainer = document.getElementById('cart-items');\r\n+        if (!cartItemsContainer) return;\r\n \r\n-    if (this.items.length === 0) {\r\n-        cartItemsContainer.innerHTML = `\r\n+        if (this.items.length === 0) {\r\n+            cartItemsContainer.innerHTML = `\r\n         <div class=\"empty-cart\">\r\n             <div class=\"empty-cart-content\">\r\n                 <h3>Your cart is empty</h3>\r\n                 <p>Add some books to get started!</p>\r\n                 <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n             </div>\r\n         </div>`;\r\n-        return;\r\n-    }\r\n+            return;\r\n+        }\r\n \r\n-    // Clear container first\r\n-    cartItemsContainer.innerHTML = '';\r\n+        // Clear container first\r\n+        cartItemsContainer.innerHTML = '';\r\n \r\n-    this.items.forEach(item => {\r\n-        const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n-        const image = book ? book.image : '';\r\n+        this.items.forEach(item => {\r\n+            const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n+            const image = book ? book.image : '';\r\n \r\n-        const cartItem = document.createElement('div');\r\n-        cartItem.className = 'cart-item';\r\n-        cartItem.innerHTML = `\r\n+            const cartItem = document.createElement('div');\r\n+            cartItem.className = 'cart-item';\r\n+            cartItem.innerHTML = `\r\n             <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n             <div class=\"cart-item-details\">\r\n                 <h3 class=\"cart-item-title\">${item.title}</h3>\r\n                 <p class=\"cart-item-author\">by ${item.author}</p>\r\n@@ -106,20 +106,20 @@\n             </div>\r\n             <div class=\"cart-item-controls\"></div>\r\n         `;\r\n \r\n-        // Add remove button safely\r\n-        const removeBtn = document.createElement('button');\r\n-        removeBtn.className = 'remove-btn';\r\n-        removeBtn.textContent = 'Remove';\r\n-        removeBtn.addEventListener('click', () => this.removeItem(item.title));\r\n-        cartItem.querySelector('.cart-item-controls').appendChild(removeBtn);\r\n+            // Add remove button safely\r\n+            const removeBtn = document.createElement('button');\r\n+            removeBtn.className = 'remove-btn';\r\n+            removeBtn.textContent = 'Remove';\r\n+            removeBtn.addEventListener('click', () => this.removeItem(item.title));\r\n+            cartItem.querySelector('.cart-item-controls').appendChild(removeBtn);\r\n \r\n-        cartItemsContainer.appendChild(cartItem);\r\n-    });\r\n+            cartItemsContainer.appendChild(cartItem);\r\n+        });\r\n \r\n-    this.updateSummary();\r\n-}\r\n+        this.updateSummary();\r\n+    }\r\n \r\n \r\n     // Calculate subtotal with logging for debugging\r\n     calculateSubtotal() {\r\n@@ -168,16 +168,20 @@\n     }\r\n \r\n \r\n     // Update summary\r\n-    updateSummary() {\r\n-        const subtotalEl = document.getElementById('subtotal');\r\n-        if (subtotalEl) subtotalEl.textContent = `$${this.calculateSubtotal().toFixed(2)}`;\r\n+  updateSummary() {\r\n+    const subtotal = this.calculateSubtotal();\r\n+    const subtotalEl = document.getElementById('subtotal');\r\n+    const totalEl = document.getElementById('total');\r\n \r\n-        const checkoutBtn = document.getElementById('checkout-btn');\r\n-        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n-    }\r\n+    if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n+    if (totalEl) totalEl.textContent = `$${(subtotal + this.shippingCost + this.calculateTax()).toFixed(2)}`;\r\n \r\n+    const checkoutBtn = document.getElementById('checkout-btn');\r\n+    if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n+}\r\n+\r\n     // Show notification\r\n     showNotification(message) {\r\n         const notification = document.createElement('div');\r\n         notification.className = 'notification';\r\n"
                },
                {
                    "date": 1756822372852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,22 @@\n     }\r\n \r\n \r\n     // Update summary\r\n-  updateSummary() {\r\n+updateSummary() {\r\n+    if (!this.items || this.items.length === 0) {\r\n+        // Cart is empty\r\n+        const subtotalEl = document.getElementById('subtotal');\r\n+        const totalEl = document.getElementById('total');\r\n+        if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n+        if (totalEl) totalEl.textContent = `$0.00`;\r\n+\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n+        if (checkoutBtn) checkoutBtn.disabled = true;\r\n+        return;\r\n+    }\r\n+\r\n+    // Otherwise, calculate normally\r\n     const subtotal = this.calculateSubtotal();\r\n     const subtotalEl = document.getElementById('subtotal');\r\n     const totalEl = document.getElementById('total');\r\n \r\n"
                },
                {
                    "date": 1756822393520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,33 +168,33 @@\n     }\r\n \r\n \r\n     // Update summary\r\n-updateSummary() {\r\n-    if (!this.items || this.items.length === 0) {\r\n-        // Cart is empty\r\n+    updateSummary() {\r\n+        if (!this.items || this.items.length === 0) {\r\n+            // Cart is empty\r\n+            const subtotalEl = document.getElementById('subtotal');\r\n+            const totalEl = document.getElementById('total');\r\n+            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n+            if (totalEl) totalEl.textContent = `$0.00`;\r\n+\r\n+            const checkoutBtn = document.getElementById('checkout-btn');\r\n+            if (checkoutBtn) checkoutBtn.disabled = true;\r\n+            return;\r\n+        }\r\n+\r\n+        // Otherwise, calculate normally\r\n+        const subtotal = this.calculateSubtotal();\r\n         const subtotalEl = document.getElementById('subtotal');\r\n         const totalEl = document.getElementById('total');\r\n-        if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n-        if (totalEl) totalEl.textContent = `$0.00`;\r\n \r\n+        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n+        if (totalEl) totalEl.textContent = `$${(subtotal + this.shippingCost + this.calculateTax()).toFixed(2)}`;\r\n+\r\n         const checkoutBtn = document.getElementById('checkout-btn');\r\n-        if (checkoutBtn) checkoutBtn.disabled = true;\r\n-        return;\r\n+        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n     }\r\n \r\n-    // Otherwise, calculate normally\r\n-    const subtotal = this.calculateSubtotal();\r\n-    const subtotalEl = document.getElementById('subtotal');\r\n-    const totalEl = document.getElementById('total');\r\n-\r\n-    if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n-    if (totalEl) totalEl.textContent = `$${(subtotal + this.shippingCost + this.calculateTax()).toFixed(2)}`;\r\n-\r\n-    const checkoutBtn = document.getElementById('checkout-btn');\r\n-    if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n-}\r\n-\r\n     // Show notification\r\n     showNotification(message) {\r\n         const notification = document.createElement('div');\r\n         notification.className = 'notification';\r\n"
                },
                {
                    "date": 1756822440027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,13 +140,17 @@\n     calculateTax() {\r\n         return this.calculateSubtotal() * this.taxRate;\r\n     }\r\n \r\n-    // Calculate total\r\n-    calculateTotal() {\r\n-        return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n-    }\r\n+calculateTotal() {\r\n+    if (!this.items || this.items.length === 0) return 0;\r\n \r\n+    const subtotal = this.calculateSubtotal();\r\n+    const tax = subtotal * this.taxRate;\r\n+    return subtotal + tax + this.shippingCost;\r\n+}\r\n+\r\n+\r\n     // Update cart count in header\r\n     // Update cart count in header\r\n     updateCartCount() {\r\n         if (!this.items || this.items.length === 0) {\r\n"
                },
                {
                    "date": 1756822493843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,27 +121,28 @@\n     }\r\n \r\n \r\n     // Calculate subtotal with logging for debugging\r\n-    calculateSubtotal() {\r\n-        let subtotal = 0;\r\n-        this.items.forEach(item => {\r\n-            const price = Number(item.price);\r\n-            if (isNaN(price)) {\r\n-                console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n-            } else {\r\n-                subtotal += price;\r\n-            }\r\n-        });\r\n-        console.log('Calculated subtotal:', subtotal);\r\n-        return subtotal;\r\n-    }\r\n+calculateSubtotal() {\r\n+    let subtotal = 0;\r\n+    this.items.forEach(item => {\r\n+        const price = Number(item.price);\r\n+        if (isNaN(price)) {\r\n+            console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n+        } else {\r\n+            subtotal += price;\r\n+        }\r\n+    });\r\n+    console.log('Calculated subtotal:', subtotal);\r\n+    return subtotal;\r\n+}\r\n \r\n-    // Calculate tax\r\n-    calculateTax() {\r\n-        return this.calculateSubtotal() * this.taxRate;\r\n-    }\r\n+// Calculate tax\r\n+calculateTax() {\r\n+    return this.calculateSubtotal() * this.taxRate;\r\n+}\r\n \r\n+// Calculate total\r\n calculateTotal() {\r\n     if (!this.items || this.items.length === 0) return 0;\r\n \r\n     const subtotal = this.calculateSubtotal();\r\n"
                },
                {
                    "date": 1756822621055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,15 +61,15 @@\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n     // Remove item from cart\r\n-    removeItem(title) {\r\n-        this.items = this.items.filter(item => item.title !== title);\r\n-        this.saveCartToStorage();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.showNotification('Item removed from cart');\r\n-    }\r\n+removeItem(title) {\r\n+    this.items = this.items.filter(item => item.title !== title); // OK\r\n+    this.saveCartToStorage();\r\n+    this.renderCart();\r\n+    this.updateCartCount();\r\n+    this.showNotification('Item removed from cart');\r\n+}\r\n \r\n     // Render cart items\r\n     // Render cart items without quantity\r\n     renderCart() {\r\n@@ -121,35 +121,35 @@\n     }\r\n \r\n \r\n     // Calculate subtotal with logging for debugging\r\n-calculateSubtotal() {\r\n-    let subtotal = 0;\r\n-    this.items.forEach(item => {\r\n-        const price = Number(item.price);\r\n-        if (isNaN(price)) {\r\n-            console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n-        } else {\r\n-            subtotal += price;\r\n-        }\r\n-    });\r\n-    console.log('Calculated subtotal:', subtotal);\r\n-    return subtotal;\r\n-}\r\n+    calculateSubtotal() {\r\n+        let subtotal = 0;\r\n+        this.items.forEach(item => {\r\n+            const price = Number(item.price);\r\n+            if (isNaN(price)) {\r\n+                console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n+            } else {\r\n+                subtotal += price;\r\n+            }\r\n+        });\r\n+        console.log('Calculated subtotal:', subtotal);\r\n+        return subtotal;\r\n+    }\r\n \r\n-// Calculate tax\r\n-calculateTax() {\r\n-    return this.calculateSubtotal() * this.taxRate;\r\n-}\r\n+    // Calculate tax\r\n+    calculateTax() {\r\n+        return this.calculateSubtotal() * this.taxRate;\r\n+    }\r\n \r\n-// Calculate total\r\n-calculateTotal() {\r\n-    if (!this.items || this.items.length === 0) return 0;\r\n+    // Calculate total\r\n+    calculateTotal() {\r\n+        if (!this.items || this.items.length === 0) return 0;\r\n \r\n-    const subtotal = this.calculateSubtotal();\r\n-    const tax = subtotal * this.taxRate;\r\n-    return subtotal + tax + this.shippingCost;\r\n-}\r\n+        const subtotal = this.calculateSubtotal();\r\n+        const tax = subtotal * this.taxRate;\r\n+        return subtotal + tax + this.shippingCost;\r\n+    }\r\n \r\n \r\n     // Update cart count in header\r\n     // Update cart count in header\r\n"
                },
                {
                    "date": 1756822693007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,15 +61,15 @@\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n     // Remove item from cart\r\n-removeItem(title) {\r\n-    this.items = this.items.filter(item => item.title !== title); // OK\r\n-    this.saveCartToStorage();\r\n-    this.renderCart();\r\n-    this.updateCartCount();\r\n-    this.showNotification('Item removed from cart');\r\n-}\r\n+    removeItem(title) {\r\n+        this.items = this.items.filter(item => item.title !== title); // OK\r\n+        this.saveCartToStorage();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.showNotification('Item removed from cart');\r\n+    }\r\n \r\n     // Render cart items\r\n     // Render cart items without quantity\r\n     renderCart() {\r\n@@ -120,36 +120,33 @@\n         this.updateSummary();\r\n     }\r\n \r\n \r\n-    // Calculate subtotal with logging for debugging\r\n-    calculateSubtotal() {\r\n-        let subtotal = 0;\r\n-        this.items.forEach(item => {\r\n-            const price = Number(item.price);\r\n-            if (isNaN(price)) {\r\n-                console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n-            } else {\r\n-                subtotal += price;\r\n-            }\r\n-        });\r\n-        console.log('Calculated subtotal:', subtotal);\r\n-        return subtotal;\r\n-    }\r\n+// Calculate subtotal\r\n+calculateSubtotal() {\r\n+    if (!this.items || this.items.length === 0) return 0;\r\n \r\n-    // Calculate tax\r\n-    calculateTax() {\r\n-        return this.calculateSubtotal() * this.taxRate;\r\n-    }\r\n+    return this.items.reduce((sum, item) => {\r\n+        const price = parseFloat(item.price);\r\n+        if (isNaN(price)) {\r\n+            console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n+            return sum;\r\n+        }\r\n+        return sum + price;\r\n+    }, 0);\r\n+}\r\n \r\n-    // Calculate total\r\n-    calculateTotal() {\r\n-        if (!this.items || this.items.length === 0) return 0;\r\n+// Calculate tax\r\n+calculateTax() {\r\n+    if (!this.items || this.items.length === 0) return 0;\r\n+    return this.calculateSubtotal() * this.taxRate;\r\n+}\r\n \r\n-        const subtotal = this.calculateSubtotal();\r\n-        const tax = subtotal * this.taxRate;\r\n-        return subtotal + tax + this.shippingCost;\r\n-    }\r\n+// Calculate total\r\n+calculateTotal() {\r\n+    if (!this.items || this.items.length === 0) return 0;\r\n+    return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n+}\r\n \r\n \r\n     // Update cart count in header\r\n     // Update cart count in header\r\n"
                },
                {
                    "date": 1756822715760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,33 +120,33 @@\n         this.updateSummary();\r\n     }\r\n \r\n \r\n-// Calculate subtotal\r\n-calculateSubtotal() {\r\n-    if (!this.items || this.items.length === 0) return 0;\r\n+    // Calculate subtotal\r\n+    calculateSubtotal() {\r\n+        if (!this.items || this.items.length === 0) return 0;\r\n \r\n-    return this.items.reduce((sum, item) => {\r\n-        const price = parseFloat(item.price);\r\n-        if (isNaN(price)) {\r\n-            console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n-            return sum;\r\n-        }\r\n-        return sum + price;\r\n-    }, 0);\r\n-}\r\n+        return this.items.reduce((sum, item) => {\r\n+            const price = parseFloat(item.price);\r\n+            if (isNaN(price)) {\r\n+                console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n+                return sum;\r\n+            }\r\n+            return sum + price;\r\n+        }, 0);\r\n+    }\r\n \r\n-// Calculate tax\r\n-calculateTax() {\r\n-    if (!this.items || this.items.length === 0) return 0;\r\n-    return this.calculateSubtotal() * this.taxRate;\r\n-}\r\n+    // Calculate tax\r\n+    calculateTax() {\r\n+        if (!this.items || this.items.length === 0) return 0;\r\n+        return this.calculateSubtotal() * this.taxRate;\r\n+    }\r\n \r\n-// Calculate total\r\n-calculateTotal() {\r\n-    if (!this.items || this.items.length === 0) return 0;\r\n-    return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n-}\r\n+    // Calculate total\r\n+    calculateTotal() {\r\n+        if (!this.items || this.items.length === 0) return 0;\r\n+        return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n+    }\r\n \r\n \r\n     // Update cart count in header\r\n     // Update cart count in header\r\n@@ -170,33 +170,14 @@\n     }\r\n \r\n \r\n     // Update summary\r\n-    updateSummary() {\r\n-        if (!this.items || this.items.length === 0) {\r\n-            // Cart is empty\r\n-            const subtotalEl = document.getElementById('subtotal');\r\n-            const totalEl = document.getElementById('total');\r\n-            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n-            if (totalEl) totalEl.textContent = `$0.00`;\r\n+  updateCartCount() {\r\n+    const cartCountElement = document.getElementById('cart-count');\r\n+    const count = this.items && this.items.length ? this.items.length : 0;\r\n+    if (cartCountElement) cartCountElement.textContent = count;\r\n+}\r\n \r\n-            const checkoutBtn = document.getElementById('checkout-btn');\r\n-            if (checkoutBtn) checkoutBtn.disabled = true;\r\n-            return;\r\n-        }\r\n-\r\n-        // Otherwise, calculate normally\r\n-        const subtotal = this.calculateSubtotal();\r\n-        const subtotalEl = document.getElementById('subtotal');\r\n-        const totalEl = document.getElementById('total');\r\n-\r\n-        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n-        if (totalEl) totalEl.textContent = `$${(subtotal + this.shippingCost + this.calculateTax()).toFixed(2)}`;\r\n-\r\n-        const checkoutBtn = document.getElementById('checkout-btn');\r\n-        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n-    }\r\n-\r\n     // Show notification\r\n     showNotification(message) {\r\n         const notification = document.createElement('div');\r\n         notification.className = 'notification';\r\n"
                },
                {
                    "date": 1756822737314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,14 +170,33 @@\n     }\r\n \r\n \r\n     // Update summary\r\n-  updateCartCount() {\r\n-    const cartCountElement = document.getElementById('cart-count');\r\n-    const count = this.items && this.items.length ? this.items.length : 0;\r\n-    if (cartCountElement) cartCountElement.textContent = count;\r\n-}\r\n+    updateSummary() {\r\n+        if (!this.items || this.items.length === 0) {\r\n+            // Cart is empty\r\n+            const subtotalEl = document.getElementById('subtotal');\r\n+            const totalEl = document.getElementById('total');\r\n+            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n+            if (totalEl) totalEl.textContent = `$0.00`;\r\n \r\n+            const checkoutBtn = document.getElementById('checkout-btn');\r\n+            if (checkoutBtn) checkoutBtn.disabled = true;\r\n+            return;\r\n+        }\r\n+\r\n+        // Otherwise, calculate normally\r\n+        const subtotal = this.calculateSubtotal();\r\n+        const subtotalEl = document.getElementById('subtotal');\r\n+        const totalEl = document.getElementById('total');\r\n+\r\n+        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n+        if (totalEl) totalEl.textContent = `$${(subtotal + this.shippingCost + this.calculateTax()).toFixed(2)}`;\r\n+\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n+        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n+    }\r\n+\r\n     // Show notification\r\n     showNotification(message) {\r\n         const notification = document.createElement('div');\r\n         notification.className = 'notification';\r\n"
                },
                {
                    "date": 1756822781836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,33 +170,23 @@\n     }\r\n \r\n \r\n     // Update summary\r\n-    updateSummary() {\r\n-        if (!this.items || this.items.length === 0) {\r\n-            // Cart is empty\r\n-            const subtotalEl = document.getElementById('subtotal');\r\n-            const totalEl = document.getElementById('total');\r\n-            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n-            if (totalEl) totalEl.textContent = `$0.00`;\r\n+updateSummary() {\r\n+    const subtotalEl = document.getElementById('subtotal');\r\n+    const totalEl = document.getElementById('total');\r\n+    const checkoutBtn = document.getElementById('checkout-btn');\r\n \r\n-            const checkoutBtn = document.getElementById('checkout-btn');\r\n-            if (checkoutBtn) checkoutBtn.disabled = true;\r\n-            return;\r\n-        }\r\n+    const subtotal = this.calculateSubtotal();\r\n+    const tax = this.calculateTax();\r\n+    const total = this.items && this.items.length > 0 ? subtotal + tax + this.shippingCost : 0;\r\n \r\n-        // Otherwise, calculate normally\r\n-        const subtotal = this.calculateSubtotal();\r\n-        const subtotalEl = document.getElementById('subtotal');\r\n-        const totalEl = document.getElementById('total');\r\n+    if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n+    if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n \r\n-        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n-        if (totalEl) totalEl.textContent = `$${(subtotal + this.shippingCost + this.calculateTax()).toFixed(2)}`;\r\n+    if (checkoutBtn) checkoutBtn.disabled = !this.items || this.items.length === 0;\r\n+}\r\n \r\n-        const checkoutBtn = document.getElementById('checkout-btn');\r\n-        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n-    }\r\n-\r\n     // Show notification\r\n     showNotification(message) {\r\n         const notification = document.createElement('div');\r\n         notification.className = 'notification';\r\n"
                },
                {
                    "date": 1756822865491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,24 +168,41 @@\n             cartCountElement.textContent = count;\r\n         }\r\n     }\r\n \r\n+    // Ensure totals are zero if cart is empty\r\n+ensureEmptyCartTotals() {\r\n+    if (!this.items || this.items.length === 0) {\r\n+        const subtotalEl = document.getElementById('subtotal');\r\n+        const totalEl = document.getElementById('total');\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n \r\n+        if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n+        if (totalEl) totalEl.textContent = `$0.00`;\r\n+        if (checkoutBtn) checkoutBtn.disabled = true;\r\n+\r\n+        return true; // indicate cart is empty\r\n+    }\r\n+    return false; // cart is not empty\r\n+}\r\n+\r\n+\r\n+\r\n     // Update summary\r\n-updateSummary() {\r\n-    const subtotalEl = document.getElementById('subtotal');\r\n-    const totalEl = document.getElementById('total');\r\n-    const checkoutBtn = document.getElementById('checkout-btn');\r\n+    updateSummary() {\r\n+        const subtotalEl = document.getElementById('subtotal');\r\n+        const totalEl = document.getElementById('total');\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n \r\n-    const subtotal = this.calculateSubtotal();\r\n-    const tax = this.calculateTax();\r\n-    const total = this.items && this.items.length > 0 ? subtotal + tax + this.shippingCost : 0;\r\n+        const subtotal = this.calculateSubtotal();\r\n+        const tax = this.calculateTax();\r\n+        const total = this.items && this.items.length > 0 ? subtotal + tax + this.shippingCost : 0;\r\n \r\n-    if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n-    if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n+        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n+        if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n \r\n-    if (checkoutBtn) checkoutBtn.disabled = !this.items || this.items.length === 0;\r\n-}\r\n+        if (checkoutBtn) checkoutBtn.disabled = !this.items || this.items.length === 0;\r\n+    }\r\n \r\n     // Show notification\r\n     showNotification(message) {\r\n         const notification = document.createElement('div');\r\n"
                },
                {
                    "date": 1756822875521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,40 +169,41 @@\n         }\r\n     }\r\n \r\n     // Ensure totals are zero if cart is empty\r\n-ensureEmptyCartTotals() {\r\n-    if (!this.items || this.items.length === 0) {\r\n-        const subtotalEl = document.getElementById('subtotal');\r\n-        const totalEl = document.getElementById('total');\r\n-        const checkoutBtn = document.getElementById('checkout-btn');\r\n+    ensureEmptyCartTotals() {\r\n+        if (!this.items || this.items.length === 0) {\r\n+            const subtotalEl = document.getElementById('subtotal');\r\n+            const totalEl = document.getElementById('total');\r\n+            const checkoutBtn = document.getElementById('checkout-btn');\r\n \r\n-        if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n-        if (totalEl) totalEl.textContent = `$0.00`;\r\n-        if (checkoutBtn) checkoutBtn.disabled = true;\r\n+            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n+            if (totalEl) totalEl.textContent = `$0.00`;\r\n+            if (checkoutBtn) checkoutBtn.disabled = true;\r\n \r\n-        return true; // indicate cart is empty\r\n+            return true; // indicate cart is empty\r\n+        }\r\n+        return false; // cart is not empty\r\n     }\r\n-    return false; // cart is not empty\r\n-}\r\n \r\n \r\n \r\n     // Update summary\r\n-    updateSummary() {\r\n-        const subtotalEl = document.getElementById('subtotal');\r\n-        const totalEl = document.getElementById('total');\r\n-        const checkoutBtn = document.getElementById('checkout-btn');\r\n+  updateSummary() {\r\n+    if (this.ensureEmptyCartTotals()) return; // cart is empty, totals set to 0\r\n \r\n-        const subtotal = this.calculateSubtotal();\r\n-        const tax = this.calculateTax();\r\n-        const total = this.items && this.items.length > 0 ? subtotal + tax + this.shippingCost : 0;\r\n+    const subtotal = this.calculateSubtotal();\r\n+    const tax = this.calculateTax();\r\n+    const total = subtotal + tax + this.shippingCost;\r\n \r\n-        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n-        if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n+    const subtotalEl = document.getElementById('subtotal');\r\n+    const totalEl = document.getElementById('total');\r\n+    const checkoutBtn = document.getElementById('checkout-btn');\r\n \r\n-        if (checkoutBtn) checkoutBtn.disabled = !this.items || this.items.length === 0;\r\n-    }\r\n+    if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n+    if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n+    if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n+}\r\n \r\n     // Show notification\r\n     showNotification(message) {\r\n         const notification = document.createElement('div');\r\n"
                },
                {
                    "date": 1756823047105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,22 @@\n             console.error('Error loading all-books.json:', err);\r\n         }\r\n     }\r\n \r\n+      resetTotalsIfEmpty() {\r\n+        if (!this.items || this.items.length === 0) {\r\n+            const subtotalEl = document.getElementById('subtotal');\r\n+            const totalEl = document.getElementById('total');\r\n+            const checkoutBtn = document.getElementById('checkout-btn');\r\n+\r\n+            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n+            if (totalEl) totalEl.textContent = `$0.00`;\r\n+            if (checkoutBtn) checkoutBtn.disabled = true;\r\n+\r\n+            console.log('Cart is empty: totals reset to $0.00');\r\n+        }\r\n+    }\r\n+\r\n     // Save cart to localStorage\r\n     saveCartToStorage() {\r\n         localStorage.setItem('bookCart', JSON.stringify(this.items));\r\n     }\r\n@@ -187,23 +201,23 @@\n \r\n \r\n \r\n     // Update summary\r\n-  updateSummary() {\r\n-    if (this.ensureEmptyCartTotals()) return; // cart is empty, totals set to 0\r\n+    updateSummary() {\r\n+        if (this.ensureEmptyCartTotals()) return; // cart is empty, totals set to 0\r\n \r\n-    const subtotal = this.calculateSubtotal();\r\n-    const tax = this.calculateTax();\r\n-    const total = subtotal + tax + this.shippingCost;\r\n+        const subtotal = this.calculateSubtotal();\r\n+        const tax = this.calculateTax();\r\n+        const total = subtotal + tax + this.shippingCost;\r\n \r\n-    const subtotalEl = document.getElementById('subtotal');\r\n-    const totalEl = document.getElementById('total');\r\n-    const checkoutBtn = document.getElementById('checkout-btn');\r\n+        const subtotalEl = document.getElementById('subtotal');\r\n+        const totalEl = document.getElementById('total');\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n \r\n-    if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n-    if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n-    if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n-}\r\n+        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n+        if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n+        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n+    }\r\n \r\n     // Show notification\r\n     showNotification(message) {\r\n         const notification = document.createElement('div');\r\n"
                },
                {
                    "date": 1756823064630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,310 @@\n+// Cart functionality for Herbert Schildt Book Store\r\n+// Clear old cart\r\n+\r\n+class ShoppingCart {\r\n+    constructor() {\r\n+        this.items = JSON.parse(localStorage.getItem('bookCart')) || []; // load from localStorage\r\n+        this.shippingCost = 5.99;\r\n+        this.taxRate = 0.08; // 8% tax rate\r\n+        this.booksData = []; // will store all-books.json data\r\n+\r\n+        this.init();\r\n+    }\r\n+\r\n+    async init() {\r\n+        await this.loadBooksData();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.bindEvents();\r\n+    }\r\n+\r\n+    // Load all-books.json\r\n+    async loadBooksData() {\r\n+        try {\r\n+            const response = await fetch('all-books.json');\r\n+            this.booksData = await response.json();\r\n+        } catch (err) {\r\n+            console.error('Error loading all-books.json:', err);\r\n+        }\r\n+    }\r\n+\r\n+    resetTotalsIfEmpty() {\r\n+        if (!this.items || this.items.length === 0) {\r\n+            const subtotalEl = document.getElementById('subtotal');\r\n+            const totalEl = document.getElementById('total');\r\n+            const checkoutBtn = document.getElementById('checkout-btn');\r\n+\r\n+            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n+            if (totalEl) totalEl.textContent = `$0.00`;\r\n+            if (checkoutBtn) checkoutBtn.disabled = true;\r\n+\r\n+            console.log('Cart is empty: totals reset to $0.00');\r\n+        }\r\n+    }\r\n+\r\n+    // Save cart to localStorage\r\n+    saveCartToStorage() {\r\n+        localStorage.setItem('bookCart', JSON.stringify(this.items));\r\n+    }\r\n+\r\n+    // Add item to cart\r\n+    addItem(title, quantity = 1) {\r\n+        const book = this.booksData.find(b => b.title.trim() === title.trim());\r\n+        if (!book) {\r\n+            console.error('Book not found in JSON:', title);\r\n+            return;\r\n+        }\r\n+\r\n+        const existingItem = this.items.find(item => item.title === book.title);\r\n+\r\n+        if (existingItem) {\r\n+            existingItem.quantity += quantity;\r\n+        } else {\r\n+            this.items.push({\r\n+                title: book.title,\r\n+                author: book.author,\r\n+                price: book.price,\r\n+                image: book.image,\r\n+                quantity: quantity\r\n+            });\r\n+        }\r\n+\r\n+        this.saveCartToStorage();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.showNotification(`${book.title} added to cart!`);\r\n+    }\r\n+\r\n+\r\n+    document.addEventListener('DOMContentLoaded', async () => {\r\n+    window.cart = new ShoppingCart();\r\n+\r\n+    // Wait for any async initialization (like loading JSON)\r\n+    await window.cart.init();\r\n+\r\n+    // Immediately ensure totals are correct\r\n+    window.cart.resetTotalsIfEmpty();\r\n+});\r\n+\r\n+    // Remove item from cart\r\n+    removeItem(title) {\r\n+        this.items = this.items.filter(item => item.title !== title); // OK\r\n+        this.saveCartToStorage();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.showNotification('Item removed from cart');\r\n+    }\r\n+\r\n+    // Render cart items\r\n+    // Render cart items without quantity\r\n+    renderCart() {\r\n+        const cartItemsContainer = document.getElementById('cart-items');\r\n+        if (!cartItemsContainer) return;\r\n+\r\n+        if (this.items.length === 0) {\r\n+            cartItemsContainer.innerHTML = `\r\n+        <div class=\"empty-cart\">\r\n+            <div class=\"empty-cart-content\">\r\n+                <h3>Your cart is empty</h3>\r\n+                <p>Add some books to get started!</p>\r\n+                <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n+            </div>\r\n+        </div>`;\r\n+            return;\r\n+        }\r\n+\r\n+        // Clear container first\r\n+        cartItemsContainer.innerHTML = '';\r\n+\r\n+        this.items.forEach(item => {\r\n+            const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n+            const image = book ? book.image : '';\r\n+\r\n+            const cartItem = document.createElement('div');\r\n+            cartItem.className = 'cart-item';\r\n+            cartItem.innerHTML = `\r\n+            <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n+            <div class=\"cart-item-details\">\r\n+                <h3 class=\"cart-item-title\">${item.title}</h3>\r\n+                <p class=\"cart-item-author\">by ${item.author}</p>\r\n+                <p class=\"cart-item-price\">$${Number(item.price).toFixed(2)}</p>\r\n+            </div>\r\n+            <div class=\"cart-item-controls\"></div>\r\n+        `;\r\n+\r\n+            // Add remove button safely\r\n+            const removeBtn = document.createElement('button');\r\n+            removeBtn.className = 'remove-btn';\r\n+            removeBtn.textContent = 'Remove';\r\n+            removeBtn.addEventListener('click', () => this.removeItem(item.title));\r\n+            cartItem.querySelector('.cart-item-controls').appendChild(removeBtn);\r\n+\r\n+            cartItemsContainer.appendChild(cartItem);\r\n+        });\r\n+\r\n+        this.updateSummary();\r\n+    }\r\n+\r\n+\r\n+    // Calculate subtotal\r\n+    calculateSubtotal() {\r\n+        if (!this.items || this.items.length === 0) return 0;\r\n+\r\n+        return this.items.reduce((sum, item) => {\r\n+            const price = parseFloat(item.price);\r\n+            if (isNaN(price)) {\r\n+                console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n+                return sum;\r\n+            }\r\n+            return sum + price;\r\n+        }, 0);\r\n+    }\r\n+\r\n+    // Calculate tax\r\n+    calculateTax() {\r\n+        if (!this.items || this.items.length === 0) return 0;\r\n+        return this.calculateSubtotal() * this.taxRate;\r\n+    }\r\n+\r\n+    // Calculate total\r\n+    calculateTotal() {\r\n+        if (!this.items || this.items.length === 0) return 0;\r\n+        return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n+    }\r\n+\r\n+\r\n+    // Update cart count in header\r\n+    // Update cart count in header\r\n+    updateCartCount() {\r\n+        if (!this.items || this.items.length === 0) {\r\n+            const cartCountElement = document.getElementById('cart-count');\r\n+            if (cartCountElement) cartCountElement.textContent = 0;\r\n+            return;\r\n+        }\r\n+\r\n+        // Since we removed quantity, count is simply the number of items in cart\r\n+        const count = this.items.length;\r\n+\r\n+        // Log for debugging\r\n+        console.log('Cart count:', count, this.items);\r\n+\r\n+        const cartCountElement = document.getElementById('cart-count');\r\n+        if (cartCountElement) {\r\n+            cartCountElement.textContent = count;\r\n+        }\r\n+    }\r\n+\r\n+    // Ensure totals are zero if cart is empty\r\n+    ensureEmptyCartTotals() {\r\n+        if (!this.items || this.items.length === 0) {\r\n+            const subtotalEl = document.getElementById('subtotal');\r\n+            const totalEl = document.getElementById('total');\r\n+            const checkoutBtn = document.getElementById('checkout-btn');\r\n+\r\n+            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n+            if (totalEl) totalEl.textContent = `$0.00`;\r\n+            if (checkoutBtn) checkoutBtn.disabled = true;\r\n+\r\n+            return true; // indicate cart is empty\r\n+        }\r\n+        return false; // cart is not empty\r\n+    }\r\n+\r\n+\r\n+\r\n+    // Update summary\r\n+    updateSummary() {\r\n+        if (this.ensureEmptyCartTotals()) return; // cart is empty, totals set to 0\r\n+\r\n+        const subtotal = this.calculateSubtotal();\r\n+        const tax = this.calculateTax();\r\n+        const total = subtotal + tax + this.shippingCost;\r\n+\r\n+        const subtotalEl = document.getElementById('subtotal');\r\n+        const totalEl = document.getElementById('total');\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n+\r\n+        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n+        if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n+        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n+    }\r\n+\r\n+    // Show notification\r\n+    showNotification(message) {\r\n+        const notification = document.createElement('div');\r\n+        notification.className = 'notification';\r\n+        notification.textContent = message;\r\n+        notification.style.cssText = `\r\n+            position: fixed;\r\n+            top: 20px;\r\n+            right: 20px;\r\n+            background-color: var(--button-primary);\r\n+            color: white;\r\n+            padding: 1rem 2rem;\r\n+            border-radius: 5px;\r\n+            font-family: 'Inter Medium';\r\n+            z-index: 1000;\r\n+            animation: slideInRight 0.3s ease;\r\n+        `;\r\n+        document.body.appendChild(notification);\r\n+\r\n+        setTimeout(() => {\r\n+            notification.style.animation = 'slideOutRight 0.3s ease';\r\n+            setTimeout(() => {\r\n+                if (notification.parentNode) notification.parentNode.removeChild(notification);\r\n+            }, 300);\r\n+        }, 3000);\r\n+    }\r\n+\r\n+    // Bind events\r\n+    bindEvents() {\r\n+        const clearBtn = document.getElementById('clear-cart');\r\n+        if (clearBtn) clearBtn.addEventListener('click', () => this.clearCart());\r\n+\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n+        if (checkoutBtn) checkoutBtn.addEventListener('click', () => this.proceedToCheckout());\r\n+\r\n+        // Add to cart buttons in recommended section\r\n+        document.addEventListener('click', e => {\r\n+            if (e.target.classList.contains('add-to-cart-btn')) {\r\n+                const title = e.target.getAttribute('data-title');\r\n+                this.addItem(title, 1);\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    // Clear cart\r\n+    clearCart() {\r\n+        if (!confirm('Are you sure you want to clear the cart?')) return;\r\n+        this.items = [];\r\n+        this.saveCartToStorage();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.showNotification('Cart cleared');\r\n+    }\r\n+\r\n+    // Checkout\r\n+    proceedToCheckout() {\r\n+        if (this.items.length === 0) return;\r\n+        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n+    }\r\n+}\r\n+\r\n+// Initialize cart\r\n+document.addEventListener('DOMContentLoaded', () => {\r\n+    window.cart = new ShoppingCart();\r\n+});\r\n+\r\n+// CSS animations for notifications\r\n+const style = document.createElement('style');\r\n+style.textContent = `\r\n+    @keyframes slideInRight {\r\n+        from { transform: translateX(100%); opacity: 0; }\r\n+        to { transform: translateX(0); opacity: 1; }\r\n+    }\r\n+    @keyframes slideOutRight {\r\n+        from { transform: translateX(0); opacity: 1; }\r\n+        to { transform: translateX(100%); opacity: 0; }\r\n+    }\r\n+`;\r\n+document.head.appendChild(style);\r\n"
                },
                {
                    "date": 1756823070705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,18 +75,10 @@\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n \r\n-    document.addEventListener('DOMContentLoaded', async () => {\r\n-    window.cart = new ShoppingCart();\r\n+    \r\n \r\n-    // Wait for any async initialization (like loading JSON)\r\n-    await window.cart.init();\r\n-\r\n-    // Immediately ensure totals are correct\r\n-    window.cart.resetTotalsIfEmpty();\r\n-});\r\n-\r\n     // Remove item from cart\r\n     removeItem(title) {\r\n         this.items = this.items.filter(item => item.title !== title); // OK\r\n         this.saveCartToStorage();\r\n@@ -307,303 +299,4 @@\n         to { transform: translateX(100%); opacity: 0; }\r\n     }\r\n `;\r\n document.head.appendChild(style);\r\n-// Cart functionality for Herbert Schildt Book Store\r\n-// Clear old cart\r\n-\r\n-class ShoppingCart {\r\n-    constructor() {\r\n-        this.items = JSON.parse(localStorage.getItem('bookCart')) || []; // load from localStorage\r\n-        this.shippingCost = 5.99;\r\n-        this.taxRate = 0.08; // 8% tax rate\r\n-        this.booksData = []; // will store all-books.json data\r\n-\r\n-        this.init();\r\n-    }\r\n-\r\n-    async init() {\r\n-        await this.loadBooksData();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.bindEvents();\r\n-    }\r\n-\r\n-    // Load all-books.json\r\n-    async loadBooksData() {\r\n-        try {\r\n-            const response = await fetch('all-books.json');\r\n-            this.booksData = await response.json();\r\n-        } catch (err) {\r\n-            console.error('Error loading all-books.json:', err);\r\n-        }\r\n-    }\r\n-\r\n-      resetTotalsIfEmpty() {\r\n-        if (!this.items || this.items.length === 0) {\r\n-            const subtotalEl = document.getElementById('subtotal');\r\n-            const totalEl = document.getElementById('total');\r\n-            const checkoutBtn = document.getElementById('checkout-btn');\r\n-\r\n-            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n-            if (totalEl) totalEl.textContent = `$0.00`;\r\n-            if (checkoutBtn) checkoutBtn.disabled = true;\r\n-\r\n-            console.log('Cart is empty: totals reset to $0.00');\r\n-        }\r\n-    }\r\n-\r\n-    // Save cart to localStorage\r\n-    saveCartToStorage() {\r\n-        localStorage.setItem('bookCart', JSON.stringify(this.items));\r\n-    }\r\n-\r\n-    // Add item to cart\r\n-    addItem(title, quantity = 1) {\r\n-        const book = this.booksData.find(b => b.title.trim() === title.trim());\r\n-        if (!book) {\r\n-            console.error('Book not found in JSON:', title);\r\n-            return;\r\n-        }\r\n-\r\n-        const existingItem = this.items.find(item => item.title === book.title);\r\n-\r\n-        if (existingItem) {\r\n-            existingItem.quantity += quantity;\r\n-        } else {\r\n-            this.items.push({\r\n-                title: book.title,\r\n-                author: book.author,\r\n-                price: book.price,\r\n-                image: book.image,\r\n-                quantity: quantity\r\n-            });\r\n-        }\r\n-\r\n-        this.saveCartToStorage();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.showNotification(`${book.title} added to cart!`);\r\n-    }\r\n-\r\n-    // Remove item from cart\r\n-    removeItem(title) {\r\n-        this.items = this.items.filter(item => item.title !== title); // OK\r\n-        this.saveCartToStorage();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.showNotification('Item removed from cart');\r\n-    }\r\n-\r\n-    // Render cart items\r\n-    // Render cart items without quantity\r\n-    renderCart() {\r\n-        const cartItemsContainer = document.getElementById('cart-items');\r\n-        if (!cartItemsContainer) return;\r\n-\r\n-        if (this.items.length === 0) {\r\n-            cartItemsContainer.innerHTML = `\r\n-        <div class=\"empty-cart\">\r\n-            <div class=\"empty-cart-content\">\r\n-                <h3>Your cart is empty</h3>\r\n-                <p>Add some books to get started!</p>\r\n-                <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n-            </div>\r\n-        </div>`;\r\n-            return;\r\n-        }\r\n-\r\n-        // Clear container first\r\n-        cartItemsContainer.innerHTML = '';\r\n-\r\n-        this.items.forEach(item => {\r\n-            const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n-            const image = book ? book.image : '';\r\n-\r\n-            const cartItem = document.createElement('div');\r\n-            cartItem.className = 'cart-item';\r\n-            cartItem.innerHTML = `\r\n-            <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n-            <div class=\"cart-item-details\">\r\n-                <h3 class=\"cart-item-title\">${item.title}</h3>\r\n-                <p class=\"cart-item-author\">by ${item.author}</p>\r\n-                <p class=\"cart-item-price\">$${Number(item.price).toFixed(2)}</p>\r\n-            </div>\r\n-            <div class=\"cart-item-controls\"></div>\r\n-        `;\r\n-\r\n-            // Add remove button safely\r\n-            const removeBtn = document.createElement('button');\r\n-            removeBtn.className = 'remove-btn';\r\n-            removeBtn.textContent = 'Remove';\r\n-            removeBtn.addEventListener('click', () => this.removeItem(item.title));\r\n-            cartItem.querySelector('.cart-item-controls').appendChild(removeBtn);\r\n-\r\n-            cartItemsContainer.appendChild(cartItem);\r\n-        });\r\n-\r\n-        this.updateSummary();\r\n-    }\r\n-\r\n-\r\n-    // Calculate subtotal\r\n-    calculateSubtotal() {\r\n-        if (!this.items || this.items.length === 0) return 0;\r\n-\r\n-        return this.items.reduce((sum, item) => {\r\n-            const price = parseFloat(item.price);\r\n-            if (isNaN(price)) {\r\n-                console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n-                return sum;\r\n-            }\r\n-            return sum + price;\r\n-        }, 0);\r\n-    }\r\n-\r\n-    // Calculate tax\r\n-    calculateTax() {\r\n-        if (!this.items || this.items.length === 0) return 0;\r\n-        return this.calculateSubtotal() * this.taxRate;\r\n-    }\r\n-\r\n-    // Calculate total\r\n-    calculateTotal() {\r\n-        if (!this.items || this.items.length === 0) return 0;\r\n-        return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n-    }\r\n-\r\n-\r\n-    // Update cart count in header\r\n-    // Update cart count in header\r\n-    updateCartCount() {\r\n-        if (!this.items || this.items.length === 0) {\r\n-            const cartCountElement = document.getElementById('cart-count');\r\n-            if (cartCountElement) cartCountElement.textContent = 0;\r\n-            return;\r\n-        }\r\n-\r\n-        // Since we removed quantity, count is simply the number of items in cart\r\n-        const count = this.items.length;\r\n-\r\n-        // Log for debugging\r\n-        console.log('Cart count:', count, this.items);\r\n-\r\n-        const cartCountElement = document.getElementById('cart-count');\r\n-        if (cartCountElement) {\r\n-            cartCountElement.textContent = count;\r\n-        }\r\n-    }\r\n-\r\n-    // Ensure totals are zero if cart is empty\r\n-    ensureEmptyCartTotals() {\r\n-        if (!this.items || this.items.length === 0) {\r\n-            const subtotalEl = document.getElementById('subtotal');\r\n-            const totalEl = document.getElementById('total');\r\n-            const checkoutBtn = document.getElementById('checkout-btn');\r\n-\r\n-            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n-            if (totalEl) totalEl.textContent = `$0.00`;\r\n-            if (checkoutBtn) checkoutBtn.disabled = true;\r\n-\r\n-            return true; // indicate cart is empty\r\n-        }\r\n-        return false; // cart is not empty\r\n-    }\r\n-\r\n-\r\n-\r\n-    // Update summary\r\n-    updateSummary() {\r\n-        if (this.ensureEmptyCartTotals()) return; // cart is empty, totals set to 0\r\n-\r\n-        const subtotal = this.calculateSubtotal();\r\n-        const tax = this.calculateTax();\r\n-        const total = subtotal + tax + this.shippingCost;\r\n-\r\n-        const subtotalEl = document.getElementById('subtotal');\r\n-        const totalEl = document.getElementById('total');\r\n-        const checkoutBtn = document.getElementById('checkout-btn');\r\n-\r\n-        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n-        if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n-        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n-    }\r\n-\r\n-    // Show notification\r\n-    showNotification(message) {\r\n-        const notification = document.createElement('div');\r\n-        notification.className = 'notification';\r\n-        notification.textContent = message;\r\n-        notification.style.cssText = `\r\n-            position: fixed;\r\n-            top: 20px;\r\n-            right: 20px;\r\n-            background-color: var(--button-primary);\r\n-            color: white;\r\n-            padding: 1rem 2rem;\r\n-            border-radius: 5px;\r\n-            font-family: 'Inter Medium';\r\n-            z-index: 1000;\r\n-            animation: slideInRight 0.3s ease;\r\n-        `;\r\n-        document.body.appendChild(notification);\r\n-\r\n-        setTimeout(() => {\r\n-            notification.style.animation = 'slideOutRight 0.3s ease';\r\n-            setTimeout(() => {\r\n-                if (notification.parentNode) notification.parentNode.removeChild(notification);\r\n-            }, 300);\r\n-        }, 3000);\r\n-    }\r\n-\r\n-    // Bind events\r\n-    bindEvents() {\r\n-        const clearBtn = document.getElementById('clear-cart');\r\n-        if (clearBtn) clearBtn.addEventListener('click', () => this.clearCart());\r\n-\r\n-        const checkoutBtn = document.getElementById('checkout-btn');\r\n-        if (checkoutBtn) checkoutBtn.addEventListener('click', () => this.proceedToCheckout());\r\n-\r\n-        // Add to cart buttons in recommended section\r\n-        document.addEventListener('click', e => {\r\n-            if (e.target.classList.contains('add-to-cart-btn')) {\r\n-                const title = e.target.getAttribute('data-title');\r\n-                this.addItem(title, 1);\r\n-            }\r\n-        });\r\n-    }\r\n-\r\n-    // Clear cart\r\n-    clearCart() {\r\n-        if (!confirm('Are you sure you want to clear the cart?')) return;\r\n-        this.items = [];\r\n-        this.saveCartToStorage();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.showNotification('Cart cleared');\r\n-    }\r\n-\r\n-    // Checkout\r\n-    proceedToCheckout() {\r\n-        if (this.items.length === 0) return;\r\n-        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n-    }\r\n-}\r\n-\r\n-// Initialize cart\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n-    window.cart = new ShoppingCart();\r\n-});\r\n-\r\n-// CSS animations for notifications\r\n-const style = document.createElement('style');\r\n-style.textContent = `\r\n-    @keyframes slideInRight {\r\n-        from { transform: translateX(100%); opacity: 0; }\r\n-        to { transform: translateX(0); opacity: 1; }\r\n-    }\r\n-    @keyframes slideOutRight {\r\n-        from { transform: translateX(0); opacity: 1; }\r\n-        to { transform: translateX(100%); opacity: 0; }\r\n-    }\r\n-`;\r\n-document.head.appendChild(style);\r\n"
                },
                {
                    "date": 1756823377989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n // Cart functionality for Herbert Schildt Book Store\r\n // Clear old cart\r\n+console.log(\"cart.js loaded\");\r\n \r\n class ShoppingCart {\r\n     constructor() {\r\n         this.items = JSON.parse(localStorage.getItem('bookCart')) || []; // load from localStorage\r\n"
                },
                {
                    "date": 1756823445030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,15 +11,22 @@\n \r\n         this.init();\r\n     }\r\n \r\n-    async init() {\r\n-        await this.loadBooksData();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.bindEvents();\r\n-    }\r\n+async init() {\r\n+    console.log('ShoppingCart init running');\r\n+    await this.loadBooksData();\r\n+    console.log('Books data loaded:', this.booksData);\r\n \r\n+    // Always reset totals first\r\n+    this.updateTotalIfEmpty();\r\n+\r\n+    this.renderCart();\r\n+    this.updateCartCount();\r\n+    this.bindEvents();\r\n+}\r\n+\r\n+\r\n     // Load all-books.json\r\n     async loadBooksData() {\r\n         try {\r\n             const response = await fetch('all-books.json');\r\n"
                },
                {
                    "date": 1756823462432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,20 +11,20 @@\n \r\n         this.init();\r\n     }\r\n \r\n-async init() {\r\n-    console.log('ShoppingCart init running');\r\n-    await this.loadBooksData();\r\n-    console.log('Books data loaded:', this.booksData);\r\n+    async init() {\r\n+        console.log('ShoppingCart init running');\r\n+        await this.loadBooksData();\r\n+        console.log('Books data loaded:', this.booksData);\r\n \r\n-    // Always reset totals first\r\n-    this.updateTotalIfEmpty();\r\n+        // Always reset totals first\r\n+        this.updateTotalIfEmpty();\r\n \r\n-    this.renderCart();\r\n-    this.updateCartCount();\r\n-    this.bindEvents();\r\n-}\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.bindEvents();\r\n+    }\r\n \r\n \r\n     // Load all-books.json\r\n     async loadBooksData() {\r\n@@ -83,19 +83,21 @@\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n \r\n-    \r\n \r\n+\r\n     // Remove item from cart\r\n-    removeItem(title) {\r\n-        this.items = this.items.filter(item => item.title !== title); // OK\r\n-        this.saveCartToStorage();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.showNotification('Item removed from cart');\r\n-    }\r\n+   removeItem(title) {\r\n+    this.items = this.items.filter(item => item.title !== title);\r\n+    this.saveCartToStorage();\r\n+    this.renderCart();\r\n+    this.updateCartCount();\r\n+    this.updateTotalIfEmpty(); // <-- ensures total resets to 0 if empty\r\n+    this.showNotification('Item removed from cart');\r\n+}\r\n \r\n+\r\n     // Render cart items\r\n     // Render cart items without quantity\r\n     renderCart() {\r\n         const cartItemsContainer = document.getElementById('cart-items');\r\n"
                },
                {
                    "date": 1756823531025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,20 +82,33 @@\n         this.updateCartCount();\r\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n+    updateTotalIfEmpty() {\r\n+    if (!this.items || this.items.length === 0) {\r\n+        console.log('Cart empty detected');\r\n+        const subtotalEl = document.getElementById('subtotal');\r\n+        const totalEl = document.getElementById('total');\r\n+        if (subtotalEl) subtotalEl.textContent = '$0.00';\r\n+        if (totalEl) totalEl.textContent = '$0.00';\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n+        if (checkoutBtn) checkoutBtn.disabled = true;\r\n+    }\r\n+}\r\n \r\n \r\n \r\n+\r\n+\r\n     // Remove item from cart\r\n-   removeItem(title) {\r\n-    this.items = this.items.filter(item => item.title !== title);\r\n-    this.saveCartToStorage();\r\n-    this.renderCart();\r\n-    this.updateCartCount();\r\n-    this.updateTotalIfEmpty(); // <-- ensures total resets to 0 if empty\r\n-    this.showNotification('Item removed from cart');\r\n-}\r\n+    removeItem(title) {\r\n+        this.items = this.items.filter(item => item.title !== title);\r\n+        this.saveCartToStorage();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.updateTotalIfEmpty(); // <-- ensures total resets to 0 if empty\r\n+        this.showNotification('Item removed from cart');\r\n+    }\r\n \r\n \r\n     // Render cart items\r\n     // Render cart items without quantity\r\n"
                },
                {
                    "date": 1756823695970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,16 +99,16 @@\n \r\n \r\n \r\n     // Remove item from cart\r\n-    removeItem(title) {\r\n-        this.items = this.items.filter(item => item.title !== title);\r\n-        this.saveCartToStorage();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.updateTotalIfEmpty(); // <-- ensures total resets to 0 if empty\r\n-        this.showNotification('Item removed from cart');\r\n-    }\r\n+removeItem(title) {\r\n+    this.items = this.items.filter(item => item.title !== title);\r\n+    this.saveCartToStorage();\r\n+    this.renderCart();\r\n+    this.updateCartCount();\r\n+    this.updateTotalIfEmpty(); // <- call here\r\n+    this.showNotification('Item removed from cart');\r\n+}\r\n \r\n \r\n     // Render cart items\r\n     // Render cart items without quantity\r\n"
                },
                {
                    "date": 1756823711646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,32 +83,32 @@\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n     updateTotalIfEmpty() {\r\n-    if (!this.items || this.items.length === 0) {\r\n-        console.log('Cart empty detected');\r\n-        const subtotalEl = document.getElementById('subtotal');\r\n-        const totalEl = document.getElementById('total');\r\n-        if (subtotalEl) subtotalEl.textContent = '$0.00';\r\n-        if (totalEl) totalEl.textContent = '$0.00';\r\n-        const checkoutBtn = document.getElementById('checkout-btn');\r\n-        if (checkoutBtn) checkoutBtn.disabled = true;\r\n+        if (!this.items || this.items.length === 0) {\r\n+            console.log('Cart empty detected');\r\n+            const subtotalEl = document.getElementById('subtotal');\r\n+            const totalEl = document.getElementById('total');\r\n+            if (subtotalEl) subtotalEl.textContent = '$0.00';\r\n+            if (totalEl) totalEl.textContent = '$0.00';\r\n+            const checkoutBtn = document.getElementById('checkout-btn');\r\n+            if (checkoutBtn) checkoutBtn.disabled = true;\r\n+        }\r\n     }\r\n-}\r\n \r\n \r\n \r\n \r\n \r\n     // Remove item from cart\r\n-removeItem(title) {\r\n-    this.items = this.items.filter(item => item.title !== title);\r\n-    this.saveCartToStorage();\r\n-    this.renderCart();\r\n-    this.updateCartCount();\r\n-    this.updateTotalIfEmpty(); // <- call here\r\n-    this.showNotification('Item removed from cart');\r\n-}\r\n+    removeItem(title) {\r\n+        this.items = this.items.filter(item => item.title !== title);\r\n+        this.saveCartToStorage();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.updateTotalIfEmpty(); // <- call here\r\n+        this.showNotification('Item removed from cart');\r\n+    }\r\n \r\n \r\n     // Render cart items\r\n     // Render cart items without quantity\r\n@@ -288,17 +288,19 @@\n         });\r\n     }\r\n \r\n     // Clear cart\r\n-    clearCart() {\r\n-        if (!confirm('Are you sure you want to clear the cart?')) return;\r\n-        this.items = [];\r\n-        this.saveCartToStorage();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.showNotification('Cart cleared');\r\n-    }\r\n+clearCart() {\r\n+    if (!confirm('Are you sure you want to clear the cart?')) return;\r\n+    this.items = [];\r\n+    this.saveCartToStorage();\r\n+    this.renderCart();\r\n+    this.updateCartCount();\r\n+    this.updateTotalIfEmpty(); // <- call here\r\n+    this.showNotification('Cart cleared');\r\n+}\r\n \r\n+\r\n     // Checkout\r\n     proceedToCheckout() {\r\n         if (this.items.length === 0) return;\r\n         alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n"
                },
                {
                    "date": 1756823735933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,19 +82,19 @@\n         this.updateCartCount();\r\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n-    updateTotalIfEmpty() {\r\n-        if (!this.items || this.items.length === 0) {\r\n-            console.log('Cart empty detected');\r\n-            const subtotalEl = document.getElementById('subtotal');\r\n-            const totalEl = document.getElementById('total');\r\n-            if (subtotalEl) subtotalEl.textContent = '$0.00';\r\n-            if (totalEl) totalEl.textContent = '$0.00';\r\n-            const checkoutBtn = document.getElementById('checkout-btn');\r\n-            if (checkoutBtn) checkoutBtn.disabled = true;\r\n-        }\r\n+updateTotalIfEmpty() {\r\n+    if (!this.items || this.items.length === 0) {\r\n+        console.log('Cart empty detected'); // should now show every time cart is empty\r\n+        const subtotalEl = document.getElementById('subtotal');\r\n+        const totalEl = document.getElementById('total');\r\n+        if (subtotalEl) subtotalEl.textContent = '$0.00';\r\n+        if (totalEl) totalEl.textContent = '$0.00';\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n+        if (checkoutBtn) checkoutBtn.disabled = true;\r\n     }\r\n+}\r\n \r\n \r\n \r\n \r\n@@ -288,17 +288,17 @@\n         });\r\n     }\r\n \r\n     // Clear cart\r\n-clearCart() {\r\n-    if (!confirm('Are you sure you want to clear the cart?')) return;\r\n-    this.items = [];\r\n-    this.saveCartToStorage();\r\n-    this.renderCart();\r\n-    this.updateCartCount();\r\n-    this.updateTotalIfEmpty(); // <- call here\r\n-    this.showNotification('Cart cleared');\r\n-}\r\n+    clearCart() {\r\n+        if (!confirm('Are you sure you want to clear the cart?')) return;\r\n+        this.items = [];\r\n+        this.saveCartToStorage();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.updateTotalIfEmpty(); // <- call here\r\n+        this.showNotification('Cart cleared');\r\n+    }\r\n \r\n \r\n     // Checkout\r\n     proceedToCheckout() {\r\n"
                },
                {
                    "date": 1756824841292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,51 +55,49 @@\n         localStorage.setItem('bookCart', JSON.stringify(this.items));\r\n     }\r\n \r\n     // Add item to cart\r\n-    addItem(title, quantity = 1) {\r\n-        const book = this.booksData.find(b => b.title.trim() === title.trim());\r\n-        if (!book) {\r\n-            console.error('Book not found in JSON:', title);\r\n-            return;\r\n-        }\r\n+addItem(title, quantity = 1) {\r\n+    const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n+    if (!book) {\r\n+        console.error('Book not found in JSON:', title);\r\n+        return;\r\n+    }\r\n \r\n-        const existingItem = this.items.find(item => item.title === book.title);\r\n+    const existingItem = this.items.find(item => item.title.trim().toLowerCase() === book.title.trim().toLowerCase());\r\n \r\n-        if (existingItem) {\r\n-            existingItem.quantity += quantity;\r\n-        } else {\r\n-            this.items.push({\r\n-                title: book.title,\r\n-                author: book.author,\r\n-                price: book.price,\r\n-                image: book.image,\r\n-                quantity: quantity\r\n-            });\r\n-        }\r\n-\r\n-        this.saveCartToStorage();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.showNotification(`${book.title} added to cart!`);\r\n+    if (!existingItem) {\r\n+        this.items.push({\r\n+            title: book.title.trim(),\r\n+            author: book.author,\r\n+            price: book.price,\r\n+            image: book.image,\r\n+            quantity: quantity\r\n+        });\r\n     }\r\n \r\n-updateTotalIfEmpty() {\r\n-    if (!this.items || this.items.length === 0) {\r\n-        console.log('Cart empty detected'); // should now show every time cart is empty\r\n-        const subtotalEl = document.getElementById('subtotal');\r\n-        const totalEl = document.getElementById('total');\r\n-        if (subtotalEl) subtotalEl.textContent = '$0.00';\r\n-        if (totalEl) totalEl.textContent = '$0.00';\r\n-        const checkoutBtn = document.getElementById('checkout-btn');\r\n-        if (checkoutBtn) checkoutBtn.disabled = true;\r\n-    }\r\n+    this.saveCartToStorage();\r\n+    this.renderCart();\r\n+    this.updateCartCount();\r\n+    this.showNotification(`${book.title} added to cart!`);\r\n }\r\n \r\n+    updateTotalIfEmpty() {\r\n+        if (!this.items || this.items.length === 0) {\r\n+            console.log('Cart empty detected'); // should now show every time cart is empty\r\n+            const subtotalEl = document.getElementById('subtotal');\r\n+            const totalEl = document.getElementById('total');\r\n+            if (subtotalEl) subtotalEl.textContent = '$0.00';\r\n+            if (totalEl) totalEl.textContent = '$0.00';\r\n+            const checkoutBtn = document.getElementById('checkout-btn');\r\n+            if (checkoutBtn) checkoutBtn.disabled = true;\r\n+        }\r\n+    }\r\n \r\n \r\n \r\n \r\n+\r\n     // Remove item from cart\r\n     removeItem(title) {\r\n         this.items = this.items.filter(item => item.title !== title);\r\n         this.saveCartToStorage();\r\n"
                },
                {
                    "date": 1756830416730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,29 @@\n-// Cart functionality for Herbert Schildt Book Store\r\n-// Clear old cart\r\n-console.log(\"cart.js loaded\");\r\n-\r\n class ShoppingCart {\r\n     constructor() {\r\n-        this.items = JSON.parse(localStorage.getItem('bookCart')) || []; // load from localStorage\r\n+        this.items = []; // Will load from current user's cart\r\n         this.shippingCost = 5.99;\r\n         this.taxRate = 0.08; // 8% tax rate\r\n-        this.booksData = []; // will store all-books.json data\r\n+        this.booksData = []; // all-books.json\r\n+        this.currentUserEmail = JSON.parse(localStorage.getItem('currentUser'))?.email || null;\r\n \r\n         this.init();\r\n     }\r\n \r\n     async init() {\r\n-        console.log('ShoppingCart init running');\r\n+        if (!this.currentUserEmail) {\r\n+            console.warn(\"No user logged in\");\r\n+            return;\r\n+        }\r\n+\r\n         await this.loadBooksData();\r\n-        console.log('Books data loaded:', this.booksData);\r\n-\r\n-        // Always reset totals first\r\n+        this.loadUserCart();\r\n         this.updateTotalIfEmpty();\r\n-\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.bindEvents();\r\n     }\r\n \r\n-\r\n-    // Load all-books.json\r\n     async loadBooksData() {\r\n         try {\r\n             const response = await fetch('all-books.json');\r\n             this.booksData = await response.json();\r\n@@ -35,118 +31,96 @@\n             console.error('Error loading all-books.json:', err);\r\n         }\r\n     }\r\n \r\n-    resetTotalsIfEmpty() {\r\n-        if (!this.items || this.items.length === 0) {\r\n-            const subtotalEl = document.getElementById('subtotal');\r\n-            const totalEl = document.getElementById('total');\r\n-            const checkoutBtn = document.getElementById('checkout-btn');\r\n-\r\n-            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n-            if (totalEl) totalEl.textContent = `$0.00`;\r\n-            if (checkoutBtn) checkoutBtn.disabled = true;\r\n-\r\n-            console.log('Cart is empty: totals reset to $0.00');\r\n+    // Load cart from current user in localStorage users\r\n+    loadUserCart() {\r\n+        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n+        const user = users.find(u => u.email === this.currentUserEmail);\r\n+        if (user) {\r\n+            this.items = user.cart || [];\r\n+        } else {\r\n+            this.items = [];\r\n         }\r\n     }\r\n \r\n-    // Save cart to localStorage\r\n+    // Save cart to current user in localStorage users\r\n     saveCartToStorage() {\r\n-        localStorage.setItem('bookCart', JSON.stringify(this.items));\r\n-    }\r\n+        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n+        const userIndex = users.findIndex(u => u.email === this.currentUserEmail);\r\n+        if (userIndex === -1) return;\r\n \r\n-    // Add item to cart\r\n-addItem(title, quantity = 1) {\r\n-    const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n-    if (!book) {\r\n-        console.error('Book not found in JSON:', title);\r\n-        return;\r\n+        users[userIndex].cart = this.items;\r\n+        localStorage.setItem('users', JSON.stringify(users));\r\n     }\r\n \r\n-    const existingItem = this.items.find(item => item.title.trim().toLowerCase() === book.title.trim().toLowerCase());\r\n+    addItem(title, quantity = 1) {\r\n+        const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n+        if (!book) {\r\n+            console.error('Book not found in JSON:', title);\r\n+            return;\r\n+        }\r\n \r\n-    if (!existingItem) {\r\n-        this.items.push({\r\n-            title: book.title.trim(),\r\n-            author: book.author,\r\n-            price: book.price,\r\n-            image: book.image,\r\n-            quantity: quantity\r\n-        });\r\n-    }\r\n+        const existingItem = this.items.find(item => item.title.trim().toLowerCase() === book.title.trim().toLowerCase());\r\n \r\n-    this.saveCartToStorage();\r\n-    this.renderCart();\r\n-    this.updateCartCount();\r\n-    this.showNotification(`${book.title} added to cart!`);\r\n-}\r\n+        if (!existingItem) {\r\n+            this.items.push({\r\n+                title: book.title.trim(),\r\n+                author: book.author,\r\n+                price: book.price,\r\n+                image: book.image,\r\n+                quantity\r\n+            });\r\n+        }\r\n \r\n-    updateTotalIfEmpty() {\r\n-        if (!this.items || this.items.length === 0) {\r\n-            console.log('Cart empty detected'); // should now show every time cart is empty\r\n-            const subtotalEl = document.getElementById('subtotal');\r\n-            const totalEl = document.getElementById('total');\r\n-            if (subtotalEl) subtotalEl.textContent = '$0.00';\r\n-            if (totalEl) totalEl.textContent = '$0.00';\r\n-            const checkoutBtn = document.getElementById('checkout-btn');\r\n-            if (checkoutBtn) checkoutBtn.disabled = true;\r\n-        }\r\n+        this.saveCartToStorage();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n-\r\n-\r\n-\r\n-\r\n-    // Remove item from cart\r\n     removeItem(title) {\r\n         this.items = this.items.filter(item => item.title !== title);\r\n         this.saveCartToStorage();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n-        this.updateTotalIfEmpty(); // <- call here\r\n+        this.updateTotalIfEmpty();\r\n         this.showNotification('Item removed from cart');\r\n     }\r\n \r\n-\r\n-    // Render cart items\r\n-    // Render cart items without quantity\r\n     renderCart() {\r\n         const cartItemsContainer = document.getElementById('cart-items');\r\n         if (!cartItemsContainer) return;\r\n \r\n         if (this.items.length === 0) {\r\n             cartItemsContainer.innerHTML = `\r\n-        <div class=\"empty-cart\">\r\n-            <div class=\"empty-cart-content\">\r\n-                <h3>Your cart is empty</h3>\r\n-                <p>Add some books to get started!</p>\r\n-                <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n-            </div>\r\n-        </div>`;\r\n+                <div class=\"empty-cart\">\r\n+                    <div class=\"empty-cart-content\">\r\n+                        <h3>Your cart is empty</h3>\r\n+                        <p>Add some books to get started!</p>\r\n+                        <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n+                    </div>\r\n+                </div>`;\r\n             return;\r\n         }\r\n \r\n-        // Clear container first\r\n         cartItemsContainer.innerHTML = '';\r\n-\r\n         this.items.forEach(item => {\r\n             const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n             const image = book ? book.image : '';\r\n \r\n             const cartItem = document.createElement('div');\r\n             cartItem.className = 'cart-item';\r\n             cartItem.innerHTML = `\r\n-            <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n-            <div class=\"cart-item-details\">\r\n-                <h3 class=\"cart-item-title\">${item.title}</h3>\r\n-                <p class=\"cart-item-author\">by ${item.author}</p>\r\n-                <p class=\"cart-item-price\">$${Number(item.price).toFixed(2)}</p>\r\n-            </div>\r\n-            <div class=\"cart-item-controls\"></div>\r\n-        `;\r\n+                <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n+                <div class=\"cart-item-details\">\r\n+                    <h3 class=\"cart-item-title\">${item.title}</h3>\r\n+                    <p class=\"cart-item-author\">by ${item.author}</p>\r\n+                    <p class=\"cart-item-price\">$${Number(item.price).toFixed(2)}</p>\r\n+                </div>\r\n+                <div class=\"cart-item-controls\"></div>\r\n+            `;\r\n \r\n-            // Add remove button safely\r\n             const removeBtn = document.createElement('button');\r\n             removeBtn.className = 'remove-btn';\r\n             removeBtn.textContent = 'Remove';\r\n             removeBtn.addEventListener('click', () => this.removeItem(item.title));\r\n@@ -157,93 +131,48 @@\n \r\n         this.updateSummary();\r\n     }\r\n \r\n-\r\n-    // Calculate subtotal\r\n     calculateSubtotal() {\r\n-        if (!this.items || this.items.length === 0) return 0;\r\n-\r\n-        return this.items.reduce((sum, item) => {\r\n-            const price = parseFloat(item.price);\r\n-            if (isNaN(price)) {\r\n-                console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n-                return sum;\r\n-            }\r\n-            return sum + price;\r\n-        }, 0);\r\n+        return this.items.reduce((sum, item) => sum + Number(item.price || 0), 0);\r\n     }\r\n \r\n-    // Calculate tax\r\n     calculateTax() {\r\n-        if (!this.items || this.items.length === 0) return 0;\r\n         return this.calculateSubtotal() * this.taxRate;\r\n     }\r\n \r\n-    // Calculate total\r\n     calculateTotal() {\r\n-        if (!this.items || this.items.length === 0) return 0;\r\n         return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n     }\r\n \r\n-\r\n-    // Update cart count in header\r\n-    // Update cart count in header\r\n     updateCartCount() {\r\n-        if (!this.items || this.items.length === 0) {\r\n-            const cartCountElement = document.getElementById('cart-count');\r\n-            if (cartCountElement) cartCountElement.textContent = 0;\r\n-            return;\r\n-        }\r\n-\r\n-        // Since we removed quantity, count is simply the number of items in cart\r\n-        const count = this.items.length;\r\n-\r\n-        // Log for debugging\r\n-        console.log('Cart count:', count, this.items);\r\n-\r\n         const cartCountElement = document.getElementById('cart-count');\r\n-        if (cartCountElement) {\r\n-            cartCountElement.textContent = count;\r\n-        }\r\n+        if (cartCountElement) cartCountElement.textContent = this.items.length || 0;\r\n     }\r\n \r\n-    // Ensure totals are zero if cart is empty\r\n-    ensureEmptyCartTotals() {\r\n+    updateSummary() {\r\n         if (!this.items || this.items.length === 0) {\r\n             const subtotalEl = document.getElementById('subtotal');\r\n             const totalEl = document.getElementById('total');\r\n             const checkoutBtn = document.getElementById('checkout-btn');\r\n-\r\n             if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n             if (totalEl) totalEl.textContent = `$0.00`;\r\n             if (checkoutBtn) checkoutBtn.disabled = true;\r\n-\r\n-            return true; // indicate cart is empty\r\n+            return;\r\n         }\r\n-        return false; // cart is not empty\r\n-    }\r\n \r\n-\r\n-\r\n-    // Update summary\r\n-    updateSummary() {\r\n-        if (this.ensureEmptyCartTotals()) return; // cart is empty, totals set to 0\r\n-\r\n         const subtotal = this.calculateSubtotal();\r\n         const tax = this.calculateTax();\r\n-        const total = subtotal + tax + this.shippingCost;\r\n+        const total = this.calculateTotal();\r\n \r\n         const subtotalEl = document.getElementById('subtotal');\r\n         const totalEl = document.getElementById('total');\r\n         const checkoutBtn = document.getElementById('checkout-btn');\r\n-\r\n         if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n         if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n-        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n+        if (checkoutBtn) checkoutBtn.disabled = false;\r\n     }\r\n \r\n-    // Show notification\r\n     showNotification(message) {\r\n         const notification = document.createElement('div');\r\n         notification.className = 'notification';\r\n         notification.textContent = message;\r\n@@ -268,58 +197,38 @@\n             }, 300);\r\n         }, 3000);\r\n     }\r\n \r\n-    // Bind events\r\n     bindEvents() {\r\n         const clearBtn = document.getElementById('clear-cart');\r\n         if (clearBtn) clearBtn.addEventListener('click', () => this.clearCart());\r\n \r\n         const checkoutBtn = document.getElementById('checkout-btn');\r\n         if (checkoutBtn) checkoutBtn.addEventListener('click', () => this.proceedToCheckout());\r\n \r\n-        // Add to cart buttons in recommended section\r\n         document.addEventListener('click', e => {\r\n             if (e.target.classList.contains('add-to-cart-btn')) {\r\n                 const title = e.target.getAttribute('data-title');\r\n                 this.addItem(title, 1);\r\n             }\r\n         });\r\n     }\r\n \r\n-    // Clear cart\r\n     clearCart() {\r\n         if (!confirm('Are you sure you want to clear the cart?')) return;\r\n         this.items = [];\r\n         this.saveCartToStorage();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n-        this.updateTotalIfEmpty(); // <- call here\r\n+        this.updateTotalIfEmpty();\r\n         this.showNotification('Cart cleared');\r\n     }\r\n \r\n-\r\n-    // Checkout\r\n     proceedToCheckout() {\r\n-        if (this.items.length === 0) return;\r\n+        if (!this.items.length) return;\r\n         alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n     }\r\n }\r\n \r\n-// Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n-\r\n-// CSS animations for notifications\r\n-const style = document.createElement('style');\r\n-style.textContent = `\r\n-    @keyframes slideInRight {\r\n-        from { transform: translateX(100%); opacity: 0; }\r\n-        to { transform: translateX(0); opacity: 1; }\r\n-    }\r\n-    @keyframes slideOutRight {\r\n-        from { transform: translateX(0); opacity: 1; }\r\n-        to { transform: translateX(100%); opacity: 0; }\r\n-    }\r\n-`;\r\n-document.head.appendChild(style);\r\n"
                },
                {
                    "date": 1756830489058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,33 @@\n+// Cart functionality for Herbert Schildt Book Store\r\n+// Clear old cart\r\n+console.log(\"cart.js loaded\");\r\n+\r\n class ShoppingCart {\r\n     constructor() {\r\n-        this.items = []; // Will load from current user's cart\r\n+        this.items = JSON.parse(localStorage.getItem('bookCart')) || []; // load from localStorage\r\n         this.shippingCost = 5.99;\r\n         this.taxRate = 0.08; // 8% tax rate\r\n-        this.booksData = []; // all-books.json\r\n-        this.currentUserEmail = JSON.parse(localStorage.getItem('currentUser'))?.email || null;\r\n+        this.booksData = []; // will store all-books.json data\r\n \r\n         this.init();\r\n     }\r\n \r\n     async init() {\r\n-        if (!this.currentUserEmail) {\r\n-            console.warn(\"No user logged in\");\r\n-            return;\r\n-        }\r\n+        console.log('ShoppingCart init running');\r\n+        await this.loadBooksData();\r\n+        console.log('Books data loaded:', this.booksData);\r\n \r\n-        await this.loadBooksData();\r\n-        this.loadUserCart();\r\n+        // Always reset totals first\r\n         this.updateTotalIfEmpty();\r\n+\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.bindEvents();\r\n     }\r\n \r\n+\r\n+    // Load all-books.json\r\n     async loadBooksData() {\r\n         try {\r\n             const response = await fetch('all-books.json');\r\n             this.booksData = await response.json();\r\n@@ -31,29 +35,28 @@\n             console.error('Error loading all-books.json:', err);\r\n         }\r\n     }\r\n \r\n-    // Load cart from current user in localStorage users\r\n-    loadUserCart() {\r\n-        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n-        const user = users.find(u => u.email === this.currentUserEmail);\r\n-        if (user) {\r\n-            this.items = user.cart || [];\r\n-        } else {\r\n-            this.items = [];\r\n+    resetTotalsIfEmpty() {\r\n+        if (!this.items || this.items.length === 0) {\r\n+            const subtotalEl = document.getElementById('subtotal');\r\n+            const totalEl = document.getElementById('total');\r\n+            const checkoutBtn = document.getElementById('checkout-btn');\r\n+\r\n+            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n+            if (totalEl) totalEl.textContent = `$0.00`;\r\n+            if (checkoutBtn) checkoutBtn.disabled = true;\r\n+\r\n+            console.log('Cart is empty: totals reset to $0.00');\r\n         }\r\n     }\r\n \r\n-    // Save cart to current user in localStorage users\r\n+    // Save cart to localStorage\r\n     saveCartToStorage() {\r\n-        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n-        const userIndex = users.findIndex(u => u.email === this.currentUserEmail);\r\n-        if (userIndex === -1) return;\r\n-\r\n-        users[userIndex].cart = this.items;\r\n-        localStorage.setItem('users', JSON.stringify(users));\r\n+        localStorage.setItem('bookCart', JSON.stringify(this.items));\r\n     }\r\n \r\n+    // Add item to cart\r\n     addItem(title, quantity = 1) {\r\n         const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n         if (!book) {\r\n             console.error('Book not found in JSON:', title);\r\n@@ -67,9 +70,9 @@\n                 title: book.title.trim(),\r\n                 author: book.author,\r\n                 price: book.price,\r\n                 image: book.image,\r\n-                quantity\r\n+                quantity: quantity\r\n             });\r\n         }\r\n \r\n         this.saveCartToStorage();\r\n@@ -77,50 +80,73 @@\n         this.updateCartCount();\r\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n+    updateTotalIfEmpty() {\r\n+        if (!this.items || this.items.length === 0) {\r\n+            console.log('Cart empty detected'); // should now show every time cart is empty\r\n+            const subtotalEl = document.getElementById('subtotal');\r\n+            const totalEl = document.getElementById('total');\r\n+            if (subtotalEl) subtotalEl.textContent = '$0.00';\r\n+            if (totalEl) totalEl.textContent = '$0.00';\r\n+            const checkoutBtn = document.getElementById('checkout-btn');\r\n+            if (checkoutBtn) checkoutBtn.disabled = true;\r\n+        }\r\n+    }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+    // Remove item from cart\r\n     removeItem(title) {\r\n         this.items = this.items.filter(item => item.title !== title);\r\n         this.saveCartToStorage();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n-        this.updateTotalIfEmpty();\r\n+        this.updateTotalIfEmpty(); // <- call here\r\n         this.showNotification('Item removed from cart');\r\n     }\r\n \r\n+\r\n+    // Render cart items\r\n+    // Render cart items without quantity\r\n     renderCart() {\r\n         const cartItemsContainer = document.getElementById('cart-items');\r\n         if (!cartItemsContainer) return;\r\n \r\n         if (this.items.length === 0) {\r\n             cartItemsContainer.innerHTML = `\r\n-                <div class=\"empty-cart\">\r\n-                    <div class=\"empty-cart-content\">\r\n-                        <h3>Your cart is empty</h3>\r\n-                        <p>Add some books to get started!</p>\r\n-                        <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n-                    </div>\r\n-                </div>`;\r\n+        <div class=\"empty-cart\">\r\n+            <div class=\"empty-cart-content\">\r\n+                <h3>Your cart is empty</h3>\r\n+                <p>Add some books to get started!</p>\r\n+                <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n+            </div>\r\n+        </div>`;\r\n             return;\r\n         }\r\n \r\n+        // Clear container first\r\n         cartItemsContainer.innerHTML = '';\r\n+\r\n         this.items.forEach(item => {\r\n             const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n             const image = book ? book.image : '';\r\n \r\n             const cartItem = document.createElement('div');\r\n             cartItem.className = 'cart-item';\r\n             cartItem.innerHTML = `\r\n-                <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n-                <div class=\"cart-item-details\">\r\n-                    <h3 class=\"cart-item-title\">${item.title}</h3>\r\n-                    <p class=\"cart-item-author\">by ${item.author}</p>\r\n-                    <p class=\"cart-item-price\">$${Number(item.price).toFixed(2)}</p>\r\n-                </div>\r\n-                <div class=\"cart-item-controls\"></div>\r\n-            `;\r\n+            <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n+            <div class=\"cart-item-details\">\r\n+                <h3 class=\"cart-item-title\">${item.title}</h3>\r\n+                <p class=\"cart-item-author\">by ${item.author}</p>\r\n+                <p class=\"cart-item-price\">$${Number(item.price).toFixed(2)}</p>\r\n+            </div>\r\n+            <div class=\"cart-item-controls\"></div>\r\n+        `;\r\n \r\n+            // Add remove button safely\r\n             const removeBtn = document.createElement('button');\r\n             removeBtn.className = 'remove-btn';\r\n             removeBtn.textContent = 'Remove';\r\n             removeBtn.addEventListener('click', () => this.removeItem(item.title));\r\n@@ -131,48 +157,93 @@\n \r\n         this.updateSummary();\r\n     }\r\n \r\n+\r\n+    // Calculate subtotal\r\n     calculateSubtotal() {\r\n-        return this.items.reduce((sum, item) => sum + Number(item.price || 0), 0);\r\n+        if (!this.items || this.items.length === 0) return 0;\r\n+\r\n+        return this.items.reduce((sum, item) => {\r\n+            const price = parseFloat(item.price);\r\n+            if (isNaN(price)) {\r\n+                console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n+                return sum;\r\n+            }\r\n+            return sum + price;\r\n+        }, 0);\r\n     }\r\n \r\n+    // Calculate tax\r\n     calculateTax() {\r\n+        if (!this.items || this.items.length === 0) return 0;\r\n         return this.calculateSubtotal() * this.taxRate;\r\n     }\r\n \r\n+    // Calculate total\r\n     calculateTotal() {\r\n+        if (!this.items || this.items.length === 0) return 0;\r\n         return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n     }\r\n \r\n+\r\n+    // Update cart count in header\r\n+    // Update cart count in header\r\n     updateCartCount() {\r\n+        if (!this.items || this.items.length === 0) {\r\n+            const cartCountElement = document.getElementById('cart-count');\r\n+            if (cartCountElement) cartCountElement.textContent = 0;\r\n+            return;\r\n+        }\r\n+\r\n+        // Since we removed quantity, count is simply the number of items in cart\r\n+        const count = this.items.length;\r\n+\r\n+        // Log for debugging\r\n+        console.log('Cart count:', count, this.items);\r\n+\r\n         const cartCountElement = document.getElementById('cart-count');\r\n-        if (cartCountElement) cartCountElement.textContent = this.items.length || 0;\r\n+        if (cartCountElement) {\r\n+            cartCountElement.textContent = count;\r\n+        }\r\n     }\r\n \r\n-    updateSummary() {\r\n+    // Ensure totals are zero if cart is empty\r\n+    ensureEmptyCartTotals() {\r\n         if (!this.items || this.items.length === 0) {\r\n             const subtotalEl = document.getElementById('subtotal');\r\n             const totalEl = document.getElementById('total');\r\n             const checkoutBtn = document.getElementById('checkout-btn');\r\n+\r\n             if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n             if (totalEl) totalEl.textContent = `$0.00`;\r\n             if (checkoutBtn) checkoutBtn.disabled = true;\r\n-            return;\r\n+\r\n+            return true; // indicate cart is empty\r\n         }\r\n+        return false; // cart is not empty\r\n+    }\r\n \r\n+\r\n+\r\n+    // Update summary\r\n+    updateSummary() {\r\n+        if (this.ensureEmptyCartTotals()) return; // cart is empty, totals set to 0\r\n+\r\n         const subtotal = this.calculateSubtotal();\r\n         const tax = this.calculateTax();\r\n-        const total = this.calculateTotal();\r\n+        const total = subtotal + tax + this.shippingCost;\r\n \r\n         const subtotalEl = document.getElementById('subtotal');\r\n         const totalEl = document.getElementById('total');\r\n         const checkoutBtn = document.getElementById('checkout-btn');\r\n+\r\n         if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n         if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n-        if (checkoutBtn) checkoutBtn.disabled = false;\r\n+        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n     }\r\n \r\n+    // Show notification\r\n     showNotification(message) {\r\n         const notification = document.createElement('div');\r\n         notification.className = 'notification';\r\n         notification.textContent = message;\r\n@@ -197,38 +268,58 @@\n             }, 300);\r\n         }, 3000);\r\n     }\r\n \r\n+    // Bind events\r\n     bindEvents() {\r\n         const clearBtn = document.getElementById('clear-cart');\r\n         if (clearBtn) clearBtn.addEventListener('click', () => this.clearCart());\r\n \r\n         const checkoutBtn = document.getElementById('checkout-btn');\r\n         if (checkoutBtn) checkoutBtn.addEventListener('click', () => this.proceedToCheckout());\r\n \r\n+        // Add to cart buttons in recommended section\r\n         document.addEventListener('click', e => {\r\n             if (e.target.classList.contains('add-to-cart-btn')) {\r\n                 const title = e.target.getAttribute('data-title');\r\n                 this.addItem(title, 1);\r\n             }\r\n         });\r\n     }\r\n \r\n+    // Clear cart\r\n     clearCart() {\r\n         if (!confirm('Are you sure you want to clear the cart?')) return;\r\n         this.items = [];\r\n         this.saveCartToStorage();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n-        this.updateTotalIfEmpty();\r\n+        this.updateTotalIfEmpty(); // <- call here\r\n         this.showNotification('Cart cleared');\r\n     }\r\n \r\n+\r\n+    // Checkout\r\n     proceedToCheckout() {\r\n-        if (!this.items.length) return;\r\n+        if (this.items.length === 0) return;\r\n         alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n     }\r\n }\r\n \r\n+// Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n+\r\n+// CSS animations for notifications\r\n+const style = document.createElement('style');\r\n+style.textContent = `\r\n+    @keyframes slideInRight {\r\n+        from { transform: translateX(100%); opacity: 0; }\r\n+        to { transform: translateX(0); opacity: 1; }\r\n+    }\r\n+    @keyframes slideOutRight {\r\n+        from { transform: translateX(0); opacity: 1; }\r\n+        to { transform: translateX(100%); opacity: 0; }\r\n+    }\r\n+`;\r\n+document.head.appendChild(style);\r\n"
                },
                {
                    "date": 1756830554337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,18 @@\n // Clear old cart\r\n console.log(\"cart.js loaded\");\r\n \r\n class ShoppingCart {\r\n-    constructor() {\r\n-        this.items = JSON.parse(localStorage.getItem('bookCart')) || []; // load from localStorage\r\n-        this.shippingCost = 5.99;\r\n-        this.taxRate = 0.08; // 8% tax rate\r\n-        this.booksData = []; // will store all-books.json data\r\n+   constructor() {\r\n+    const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n+    this.currentUserEmail = currentUser?.email || null; // get email\r\n+    this.items = []; // cart will be loaded from current user\r\n+    this.shippingCost = 5.99;\r\n+    this.taxRate = 0.08;\r\n+    this.booksData = []; // will store all-books.json data\r\n \r\n-        this.init();\r\n-    }\r\n+    this.init();\r\n+}\r\n \r\n     async init() {\r\n         console.log('ShoppingCart init running');\r\n         await this.loadBooksData();\r\n"
                },
                {
                    "date": 1756830580731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,17 @@\n         this.updateCartCount();\r\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n+    loadUserCart() {\r\n+    if (!this.currentUserEmail) return;\r\n+\r\n+    const users = JSON.parse(localStorage.getItem('users')) || [];\r\n+    const user = users.find(u => u.email === this.currentUserEmail);\r\n+    if (user) this.items = user.cart || [];\r\n+}\r\n+\r\n+\r\n     updateTotalIfEmpty() {\r\n         if (!this.items || this.items.length === 0) {\r\n             console.log('Cart empty detected'); // should now show every time cart is empty\r\n             const subtotalEl = document.getElementById('subtotal');\r\n"
                },
                {
                    "date": 1756830609779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,18 +2,18 @@\n // Clear old cart\r\n console.log(\"cart.js loaded\");\r\n \r\n class ShoppingCart {\r\n-   constructor() {\r\n-    const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n-    this.currentUserEmail = currentUser?.email || null; // get email\r\n-    this.items = []; // cart will be loaded from current user\r\n-    this.shippingCost = 5.99;\r\n-    this.taxRate = 0.08;\r\n-    this.booksData = []; // will store all-books.json data\r\n+    constructor() {\r\n+        const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n+        this.currentUserEmail = currentUser?.email || null; // get email\r\n+        this.items = []; // cart will be loaded from current user\r\n+        this.shippingCost = 5.99;\r\n+        this.taxRate = 0.08;\r\n+        this.booksData = []; // will store all-books.json data\r\n \r\n-    this.init();\r\n-}\r\n+        this.init();\r\n+    }\r\n \r\n     async init() {\r\n         console.log('ShoppingCart init running');\r\n         await this.loadBooksData();\r\n@@ -35,8 +35,11 @@\n             this.booksData = await response.json();\r\n         } catch (err) {\r\n             console.error('Error loading all-books.json:', err);\r\n         }\r\n+        await this.loadBooksData();\r\n+this.loadUserCart(); // <-- new\r\n+\r\n     }\r\n \r\n     resetTotalsIfEmpty() {\r\n         if (!this.items || this.items.length === 0) {\r\n@@ -83,14 +86,14 @@\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n     loadUserCart() {\r\n-    if (!this.currentUserEmail) return;\r\n+        if (!this.currentUserEmail) return;\r\n \r\n-    const users = JSON.parse(localStorage.getItem('users')) || [];\r\n-    const user = users.find(u => u.email === this.currentUserEmail);\r\n-    if (user) this.items = user.cart || [];\r\n-}\r\n+        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n+        const user = users.find(u => u.email === this.currentUserEmail);\r\n+        if (user) this.items = user.cart || [];\r\n+    }\r\n \r\n \r\n     updateTotalIfEmpty() {\r\n         if (!this.items || this.items.length === 0) {\r\n"
                },
                {
                    "date": 1756830636066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,11 +35,9 @@\n             this.booksData = await response.json();\r\n         } catch (err) {\r\n             console.error('Error loading all-books.json:', err);\r\n         }\r\n-        await this.loadBooksData();\r\n-this.loadUserCart(); // <-- new\r\n-\r\n+        \r\n     }\r\n \r\n     resetTotalsIfEmpty() {\r\n         if (!this.items || this.items.length === 0) {\r\n@@ -55,12 +53,19 @@\n         }\r\n     }\r\n \r\n     // Save cart to localStorage\r\n-    saveCartToStorage() {\r\n-        localStorage.setItem('bookCart', JSON.stringify(this.items));\r\n-    }\r\n+saveCartToStorage() {\r\n+    if (!this.currentUserEmail) return;\r\n \r\n+    const users = JSON.parse(localStorage.getItem('users')) || [];\r\n+    const userIndex = users.findIndex(u => u.email === this.currentUserEmail);\r\n+    if (userIndex === -1) return;\r\n+\r\n+    users[userIndex].cart = this.items;\r\n+    localStorage.setItem('users', JSON.stringify(users));\r\n+}\r\n+\r\n     // Add item to cart\r\n     addItem(title, quantity = 1) {\r\n         const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n         if (!book) {\r\n"
                },
                {
                    "date": 1756830663299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n             this.booksData = await response.json();\r\n         } catch (err) {\r\n             console.error('Error loading all-books.json:', err);\r\n         }\r\n-        \r\n+\r\n     }\r\n \r\n     resetTotalsIfEmpty() {\r\n         if (!this.items || this.items.length === 0) {\r\n@@ -53,45 +53,43 @@\n         }\r\n     }\r\n \r\n     // Save cart to localStorage\r\n-saveCartToStorage() {\r\n-    if (!this.currentUserEmail) return;\r\n+    saveCartToStorage() {\r\n+        if (!this.currentUserEmail) return;\r\n \r\n-    const users = JSON.parse(localStorage.getItem('users')) || [];\r\n-    const userIndex = users.findIndex(u => u.email === this.currentUserEmail);\r\n-    if (userIndex === -1) return;\r\n+        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n+        const userIndex = users.findIndex(u => u.email === this.currentUserEmail);\r\n+        if (userIndex === -1) return;\r\n \r\n-    users[userIndex].cart = this.items;\r\n-    localStorage.setItem('users', JSON.stringify(users));\r\n-}\r\n+        users[userIndex].cart = this.items;\r\n+        localStorage.setItem('users', JSON.stringify(users));\r\n+    }\r\n \r\n     // Add item to cart\r\n-    addItem(title, quantity = 1) {\r\n-        const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n-        if (!book) {\r\n-            console.error('Book not found in JSON:', title);\r\n-            return;\r\n-        }\r\n+addItem(title, quantity = 1) {\r\n+    const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n+    if (!book) return console.error('Book not found:', title);\r\n \r\n-        const existingItem = this.items.find(item => item.title.trim().toLowerCase() === book.title.trim().toLowerCase());\r\n+    const existingItem = this.items.find(item => item.title.trim().toLowerCase() === book.title.trim().toLowerCase());\r\n \r\n-        if (!existingItem) {\r\n-            this.items.push({\r\n-                title: book.title.trim(),\r\n-                author: book.author,\r\n-                price: book.price,\r\n-                image: book.image,\r\n-                quantity: quantity\r\n-            });\r\n-        }\r\n-\r\n-        this.saveCartToStorage();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.showNotification(`${book.title} added to cart!`);\r\n+    if (!existingItem) {\r\n+        this.items.push({\r\n+            title: book.title.trim(),\r\n+            author: book.author,\r\n+            price: book.price,\r\n+            image: book.image,\r\n+            quantity: quantity\r\n+        });\r\n     }\r\n \r\n+    this.saveCartToStorage(); // <-- save in user's cart now\r\n+    this.renderCart();\r\n+    this.updateCartCount();\r\n+    this.showNotification(`${book.title} added to cart!`);\r\n+}\r\n+\r\n+\r\n     loadUserCart() {\r\n         if (!this.currentUserEmail) return;\r\n \r\n         const users = JSON.parse(localStorage.getItem('users')) || [];\r\n"
                },
                {
                    "date": 1756830702875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,31 +65,31 @@\n         localStorage.setItem('users', JSON.stringify(users));\r\n     }\r\n \r\n     // Add item to cart\r\n-addItem(title, quantity = 1) {\r\n-    const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n-    if (!book) return console.error('Book not found:', title);\r\n+    addItem(title, quantity = 1) {\r\n+        const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n+        if (!book) return console.error('Book not found:', title);\r\n \r\n-    const existingItem = this.items.find(item => item.title.trim().toLowerCase() === book.title.trim().toLowerCase());\r\n+        const existingItem = this.items.find(item => item.title.trim().toLowerCase() === book.title.trim().toLowerCase());\r\n \r\n-    if (!existingItem) {\r\n-        this.items.push({\r\n-            title: book.title.trim(),\r\n-            author: book.author,\r\n-            price: book.price,\r\n-            image: book.image,\r\n-            quantity: quantity\r\n-        });\r\n+        if (!existingItem) {\r\n+            this.items.push({\r\n+                title: book.title.trim(),\r\n+                author: book.author,\r\n+                price: book.price,\r\n+                image: book.image,\r\n+                quantity: quantity\r\n+            });\r\n+        }\r\n+\r\n+        this.saveCartToStorage(); // <-- save in user's cart now\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n-    this.saveCartToStorage(); // <-- save in user's cart now\r\n-    this.renderCart();\r\n-    this.updateCartCount();\r\n-    this.showNotification(`${book.title} added to cart!`);\r\n-}\r\n \r\n-\r\n     loadUserCart() {\r\n         if (!this.currentUserEmail) return;\r\n \r\n         const users = JSON.parse(localStorage.getItem('users')) || [];\r\n"
                },
                {
                    "date": 1756830726650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n         console.log('Books data loaded:', this.booksData);\r\n \r\n         // Always reset totals first\r\n         this.updateTotalIfEmpty();\r\n+        this.loadUserCart(); // <-- new\r\n \r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.bindEvents();\r\n"
                },
                {
                    "date": 1756835331119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,14 +316,37 @@\n     }\r\n \r\n \r\n     // Checkout\r\n-    proceedToCheckout() {\r\n-        if (this.items.length === 0) return;\r\n-        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n-    }\r\n+  // Checkout\r\n+proceedToCheckout() {\r\n+    if (this.items.length === 0) return;\r\n+\r\n+    // Render PayPal button dynamically\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n+\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: {\r\n+                        value: this.calculateTotal().toFixed(2) // use cart total\r\n+                    }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: (data, actions) => {\r\n+            return actions.order.capture().then(details => {\r\n+                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+                this.clearCart();\r\n+                window.location.href = \"thankyou.html\"; // redirect after payment\r\n+            });\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n }\r\n \r\n+\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1756835339455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,37 +316,14 @@\n     }\r\n \r\n \r\n     // Checkout\r\n-  // Checkout\r\n-proceedToCheckout() {\r\n-    if (this.items.length === 0) return;\r\n-\r\n-    // Render PayPal button dynamically\r\n-    const paypalContainer = document.getElementById('paypal-button-container');\r\n-    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n-\r\n-    paypal.Buttons({\r\n-        createOrder: (data, actions) => {\r\n-            return actions.order.create({\r\n-                purchase_units: [{\r\n-                    amount: {\r\n-                        value: this.calculateTotal().toFixed(2) // use cart total\r\n-                    }\r\n-                }]\r\n-            });\r\n-        },\r\n-        onApprove: (data, actions) => {\r\n-            return actions.order.capture().then(details => {\r\n-                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-                this.clearCart();\r\n-                window.location.href = \"thankyou.html\"; // redirect after payment\r\n-            });\r\n-        }\r\n-    }).render('#paypal-button-container');\r\n+    proceedToCheckout() {\r\n+        if (this.items.length === 0) return;\r\n+        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n+    }\r\n }\r\n \r\n-\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1756835344777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,12 +316,34 @@\n     }\r\n \r\n \r\n     // Checkout\r\n-    proceedToCheckout() {\r\n-        if (this.items.length === 0) return;\r\n-        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n-    }\r\n+    // Checkout\r\n+proceedToCheckout() {\r\n+    if (this.items.length === 0) return;\r\n+\r\n+    // Render PayPal button dynamically\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n+\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: {\r\n+                        value: this.calculateTotal().toFixed(2) // use cart total\r\n+                    }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: (data, actions) => {\r\n+            return actions.order.capture().then(details => {\r\n+                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+                this.clearCart();\r\n+                window.location.href = \"thankyou.html\"; // redirect after payment\r\n+            });\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n }\r\n \r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n"
                },
                {
                    "date": 1756835362739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,34 +316,12 @@\n     }\r\n \r\n \r\n     // Checkout\r\n-    // Checkout\r\n-proceedToCheckout() {\r\n-    if (this.items.length === 0) return;\r\n-\r\n-    // Render PayPal button dynamically\r\n-    const paypalContainer = document.getElementById('paypal-button-container');\r\n-    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n-\r\n-    paypal.Buttons({\r\n-        createOrder: (data, actions) => {\r\n-            return actions.order.create({\r\n-                purchase_units: [{\r\n-                    amount: {\r\n-                        value: this.calculateTotal().toFixed(2) // use cart total\r\n-                    }\r\n-                }]\r\n-            });\r\n-        },\r\n-        onApprove: (data, actions) => {\r\n-            return actions.order.capture().then(details => {\r\n-                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-                this.clearCart();\r\n-                window.location.href = \"thankyou.html\"; // redirect after payment\r\n-            });\r\n-        }\r\n-    }).render('#paypal-button-container');\r\n+    proceedToCheckout() {\r\n+        if (this.items.length === 0) return;\r\n+        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n+    }\r\n }\r\n \r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n"
                },
                {
                    "date": 1756835395574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,10 +318,31 @@\n \r\n     // Checkout\r\n     proceedToCheckout() {\r\n         if (this.items.length === 0) return;\r\n-        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n-    }\r\n+\r\n+    // Render PayPal button dynamically\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n+\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: {\r\n+                        value: this.calculateTotal().toFixed(2) // use cart total\r\n+                    }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: (data, actions) => {\r\n+            return actions.order.capture().then(details => {\r\n+                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+                this.clearCart();\r\n+                window.location.href = \"thankyou.html\"; // redirect after payment\r\n+            });\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n }\r\n \r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n"
                },
                {
                    "date": 1756835401660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -319,31 +319,31 @@\n     // Checkout\r\n     proceedToCheckout() {\r\n         if (this.items.length === 0) return;\r\n \r\n-    // Render PayPal button dynamically\r\n-    const paypalContainer = document.getElementById('paypal-button-container');\r\n-    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n+        // Render PayPal button dynamically\r\n+        const paypalContainer = document.getElementById('paypal-button-container');\r\n+        if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n \r\n-    paypal.Buttons({\r\n-        createOrder: (data, actions) => {\r\n-            return actions.order.create({\r\n-                purchase_units: [{\r\n-                    amount: {\r\n-                        value: this.calculateTotal().toFixed(2) // use cart total\r\n-                    }\r\n-                }]\r\n-            });\r\n-        },\r\n-        onApprove: (data, actions) => {\r\n-            return actions.order.capture().then(details => {\r\n-                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-                this.clearCart();\r\n-                window.location.href = \"thankyou.html\"; // redirect after payment\r\n-            });\r\n-        }\r\n-    }).render('#paypal-button-container');\r\n-}\r\n+        paypal.Buttons({\r\n+            createOrder: (data, actions) => {\r\n+                return actions.order.create({\r\n+                    purchase_units: [{\r\n+                        amount: {\r\n+                            value: this.calculateTotal().toFixed(2) // use cart total\r\n+                        }\r\n+                    }]\r\n+                });\r\n+            },\r\n+            onApprove: (data, actions) => {\r\n+                return actions.order.capture().then(details => {\r\n+                    alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+                    this.clearCart();\r\n+                    window.location.href = \"thankyou.html\"; // redirect after payment\r\n+                });\r\n+            }\r\n+        }).render('#paypal-button-container');\r\n+    }\r\n \r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n"
                },
                {
                    "date": 1756835407459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,32 +318,11 @@\n \r\n     // Checkout\r\n     proceedToCheckout() {\r\n         if (this.items.length === 0) return;\r\n-\r\n-        // Render PayPal button dynamically\r\n-        const paypalContainer = document.getElementById('paypal-button-container');\r\n-        if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n-\r\n-        paypal.Buttons({\r\n-            createOrder: (data, actions) => {\r\n-                return actions.order.create({\r\n-                    purchase_units: [{\r\n-                        amount: {\r\n-                            value: this.calculateTotal().toFixed(2) // use cart total\r\n-                        }\r\n-                    }]\r\n-                });\r\n-            },\r\n-            onApprove: (data, actions) => {\r\n-                return actions.order.capture().then(details => {\r\n-                    alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-                    this.clearCart();\r\n-                    window.location.href = \"thankyou.html\"; // redirect after payment\r\n-                });\r\n-            }\r\n-        }).render('#paypal-button-container');\r\n+        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n     }\r\n+}\r\n \r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n"
                },
                {
                    "date": 1756835423219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,14 +316,37 @@\n     }\r\n \r\n \r\n     // Checkout\r\n-    proceedToCheckout() {\r\n-        if (this.items.length === 0) return;\r\n-        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n-    }\r\n+   // Checkout\r\n+proceedToCheckout() {\r\n+    if (this.items.length === 0) return;\r\n+\r\n+    // Render PayPal button dynamically\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n+\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: {\r\n+                        value: this.calculateTotal().toFixed(2) // use cart total\r\n+                    }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: (data, actions) => {\r\n+            return actions.order.capture().then(details => {\r\n+                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+                this.clearCart();\r\n+                window.location.href = \"thankyou.html\"; // redirect after payment\r\n+            });\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n }\r\n \r\n+\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1756835446075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,37 +316,14 @@\n     }\r\n \r\n \r\n     // Checkout\r\n-   // Checkout\r\n-proceedToCheckout() {\r\n-    if (this.items.length === 0) return;\r\n-\r\n-    // Render PayPal button dynamically\r\n-    const paypalContainer = document.getElementById('paypal-button-container');\r\n-    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n-\r\n-    paypal.Buttons({\r\n-        createOrder: (data, actions) => {\r\n-            return actions.order.create({\r\n-                purchase_units: [{\r\n-                    amount: {\r\n-                        value: this.calculateTotal().toFixed(2) // use cart total\r\n-                    }\r\n-                }]\r\n-            });\r\n-        },\r\n-        onApprove: (data, actions) => {\r\n-            return actions.order.capture().then(details => {\r\n-                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-                this.clearCart();\r\n-                window.location.href = \"thankyou.html\"; // redirect after payment\r\n-            });\r\n-        }\r\n-    }).render('#paypal-button-container');\r\n+    proceedToCheckout() {\r\n+        if (this.items.length === 0) return;\r\n+        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n+    }\r\n }\r\n \r\n-\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1756835453258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,8 +322,37 @@\n         alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n     }\r\n }\r\n \r\n+// Checkout\r\n+proceedToCheckout() {\r\n+    if (this.items.length === 0) return;\r\n+\r\n+    // Render PayPal button dynamically\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n+\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: {\r\n+                        value: this.calculateTotal().toFixed(2) // use cart total\r\n+                    }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: (data, actions) => {\r\n+            return actions.order.capture().then(details => {\r\n+                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+                this.clearCart();\r\n+                window.location.href = \"thankyou.html\"; // redirect after payment\r\n+            });\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n+}\r\n+\r\n+\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1756835459839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,13 +316,13 @@\n     }\r\n \r\n \r\n     // Checkout\r\n-    proceedToCheckout() {\r\n-        if (this.items.length === 0) return;\r\n-        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n-    }\r\n-}\r\n+//     proceedToCheckout() {\r\n+//         if (this.items.length === 0) return;\r\n+//         alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n+//     }\r\n+// }\r\n \r\n // Checkout\r\n proceedToCheckout() {\r\n     if (this.items.length === 0) return;\r\n"
                },
                {
                    "date": 1756835467271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,43 +316,16 @@\n     }\r\n \r\n \r\n     // Checkout\r\n-//     proceedToCheckout() {\r\n-//         if (this.items.length === 0) return;\r\n-//         alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n-//     }\r\n-// }\r\n+    proceedToCheckout() {\r\n+        if (this.items.length === 0) return;\r\n+        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n+    }\r\n+}\r\n \r\n-// Checkout\r\n-proceedToCheckout() {\r\n-    if (this.items.length === 0) return;\r\n \r\n-    // Render PayPal button dynamically\r\n-    const paypalContainer = document.getElementById('paypal-button-container');\r\n-    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n \r\n-    paypal.Buttons({\r\n-        createOrder: (data, actions) => {\r\n-            return actions.order.create({\r\n-                purchase_units: [{\r\n-                    amount: {\r\n-                        value: this.calculateTotal().toFixed(2) // use cart total\r\n-                    }\r\n-                }]\r\n-            });\r\n-        },\r\n-        onApprove: (data, actions) => {\r\n-            return actions.order.capture().then(details => {\r\n-                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-                this.clearCart();\r\n-                window.location.href = \"thankyou.html\"; // redirect after payment\r\n-            });\r\n-        }\r\n-    }).render('#paypal-button-container');\r\n-}\r\n-\r\n-\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1756835499502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n // Cart functionality for Herbert Schildt Book Store\r\n // Clear old cart\r\n+<script src=\"https://www.paypal.com/sdk/js?client-id=YOUR_CLIENT_ID&currency=USD\"></script>\r\n+\r\n console.log(\"cart.js loaded\");\r\n \r\n class ShoppingCart {\r\n     constructor() {\r\n"
                },
                {
                    "date": 1756835525541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,16 +318,39 @@\n     }\r\n \r\n \r\n     // Checkout\r\n-    proceedToCheckout() {\r\n-        if (this.items.length === 0) return;\r\n-        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n-    }\r\n+// Checkout\r\n+proceedToCheckout() {\r\n+    if (this.items.length === 0) return;\r\n+\r\n+    // Render PayPal button dynamically\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n+\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: {\r\n+                        value: this.calculateTotal().toFixed(2) // use cart total\r\n+                    }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: (data, actions) => {\r\n+            return actions.order.capture().then(details => {\r\n+                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+                this.clearCart();\r\n+                window.location.href = \"thankyou.html\"; // redirect after payment\r\n+            });\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n }\r\n \r\n \r\n \r\n+\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1756835555195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n // Cart functionality for Herbert Schildt Book Store\r\n // Clear old cart\r\n-<script src=\"https://www.paypal.com/sdk/js?client-id=YOUR_CLIENT_ID&currency=USD\"></script>\r\n \r\n console.log(\"cart.js loaded\");\r\n \r\n class ShoppingCart {\r\n"
                },
                {
                    "date": 1756835582712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,8 +318,9 @@\n \r\n \r\n     // Checkout\r\n // Checkout\r\n+// Checkout\r\n proceedToCheckout() {\r\n     if (this.items.length === 0) return;\r\n \r\n     // Render PayPal button dynamically\r\n@@ -348,8 +349,9 @@\n \r\n \r\n \r\n \r\n+\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1756835588363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n // Cart functionality for Herbert Schildt Book Store\r\n // Clear old cart\r\n+<script src=\"https://www.paypal.com/sdk/js?client-id=YOUR_CLIENT_ID&currency=USD\"></script>\r\n \r\n console.log(\"cart.js loaded\");\r\n \r\n class ShoppingCart {\r\n@@ -317,41 +318,16 @@\n     }\r\n \r\n \r\n     // Checkout\r\n-// Checkout\r\n-// Checkout\r\n-proceedToCheckout() {\r\n-    if (this.items.length === 0) return;\r\n-\r\n-    // Render PayPal button dynamically\r\n-    const paypalContainer = document.getElementById('paypal-button-container');\r\n-    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n-\r\n-    paypal.Buttons({\r\n-        createOrder: (data, actions) => {\r\n-            return actions.order.create({\r\n-                purchase_units: [{\r\n-                    amount: {\r\n-                        value: this.calculateTotal().toFixed(2) // use cart total\r\n-                    }\r\n-                }]\r\n-            });\r\n-        },\r\n-        onApprove: (data, actions) => {\r\n-            return actions.order.capture().then(details => {\r\n-                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-                this.clearCart();\r\n-                window.location.href = \"thankyou.html\"; // redirect after payment\r\n-            });\r\n-        }\r\n-    }).render('#paypal-button-container');\r\n+    proceedToCheckout() {\r\n+        if (this.items.length === 0) return;\r\n+        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n+    }\r\n }\r\n \r\n \r\n \r\n-\r\n-\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1756835595673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // Cart functionality for Herbert Schildt Book Store\r\n // Clear old cart\r\n-<script src=\"https://www.paypal.com/sdk/js?client-id=YOUR_CLIENT_ID&currency=USD\"></script>\r\n \r\n+\r\n console.log(\"cart.js loaded\");\r\n \r\n class ShoppingCart {\r\n     constructor() {\r\n"
                },
                {
                    "date": 1756835602852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,17 +317,40 @@\n         this.showNotification('Cart cleared');\r\n     }\r\n \r\n \r\n-    // Checkout\r\n-    proceedToCheckout() {\r\n-        if (this.items.length === 0) return;\r\n-        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n-    }\r\n+// Checkout\r\n+proceedToCheckout() {\r\n+    if (this.items.length === 0) return;\r\n+\r\n+    // Render PayPal button dynamically\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n+\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: {\r\n+                        value: this.calculateTotal().toFixed(2) // use cart total\r\n+                    }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: (data, actions) => {\r\n+            return actions.order.capture().then(details => {\r\n+                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+                this.clearCart();\r\n+                window.location.href = \"thankyou.html\"; // redirect after payment\r\n+            });\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n }\r\n \r\n+}\r\n \r\n \r\n+\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1756836550785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,9 +317,9 @@\n         this.showNotification('Cart cleared');\r\n     }\r\n \r\n \r\n-// Checkout\r\n+    // Checkout\r\n proceedToCheckout() {\r\n     if (this.items.length === 0) return;\r\n \r\n     // Render PayPal button dynamically\r\n@@ -339,15 +339,33 @@\n         onApprove: (data, actions) => {\r\n             return actions.order.capture().then(details => {\r\n                 alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n                 this.clearCart();\r\n-                window.location.href = \"thankyou.html\"; // redirect after payment\r\n+\r\n+                // Hide the PayPal container\r\n+                if (paypalContainer) {\r\n+                    paypalContainer.style.display = \"none\";\r\n+                }\r\n+\r\n+                // Redirect to thank you page\r\n+                window.location.href = \"thankyou.html\";\r\n             });\r\n+        },\r\n+        onCancel: () => {\r\n+            // Optional: hide if cancelled\r\n+            if (paypalContainer) {\r\n+                paypalContainer.style.display = \"none\";\r\n+            }\r\n+        },\r\n+        onError: (err) => {\r\n+            console.error(\"PayPal Error:\", err);\r\n+            if (paypalContainer) {\r\n+                paypalContainer.style.display = \"none\";\r\n+            }\r\n         }\r\n     }).render('#paypal-button-container');\r\n }\r\n \r\n-}\r\n \r\n \r\n \r\n // Initialize cart\r\n"
                },
                {
                    "date": 1756836587506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,57 +318,39 @@\n     }\r\n \r\n \r\n     // Checkout\r\n-proceedToCheckout() {\r\n-    if (this.items.length === 0) return;\r\n+    proceedToCheckout() {\r\n+        if (this.items.length === 0) return;\r\n \r\n-    // Render PayPal button dynamically\r\n-    const paypalContainer = document.getElementById('paypal-button-container');\r\n-    if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n+        // Render PayPal button dynamically\r\n+        const paypalContainer = document.getElementById('paypal-button-container');\r\n+        if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n \r\n-    paypal.Buttons({\r\n-        createOrder: (data, actions) => {\r\n-            return actions.order.create({\r\n-                purchase_units: [{\r\n-                    amount: {\r\n-                        value: this.calculateTotal().toFixed(2) // use cart total\r\n-                    }\r\n-                }]\r\n-            });\r\n-        },\r\n-        onApprove: (data, actions) => {\r\n-            return actions.order.capture().then(details => {\r\n-                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-                this.clearCart();\r\n+        paypal.Buttons({\r\n+            createOrder: (data, actions) => {\r\n+                return actions.order.create({\r\n+                    purchase_units: [{\r\n+                        amount: {\r\n+                            value: this.calculateTotal().toFixed(2) // use cart total\r\n+                        }\r\n+                    }]\r\n+                });\r\n+            },\r\n+            onApprove: (data, actions) => {\r\n+                return actions.order.capture().then(details => {\r\n+                    alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+                    this.clearCart();\r\n+                    window.location.href = \"thankyou.html\"; // redirect after payment\r\n+                });\r\n+            }\r\n+        }).render('#paypal-button-container');\r\n+    }\r\n \r\n-                // Hide the PayPal container\r\n-                if (paypalContainer) {\r\n-                    paypalContainer.style.display = \"none\";\r\n-                }\r\n-\r\n-                // Redirect to thank you page\r\n-                window.location.href = \"thankyou.html\";\r\n-            });\r\n-        },\r\n-        onCancel: () => {\r\n-            // Optional: hide if cancelled\r\n-            if (paypalContainer) {\r\n-                paypalContainer.style.display = \"none\";\r\n-            }\r\n-        },\r\n-        onError: (err) => {\r\n-            console.error(\"PayPal Error:\", err);\r\n-            if (paypalContainer) {\r\n-                paypalContainer.style.display = \"none\";\r\n-            }\r\n-        }\r\n-    }).render('#paypal-button-container');\r\n }\r\n \r\n \r\n \r\n-\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1756836916993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,39 +318,56 @@\n     }\r\n \r\n \r\n     // Checkout\r\n-    proceedToCheckout() {\r\n-        if (this.items.length === 0) return;\r\n+proceedToCheckout() {\r\n+    if (this.items.length === 0) return;\r\n \r\n-        // Render PayPal button dynamically\r\n-        const paypalContainer = document.getElementById('paypal-button-container');\r\n-        if (paypalContainer) paypalContainer.innerHTML = \"\"; // clear old button\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (!paypalContainer) return;\r\n \r\n-        paypal.Buttons({\r\n-            createOrder: (data, actions) => {\r\n-                return actions.order.create({\r\n-                    purchase_units: [{\r\n-                        amount: {\r\n-                            value: this.calculateTotal().toFixed(2) // use cart total\r\n-                        }\r\n-                    }]\r\n-                });\r\n-            },\r\n-            onApprove: (data, actions) => {\r\n-                return actions.order.capture().then(details => {\r\n-                    alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-                    this.clearCart();\r\n-                    window.location.href = \"thankyou.html\"; // redirect after payment\r\n-                });\r\n-            }\r\n-        }).render('#paypal-button-container');\r\n-    }\r\n+    // Show PayPal container\r\n+    paypalContainer.style.display = \"flex\";\r\n \r\n+    // Clear old button\r\n+    paypalContainer.innerHTML = \"\";\r\n+\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: {\r\n+                        value: this.calculateTotal().toFixed(2) // use cart total\r\n+                    }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: (data, actions) => {\r\n+            return actions.order.capture().then(details => {\r\n+                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+                this.clearCart();\r\n+\r\n+                // Hide the PayPal container\r\n+                paypalContainer.style.display = \"none\";\r\n+\r\n+                // Redirect to thank you page\r\n+                window.location.href = \"thankyou.html\";\r\n+            });\r\n+        },\r\n+        onCancel: () => {\r\n+            paypalContainer.style.display = \"none\"; // hide if cancelled\r\n+        },\r\n+        onError: (err) => {\r\n+            console.error(\"PayPal Error:\", err);\r\n+            paypalContainer.style.display = \"none\"; // hide on error\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n }\r\n \r\n+}\r\n \r\n \r\n+\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1756836993848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,9 +349,9 @@\n                 // Hide the PayPal container\r\n                 paypalContainer.style.display = \"none\";\r\n \r\n                 // Redirect to thank you page\r\n-                window.location.href = \"thankyou.html\";\r\n+                window.location.href = \"thank you.html\";\r\n             });\r\n         },\r\n         onCancel: () => {\r\n             paypalContainer.style.display = \"none\"; // hide if cancelled\r\n"
                },
                {
                    "date": 1757239980280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,19 +56,26 @@\n         }\r\n     }\r\n \r\n     // Save cart to localStorage\r\n-    saveCartToStorage() {\r\n-        if (!this.currentUserEmail) return;\r\n+    async saveCartToStorage() {\r\n+    if (!this.currentUserEmail) return;\r\n \r\n-        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n-        const userIndex = users.findIndex(u => u.email === this.currentUserEmail);\r\n-        if (userIndex === -1) return;\r\n-\r\n-        users[userIndex].cart = this.items;\r\n-        localStorage.setItem('users', JSON.stringify(users));\r\n+    try {\r\n+        await fetch(\"http://127.0.0.1:5000/update_cart\", {\r\n+            method: \"POST\",\r\n+            headers: { \"Content-Type\": \"application/json\" },\r\n+            body: JSON.stringify({\r\n+                email: this.currentUserEmail,\r\n+                cart: this.items\r\n+            })\r\n+        });\r\n+    } catch (err) {\r\n+        console.error(\"Error saving cart:\", err);\r\n     }\r\n+}\r\n \r\n+\r\n     // Add item to cart\r\n     addItem(title, quantity = 1) {\r\n         const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n         if (!book) return console.error('Book not found:', title);\r\n"
                },
                {
                    "date": 1757239996173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,15 +98,26 @@\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n \r\n-    loadUserCart() {\r\n-        if (!this.currentUserEmail) return;\r\n+async loadUserCart() {\r\n+    if (!this.currentUserEmail) return;\r\n \r\n-        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n-        const user = users.find(u => u.email === this.currentUserEmail);\r\n-        if (user) this.items = user.cart || [];\r\n+    try {\r\n+        const response = await fetch(`http://127.0.0.1:5000/get_cart?email=${encodeURIComponent(this.currentUserEmail)}`);\r\n+        const result = await response.json();\r\n+\r\n+        if (response.ok) {\r\n+            this.items = result.cart || [];\r\n+        } else {\r\n+            console.error(\"Failed to load cart:\", result.error);\r\n+            this.items = [];\r\n+        }\r\n+    } catch (err) {\r\n+        console.error(\"Error fetching cart:\", err);\r\n+        this.items = [];\r\n     }\r\n+}\r\n \r\n \r\n     updateTotalIfEmpty() {\r\n         if (!this.items || this.items.length === 0) {\r\n"
                },
                {
                    "date": 1757240019015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,31 +75,31 @@\n }\r\n \r\n \r\n     // Add item to cart\r\n-    addItem(title, quantity = 1) {\r\n-        const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n-        if (!book) return console.error('Book not found:', title);\r\n+  async addItem(title, quantity = 1) {\r\n+    const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n+    if (!book) return console.error(\"Book not found:\", title);\r\n \r\n-        const existingItem = this.items.find(item => item.title.trim().toLowerCase() === book.title.trim().toLowerCase());\r\n+    const existingItem = this.items.find(item => item.title.trim().toLowerCase() === book.title.trim().toLowerCase());\r\n \r\n-        if (!existingItem) {\r\n-            this.items.push({\r\n-                title: book.title.trim(),\r\n-                author: book.author,\r\n-                price: book.price,\r\n-                image: book.image,\r\n-                quantity: quantity\r\n-            });\r\n-        }\r\n-\r\n-        this.saveCartToStorage(); // <-- save in user's cart now\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.showNotification(`${book.title} added to cart!`);\r\n+    if (!existingItem) {\r\n+        this.items.push({\r\n+            title: book.title.trim(),\r\n+            author: book.author,\r\n+            price: book.price,\r\n+            image: book.image,\r\n+            quantity: quantity\r\n+        });\r\n     }\r\n \r\n+    await this.saveCartToStorage();\r\n+    this.renderCart();\r\n+    this.updateCartCount();\r\n+    this.showNotification(`${book.title} added to cart!`);\r\n+}\r\n \r\n+\r\n async loadUserCart() {\r\n     if (!this.currentUserEmail) return;\r\n \r\n     try {\r\n"
                },
                {
                    "date": 1757240036517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,18 +135,19 @@\n \r\n \r\n \r\n     // Remove item from cart\r\n-    removeItem(title) {\r\n-        this.items = this.items.filter(item => item.title !== title);\r\n-        this.saveCartToStorage();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.updateTotalIfEmpty(); // <- call here\r\n-        this.showNotification('Item removed from cart');\r\n-    }\r\n+async removeItem(title) {\r\n+    this.items = this.items.filter(item => item.title !== title);\r\n+    await this.saveCartToStorage();\r\n+    this.renderCart();\r\n+    this.updateCartCount();\r\n+    this.updateTotalIfEmpty();\r\n+    this.showNotification(\"Item removed from cart\");\r\n+}\r\n \r\n \r\n+\r\n     // Render cart items\r\n     // Render cart items without quantity\r\n     renderCart() {\r\n         const cartItemsContainer = document.getElementById('cart-items');\r\n"
                },
                {
                    "date": 1757240054264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,17 +325,17 @@\n         });\r\n     }\r\n \r\n     // Clear cart\r\n-    clearCart() {\r\n-        if (!confirm('Are you sure you want to clear the cart?')) return;\r\n-        this.items = [];\r\n-        this.saveCartToStorage();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.updateTotalIfEmpty(); // <- call here\r\n-        this.showNotification('Cart cleared');\r\n-    }\r\n+async clearCart() {\r\n+    if (!confirm(\"Are you sure you want to clear the cart?\")) return;\r\n+    this.items = [];\r\n+    await this.saveCartToStorage();\r\n+    this.renderCart();\r\n+    this.updateCartCount();\r\n+    this.updateTotalIfEmpty();\r\n+    this.showNotification(\"Cart cleared\");\r\n+}\r\n \r\n \r\n     // Checkout\r\n proceedToCheckout() {\r\n"
                },
                {
                    "date": 1757240389906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,69 +57,53 @@\n     }\r\n \r\n     // Save cart to localStorage\r\n     async saveCartToStorage() {\r\n-    if (!this.currentUserEmail) return;\r\n+        if (!this.currentUserEmail) return;\r\n \r\n-    try {\r\n-        await fetch(\"http://127.0.0.1:5000/update_cart\", {\r\n-            method: \"POST\",\r\n-            headers: { \"Content-Type\": \"application/json\" },\r\n-            body: JSON.stringify({\r\n-                email: this.currentUserEmail,\r\n-                cart: this.items\r\n-            })\r\n-        });\r\n-    } catch (err) {\r\n-        console.error(\"Error saving cart:\", err);\r\n+        try {\r\n+            await fetch(\"http://127.0.0.1:5000/update_cart\", {\r\n+                method: \"POST\",\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify({\r\n+                    email: this.currentUserEmail,\r\n+                    cart: this.items\r\n+                })\r\n+            });\r\n+        } catch (err) {\r\n+            console.error(\"Error saving cart:\", err);\r\n+        }\r\n     }\r\n-}\r\n \r\n \r\n     // Add item to cart\r\n-  async addItem(title, quantity = 1) {\r\n-    const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n-    if (!book) return console.error(\"Book not found:\", title);\r\n+    async addItem(title, quantity = 1) {\r\n+        const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n+        if (!book) return console.error(\"Book not found:\", title);\r\n \r\n-    const existingItem = this.items.find(item => item.title.trim().toLowerCase() === book.title.trim().toLowerCase());\r\n+        const existingItem = this.items.find(item => item.title.trim().toLowerCase() === book.title.trim().toLowerCase());\r\n \r\n-    if (!existingItem) {\r\n-        this.items.push({\r\n-            title: book.title.trim(),\r\n-            author: book.author,\r\n-            price: book.price,\r\n-            image: book.image,\r\n-            quantity: quantity\r\n-        });\r\n+        if (!existingItem) {\r\n+            this.items.push({\r\n+                title: book.title.trim(),\r\n+                author: book.author,\r\n+                price: book.price,\r\n+                image: book.image,\r\n+                quantity: quantity\r\n+            });\r\n+        }\r\n+\r\n+        await this.saveCartToStorage();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n-    await this.saveCartToStorage();\r\n-    this.renderCart();\r\n-    this.updateCartCount();\r\n-    this.showNotification(`${book.title} added to cart!`);\r\n-}\r\n \r\n+   this.loadUserCart(); // inside init()\r\n+this.renderCart();\r\n \r\n-async loadUserCart() {\r\n-    if (!this.currentUserEmail) return;\r\n \r\n-    try {\r\n-        const response = await fetch(`http://127.0.0.1:5000/get_cart?email=${encodeURIComponent(this.currentUserEmail)}`);\r\n-        const result = await response.json();\r\n-\r\n-        if (response.ok) {\r\n-            this.items = result.cart || [];\r\n-        } else {\r\n-            console.error(\"Failed to load cart:\", result.error);\r\n-            this.items = [];\r\n-        }\r\n-    } catch (err) {\r\n-        console.error(\"Error fetching cart:\", err);\r\n-        this.items = [];\r\n-    }\r\n-}\r\n-\r\n-\r\n     updateTotalIfEmpty() {\r\n         if (!this.items || this.items.length === 0) {\r\n             console.log('Cart empty detected'); // should now show every time cart is empty\r\n             const subtotalEl = document.getElementById('subtotal');\r\n@@ -135,16 +119,16 @@\n \r\n \r\n \r\n     // Remove item from cart\r\n-async removeItem(title) {\r\n-    this.items = this.items.filter(item => item.title !== title);\r\n-    await this.saveCartToStorage();\r\n-    this.renderCart();\r\n-    this.updateCartCount();\r\n-    this.updateTotalIfEmpty();\r\n-    this.showNotification(\"Item removed from cart\");\r\n-}\r\n+    async removeItem(title) {\r\n+        this.items = this.items.filter(item => item.title !== title);\r\n+        await this.saveCartToStorage();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.updateTotalIfEmpty();\r\n+        this.showNotification(\"Item removed from cart\");\r\n+    }\r\n \r\n \r\n \r\n     // Render cart items\r\n@@ -325,63 +309,63 @@\n         });\r\n     }\r\n \r\n     // Clear cart\r\n-async clearCart() {\r\n-    if (!confirm(\"Are you sure you want to clear the cart?\")) return;\r\n-    this.items = [];\r\n-    await this.saveCartToStorage();\r\n-    this.renderCart();\r\n-    this.updateCartCount();\r\n-    this.updateTotalIfEmpty();\r\n-    this.showNotification(\"Cart cleared\");\r\n-}\r\n+    async clearCart() {\r\n+        if (!confirm(\"Are you sure you want to clear the cart?\")) return;\r\n+        this.items = [];\r\n+        await this.saveCartToStorage();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.updateTotalIfEmpty();\r\n+        this.showNotification(\"Cart cleared\");\r\n+    }\r\n \r\n \r\n     // Checkout\r\n-proceedToCheckout() {\r\n-    if (this.items.length === 0) return;\r\n+    proceedToCheckout() {\r\n+        if (this.items.length === 0) return;\r\n \r\n-    const paypalContainer = document.getElementById('paypal-button-container');\r\n-    if (!paypalContainer) return;\r\n+        const paypalContainer = document.getElementById('paypal-button-container');\r\n+        if (!paypalContainer) return;\r\n \r\n-    // Show PayPal container\r\n-    paypalContainer.style.display = \"flex\";\r\n+        // Show PayPal container\r\n+        paypalContainer.style.display = \"flex\";\r\n \r\n-    // Clear old button\r\n-    paypalContainer.innerHTML = \"\";\r\n+        // Clear old button\r\n+        paypalContainer.innerHTML = \"\";\r\n \r\n-    paypal.Buttons({\r\n-        createOrder: (data, actions) => {\r\n-            return actions.order.create({\r\n-                purchase_units: [{\r\n-                    amount: {\r\n-                        value: this.calculateTotal().toFixed(2) // use cart total\r\n-                    }\r\n-                }]\r\n-            });\r\n-        },\r\n-        onApprove: (data, actions) => {\r\n-            return actions.order.capture().then(details => {\r\n-                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-                this.clearCart();\r\n+        paypal.Buttons({\r\n+            createOrder: (data, actions) => {\r\n+                return actions.order.create({\r\n+                    purchase_units: [{\r\n+                        amount: {\r\n+                            value: this.calculateTotal().toFixed(2) // use cart total\r\n+                        }\r\n+                    }]\r\n+                });\r\n+            },\r\n+            onApprove: (data, actions) => {\r\n+                return actions.order.capture().then(details => {\r\n+                    alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+                    this.clearCart();\r\n \r\n-                // Hide the PayPal container\r\n-                paypalContainer.style.display = \"none\";\r\n+                    // Hide the PayPal container\r\n+                    paypalContainer.style.display = \"none\";\r\n \r\n-                // Redirect to thank you page\r\n-                window.location.href = \"thank you.html\";\r\n-            });\r\n-        },\r\n-        onCancel: () => {\r\n-            paypalContainer.style.display = \"none\"; // hide if cancelled\r\n-        },\r\n-        onError: (err) => {\r\n-            console.error(\"PayPal Error:\", err);\r\n-            paypalContainer.style.display = \"none\"; // hide on error\r\n-        }\r\n-    }).render('#paypal-button-container');\r\n-}\r\n+                    // Redirect to thank you page\r\n+                    window.location.href = \"thank you.html\";\r\n+                });\r\n+            },\r\n+            onCancel: () => {\r\n+                paypalContainer.style.display = \"none\"; // hide if cancelled\r\n+            },\r\n+            onError: (err) => {\r\n+                console.error(\"PayPal Error:\", err);\r\n+                paypalContainer.style.display = \"none\"; // hide on error\r\n+            }\r\n+        }).render('#paypal-button-container');\r\n+    }\r\n \r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1757240437052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,23 +15,28 @@\n \r\n         this.init();\r\n     }\r\n \r\n-    async init() {\r\n-        console.log('ShoppingCart init running');\r\n-        await this.loadBooksData();\r\n-        console.log('Books data loaded:', this.booksData);\r\n+async init() {\r\n+    console.log('ShoppingCart init running');\r\n+    await this.loadBooksData();\r\n+    console.log('Books data loaded:', this.booksData);\r\n \r\n-        // Always reset totals first\r\n+    // Load user's cart from backend BEFORE rendering\r\n+    await this.loadUserCart();\r\n+    console.log('Loaded cart:', this.items);\r\n+\r\n+    if (this.items.length === 0) {\r\n         this.updateTotalIfEmpty();\r\n-        this.loadUserCart(); // <-- new\r\n-\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.bindEvents();\r\n     }\r\n \r\n+    this.renderCart();\r\n+    this.updateCartCount();\r\n+    this.bindEvents();\r\n+}\r\n \r\n+\r\n+\r\n     // Load all-books.json\r\n     async loadBooksData() {\r\n         try {\r\n             const response = await fetch('all-books.json');\r\n@@ -98,12 +103,28 @@\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n \r\n-   this.loadUserCart(); // inside init()\r\n-this.renderCart();\r\n+    async loadUserCart() {\r\n+        if (!this.currentUserEmail) return;\r\n \r\n+        try {\r\n+            const response = await fetch(`http://127.0.0.1:5000/get_cart?email=${encodeURIComponent(this.currentUserEmail)}`);\r\n+            const result = await response.json();\r\n \r\n+            if (response.ok) {\r\n+                this.items = result.cart || [];\r\n+            } else {\r\n+                console.error(\"Failed to load cart:\", result.error);\r\n+                this.items = [];\r\n+            }\r\n+        } catch (err) {\r\n+            console.error(\"Error fetching cart:\", err);\r\n+            this.items = [];\r\n+        }\r\n+    }\r\n+\r\n+\r\n     updateTotalIfEmpty() {\r\n         if (!this.items || this.items.length === 0) {\r\n             console.log('Cart empty detected'); // should now show every time cart is empty\r\n             const subtotalEl = document.getElementById('subtotal');\r\n"
                },
                {
                    "date": 1757240542158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,28 +15,28 @@\n \r\n         this.init();\r\n     }\r\n \r\n-async init() {\r\n-    console.log('ShoppingCart init running');\r\n-    await this.loadBooksData();\r\n-    console.log('Books data loaded:', this.booksData);\r\n+    async init() {\r\n+        console.log('ShoppingCart init running');\r\n+        await this.loadBooksData();\r\n+        console.log('Books data loaded:', this.booksData);\r\n \r\n-    // Load user's cart from backend BEFORE rendering\r\n-    await this.loadUserCart();\r\n-    console.log('Loaded cart:', this.items);\r\n+        // Load user's cart from backend BEFORE rendering\r\n+        await this.loadUserCart();\r\n+        console.log('Loaded cart:', this.items);\r\n \r\n-    if (this.items.length === 0) {\r\n-        this.updateTotalIfEmpty();\r\n+        if (this.items.length === 0) {\r\n+            this.updateTotalIfEmpty();\r\n+        }\r\n+\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.bindEvents();\r\n     }\r\n \r\n-    this.renderCart();\r\n-    this.updateCartCount();\r\n-    this.bindEvents();\r\n-}\r\n \r\n \r\n-\r\n     // Load all-books.json\r\n     async loadBooksData() {\r\n         try {\r\n             const response = await fetch('all-books.json');\r\n@@ -103,28 +103,30 @@\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n \r\n-    async loadUserCart() {\r\n-        if (!this.currentUserEmail) return;\r\n+  async loadUserCart() {\r\n+    if (!this.currentUserEmail) return;\r\n \r\n-        try {\r\n-            const response = await fetch(`http://127.0.0.1:5000/get_cart?email=${encodeURIComponent(this.currentUserEmail)}`);\r\n-            const result = await response.json();\r\n+    try {\r\n+        const response = await fetch(`http://127.0.0.1:5000/get_cart?email=${encodeURIComponent(this.currentUserEmail)}`);\r\n+        const result = await response.json();\r\n+        console.log(\"Cart fetch response:\", result); // 👈 add this\r\n \r\n-            if (response.ok) {\r\n-                this.items = result.cart || [];\r\n-            } else {\r\n-                console.error(\"Failed to load cart:\", result.error);\r\n-                this.items = [];\r\n-            }\r\n-        } catch (err) {\r\n-            console.error(\"Error fetching cart:\", err);\r\n+        if (response.ok) {\r\n+            this.items = result.cart || [];\r\n+        } else {\r\n+            console.error(\"Failed to load cart:\", result.error);\r\n             this.items = [];\r\n         }\r\n+    } catch (err) {\r\n+        console.error(\"Error fetching cart:\", err);\r\n+        this.items = [];\r\n     }\r\n+}\r\n \r\n \r\n+\r\n     updateTotalIfEmpty() {\r\n         if (!this.items || this.items.length === 0) {\r\n             console.log('Cart empty detected'); // should now show every time cart is empty\r\n             const subtotalEl = document.getElementById('subtotal');\r\n"
                },
                {
                    "date": 1757243211137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,23 +20,18 @@\n         console.log('ShoppingCart init running');\r\n         await this.loadBooksData();\r\n         console.log('Books data loaded:', this.booksData);\r\n \r\n-        // Load user's cart from backend BEFORE rendering\r\n-        await this.loadUserCart();\r\n-        console.log('Loaded cart:', this.items);\r\n+        // Always reset totals first\r\n+        this.updateTotalIfEmpty();\r\n+        this.loadUserCart(); // <-- new\r\n \r\n-        if (this.items.length === 0) {\r\n-            this.updateTotalIfEmpty();\r\n-        }\r\n-\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.bindEvents();\r\n     }\r\n \r\n \r\n-\r\n     // Load all-books.json\r\n     async loadBooksData() {\r\n         try {\r\n             const response = await fetch('all-books.json');\r\n@@ -61,30 +56,23 @@\n         }\r\n     }\r\n \r\n     // Save cart to localStorage\r\n-    async saveCartToStorage() {\r\n+    saveCartToStorage() {\r\n         if (!this.currentUserEmail) return;\r\n \r\n-        try {\r\n-            await fetch(\"http://127.0.0.1:5000/update_cart\", {\r\n-                method: \"POST\",\r\n-                headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify({\r\n-                    email: this.currentUserEmail,\r\n-                    cart: this.items\r\n-                })\r\n-            });\r\n-        } catch (err) {\r\n-            console.error(\"Error saving cart:\", err);\r\n-        }\r\n+        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n+        const userIndex = users.findIndex(u => u.email === this.currentUserEmail);\r\n+        if (userIndex === -1) return;\r\n+\r\n+        users[userIndex].cart = this.items;\r\n+        localStorage.setItem('users', JSON.stringify(users));\r\n     }\r\n \r\n-\r\n     // Add item to cart\r\n-    async addItem(title, quantity = 1) {\r\n+    addItem(title, quantity = 1) {\r\n         const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n-        if (!book) return console.error(\"Book not found:\", title);\r\n+        if (!book) return console.error('Book not found:', title);\r\n \r\n         const existingItem = this.items.find(item => item.title.trim().toLowerCase() === book.title.trim().toLowerCase());\r\n \r\n         if (!existingItem) {\r\n@@ -96,37 +84,24 @@\n                 quantity: quantity\r\n             });\r\n         }\r\n \r\n-        await this.saveCartToStorage();\r\n+        this.saveCartToStorage(); // <-- save in user's cart now\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n \r\n-  async loadUserCart() {\r\n-    if (!this.currentUserEmail) return;\r\n+    loadUserCart() {\r\n+        if (!this.currentUserEmail) return;\r\n \r\n-    try {\r\n-        const response = await fetch(`http://127.0.0.1:5000/get_cart?email=${encodeURIComponent(this.currentUserEmail)}`);\r\n-        const result = await response.json();\r\n-        console.log(\"Cart fetch response:\", result); // 👈 add this\r\n-\r\n-        if (response.ok) {\r\n-            this.items = result.cart || [];\r\n-        } else {\r\n-            console.error(\"Failed to load cart:\", result.error);\r\n-            this.items = [];\r\n-        }\r\n-    } catch (err) {\r\n-        console.error(\"Error fetching cart:\", err);\r\n-        this.items = [];\r\n+        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n+        const user = users.find(u => u.email === this.currentUserEmail);\r\n+        if (user) this.items = user.cart || [];\r\n     }\r\n-}\r\n \r\n \r\n-\r\n     updateTotalIfEmpty() {\r\n         if (!this.items || this.items.length === 0) {\r\n             console.log('Cart empty detected'); // should now show every time cart is empty\r\n             const subtotalEl = document.getElementById('subtotal');\r\n@@ -142,19 +117,18 @@\n \r\n \r\n \r\n     // Remove item from cart\r\n-    async removeItem(title) {\r\n+    removeItem(title) {\r\n         this.items = this.items.filter(item => item.title !== title);\r\n-        await this.saveCartToStorage();\r\n+        this.saveCartToStorage();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n-        this.updateTotalIfEmpty();\r\n-        this.showNotification(\"Item removed from cart\");\r\n+        this.updateTotalIfEmpty(); // <- call here\r\n+        this.showNotification('Item removed from cart');\r\n     }\r\n \r\n \r\n-\r\n     // Render cart items\r\n     // Render cart items without quantity\r\n     renderCart() {\r\n         const cartItemsContainer = document.getElementById('cart-items');\r\n@@ -332,63 +306,63 @@\n         });\r\n     }\r\n \r\n     // Clear cart\r\n-    async clearCart() {\r\n-        if (!confirm(\"Are you sure you want to clear the cart?\")) return;\r\n+    clearCart() {\r\n+        if (!confirm('Are you sure you want to clear the cart?')) return;\r\n         this.items = [];\r\n-        await this.saveCartToStorage();\r\n+        this.saveCartToStorage();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n-        this.updateTotalIfEmpty();\r\n-        this.showNotification(\"Cart cleared\");\r\n+        this.updateTotalIfEmpty(); // <- call here\r\n+        this.showNotification('Cart cleared');\r\n     }\r\n \r\n \r\n     // Checkout\r\n-    proceedToCheckout() {\r\n-        if (this.items.length === 0) return;\r\n+proceedToCheckout() {\r\n+    if (this.items.length === 0) return;\r\n \r\n-        const paypalContainer = document.getElementById('paypal-button-container');\r\n-        if (!paypalContainer) return;\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (!paypalContainer) return;\r\n \r\n-        // Show PayPal container\r\n-        paypalContainer.style.display = \"flex\";\r\n+    // Show PayPal container\r\n+    paypalContainer.style.display = \"flex\";\r\n \r\n-        // Clear old button\r\n-        paypalContainer.innerHTML = \"\";\r\n+    // Clear old button\r\n+    paypalContainer.innerHTML = \"\";\r\n \r\n-        paypal.Buttons({\r\n-            createOrder: (data, actions) => {\r\n-                return actions.order.create({\r\n-                    purchase_units: [{\r\n-                        amount: {\r\n-                            value: this.calculateTotal().toFixed(2) // use cart total\r\n-                        }\r\n-                    }]\r\n-                });\r\n-            },\r\n-            onApprove: (data, actions) => {\r\n-                return actions.order.capture().then(details => {\r\n-                    alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-                    this.clearCart();\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: {\r\n+                        value: this.calculateTotal().toFixed(2) // use cart total\r\n+                    }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: (data, actions) => {\r\n+            return actions.order.capture().then(details => {\r\n+                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+                this.clearCart();\r\n \r\n-                    // Hide the PayPal container\r\n-                    paypalContainer.style.display = \"none\";\r\n+                // Hide the PayPal container\r\n+                paypalContainer.style.display = \"none\";\r\n \r\n-                    // Redirect to thank you page\r\n-                    window.location.href = \"thank you.html\";\r\n-                });\r\n-            },\r\n-            onCancel: () => {\r\n-                paypalContainer.style.display = \"none\"; // hide if cancelled\r\n-            },\r\n-            onError: (err) => {\r\n-                console.error(\"PayPal Error:\", err);\r\n-                paypalContainer.style.display = \"none\"; // hide on error\r\n-            }\r\n-        }).render('#paypal-button-container');\r\n-    }\r\n+                // Redirect to thank you page\r\n+                window.location.href = \"thank you.html\";\r\n+            });\r\n+        },\r\n+        onCancel: () => {\r\n+            paypalContainer.style.display = \"none\"; // hide if cancelled\r\n+        },\r\n+        onError: (err) => {\r\n+            console.error(\"PayPal Error:\", err);\r\n+            paypalContainer.style.display = \"none\"; // hide on error\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n+}\r\n \r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1757250638899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,387 +1,200 @@\n-// Cart functionality for Herbert Schildt Book Store\r\n-// Clear old cart\r\n-\r\n-\r\n-console.log(\"cart.js loaded\");\r\n-\r\n class ShoppingCart {\r\n     constructor() {\r\n         const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n-        this.currentUserEmail = currentUser?.email || null; // get email\r\n-        this.items = []; // cart will be loaded from current user\r\n+        this.currentUserEmail = currentUser?.email || null; // email for backend\r\n+        this.items = []; // will fetch from backend\r\n         this.shippingCost = 5.99;\r\n         this.taxRate = 0.08;\r\n-        this.booksData = []; // will store all-books.json data\r\n+        this.booksData = [];\r\n \r\n         this.init();\r\n     }\r\n \r\n     async init() {\r\n-        console.log('ShoppingCart init running');\r\n         await this.loadBooksData();\r\n-        console.log('Books data loaded:', this.booksData);\r\n-\r\n-        // Always reset totals first\r\n-        this.updateTotalIfEmpty();\r\n-        this.loadUserCart(); // <-- new\r\n-\r\n+        await this.loadUserCart(); // fetch cart from backend\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.bindEvents();\r\n     }\r\n \r\n-\r\n-    // Load all-books.json\r\n     async loadBooksData() {\r\n         try {\r\n             const response = await fetch('all-books.json');\r\n             this.booksData = await response.json();\r\n         } catch (err) {\r\n             console.error('Error loading all-books.json:', err);\r\n         }\r\n-\r\n     }\r\n \r\n-    resetTotalsIfEmpty() {\r\n-        if (!this.items || this.items.length === 0) {\r\n-            const subtotalEl = document.getElementById('subtotal');\r\n-            const totalEl = document.getElementById('total');\r\n-            const checkoutBtn = document.getElementById('checkout-btn');\r\n-\r\n-            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n-            if (totalEl) totalEl.textContent = `$0.00`;\r\n-            if (checkoutBtn) checkoutBtn.disabled = true;\r\n-\r\n-            console.log('Cart is empty: totals reset to $0.00');\r\n+    // Fetch cart from backend\r\n+    async loadUserCart() {\r\n+        if (!this.currentUserEmail) return;\r\n+        try {\r\n+            const response = await fetch(\"http://127.0.0.1:5000/get-cart\", {\r\n+                method: \"POST\",\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify({ email: this.currentUserEmail })\r\n+            });\r\n+            const result = await response.json();\r\n+            if (result.success) {\r\n+                this.items = result.cart || []; // array of titles\r\n+            } else {\r\n+                this.items = [];\r\n+            }\r\n+        } catch (err) {\r\n+            console.error('Failed to fetch cart from backend:', err);\r\n+            this.items = [];\r\n         }\r\n     }\r\n \r\n-    // Save cart to localStorage\r\n-    saveCartToStorage() {\r\n-        if (!this.currentUserEmail) return;\r\n+    // Add book to backend cart\r\n+    async addItem(title) {\r\n+        if (!this.currentUserEmail) return alert(\"Please log in first.\");\r\n+        if (this.items.includes(title)) return alert(\"This book is already in your cart!\");\r\n \r\n-        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n-        const userIndex = users.findIndex(u => u.email === this.currentUserEmail);\r\n-        if (userIndex === -1) return;\r\n+        try {\r\n+            const response = await fetch(\"http://127.0.0.1:5000/add-to-cart\", {\r\n+                method: \"POST\",\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify({ email: this.currentUserEmail, title })\r\n+            });\r\n+            const result = await response.json();\r\n+            if (!result.success) return alert(result.message);\r\n \r\n-        users[userIndex].cart = this.items;\r\n-        localStorage.setItem('users', JSON.stringify(users));\r\n-    }\r\n-\r\n-    // Add item to cart\r\n-    addItem(title, quantity = 1) {\r\n-        const book = this.booksData.find(b => b.title.trim().toLowerCase() === title.trim().toLowerCase());\r\n-        if (!book) return console.error('Book not found:', title);\r\n-\r\n-        const existingItem = this.items.find(item => item.title.trim().toLowerCase() === book.title.trim().toLowerCase());\r\n-\r\n-        if (!existingItem) {\r\n-            this.items.push({\r\n-                title: book.title.trim(),\r\n-                author: book.author,\r\n-                price: book.price,\r\n-                image: book.image,\r\n-                quantity: quantity\r\n-            });\r\n+            this.items.push(title);\r\n+            this.renderCart();\r\n+            this.updateCartCount();\r\n+            this.showNotification(`${title} added to cart!`);\r\n+        } catch (err) {\r\n+            console.error(\"Failed to add book to backend:\", err);\r\n         }\r\n-\r\n-        this.saveCartToStorage(); // <-- save in user's cart now\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.showNotification(`${book.title} added to cart!`);\r\n     }\r\n \r\n-\r\n-    loadUserCart() {\r\n+    // Remove book from backend cart\r\n+    async removeItem(title) {\r\n         if (!this.currentUserEmail) return;\r\n \r\n-        const users = JSON.parse(localStorage.getItem('users')) || [];\r\n-        const user = users.find(u => u.email === this.currentUserEmail);\r\n-        if (user) this.items = user.cart || [];\r\n-    }\r\n+        try {\r\n+            const response = await fetch(\"http://127.0.0.1:5000/remove-from-cart\", {\r\n+                method: \"POST\",\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify({ email: this.currentUserEmail, title })\r\n+            });\r\n+            const result = await response.json();\r\n+            if (!result.success) return console.warn(result.message);\r\n \r\n-\r\n-    updateTotalIfEmpty() {\r\n-        if (!this.items || this.items.length === 0) {\r\n-            console.log('Cart empty detected'); // should now show every time cart is empty\r\n-            const subtotalEl = document.getElementById('subtotal');\r\n-            const totalEl = document.getElementById('total');\r\n-            if (subtotalEl) subtotalEl.textContent = '$0.00';\r\n-            if (totalEl) totalEl.textContent = '$0.00';\r\n-            const checkoutBtn = document.getElementById('checkout-btn');\r\n-            if (checkoutBtn) checkoutBtn.disabled = true;\r\n+            this.items = this.items.filter(item => item !== title);\r\n+            this.renderCart();\r\n+            this.updateCartCount();\r\n+            this.showNotification(`Removed \"${title}\" from cart`);\r\n+        } catch (err) {\r\n+            console.error(\"Failed to remove book from backend:\", err);\r\n         }\r\n     }\r\n \r\n-\r\n-\r\n-\r\n-\r\n-    // Remove item from cart\r\n-    removeItem(title) {\r\n-        this.items = this.items.filter(item => item.title !== title);\r\n-        this.saveCartToStorage();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.updateTotalIfEmpty(); // <- call here\r\n-        this.showNotification('Item removed from cart');\r\n-    }\r\n-\r\n-\r\n-    // Render cart items\r\n-    // Render cart items without quantity\r\n+    // Render cart by matching titles to all-books.json\r\n     renderCart() {\r\n         const cartItemsContainer = document.getElementById('cart-items');\r\n         if (!cartItemsContainer) return;\r\n \r\n-        if (this.items.length === 0) {\r\n+        cartItemsContainer.innerHTML = '';\r\n+\r\n+        if (!this.items.length) {\r\n             cartItemsContainer.innerHTML = `\r\n-        <div class=\"empty-cart\">\r\n-            <div class=\"empty-cart-content\">\r\n+            <div class=\"empty-cart\">\r\n                 <h3>Your cart is empty</h3>\r\n-                <p>Add some books to get started!</p>\r\n-                <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n-            </div>\r\n-        </div>`;\r\n+                <a href=\"../browse-book.html\">Browse Books</a>\r\n+            </div>`;\r\n+            this.updateSummary();\r\n             return;\r\n         }\r\n \r\n-        // Clear container first\r\n-        cartItemsContainer.innerHTML = '';\r\n+        let total = 0;\r\n \r\n-        this.items.forEach(item => {\r\n-            const book = this.booksData.find(b => b.title.trim() === item.title.trim());\r\n-            const image = book ? book.image : '';\r\n+        this.items.forEach(title => {\r\n+            const book = this.booksData.find(b => b.title === title);\r\n+            if (!book) return;\r\n \r\n+            total += book.price;\r\n+\r\n             const cartItem = document.createElement('div');\r\n             cartItem.className = 'cart-item';\r\n             cartItem.innerHTML = `\r\n-            <img src=\"${image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n-            <div class=\"cart-item-details\">\r\n-                <h3 class=\"cart-item-title\">${item.title}</h3>\r\n-                <p class=\"cart-item-author\">by ${item.author}</p>\r\n-                <p class=\"cart-item-price\">$${Number(item.price).toFixed(2)}</p>\r\n-            </div>\r\n-            <div class=\"cart-item-controls\"></div>\r\n-        `;\r\n-\r\n-            // Add remove button safely\r\n+                <img src=\"${book.image}\" alt=\"${book.title}\" class=\"cart-item-image\">\r\n+                <div class=\"cart-item-details\">\r\n+                    <h3 class=\"cart-item-title\">${book.title}</h3>\r\n+                    <p class=\"cart-item-author\">by ${book.author}</p>\r\n+                    <p class=\"cart-item-price\">$${book.price.toFixed(2)}</p>\r\n+                </div>\r\n+            `;\r\n+            const controls = document.createElement('div');\r\n+            controls.className = 'cart-item-controls';\r\n             const removeBtn = document.createElement('button');\r\n             removeBtn.className = 'remove-btn';\r\n             removeBtn.textContent = 'Remove';\r\n-            removeBtn.addEventListener('click', () => this.removeItem(item.title));\r\n-            cartItem.querySelector('.cart-item-controls').appendChild(removeBtn);\r\n+            removeBtn.addEventListener('click', () => this.removeItem(book.title));\r\n+            controls.appendChild(removeBtn);\r\n+            cartItem.appendChild(controls);\r\n \r\n             cartItemsContainer.appendChild(cartItem);\r\n         });\r\n \r\n         this.updateSummary();\r\n     }\r\n \r\n-\r\n-    // Calculate subtotal\r\n     calculateSubtotal() {\r\n-        if (!this.items || this.items.length === 0) return 0;\r\n-\r\n-        return this.items.reduce((sum, item) => {\r\n-            const price = parseFloat(item.price);\r\n-            if (isNaN(price)) {\r\n-                console.warn(`Price is not a number for item: \"${item.title}\"`, item.price);\r\n-                return sum;\r\n-            }\r\n-            return sum + price;\r\n+        return this.items.reduce((sum, title) => {\r\n+            const book = this.booksData.find(b => b.title === title);\r\n+            return book ? sum + book.price : sum;\r\n         }, 0);\r\n     }\r\n \r\n-    // Calculate tax\r\n     calculateTax() {\r\n-        if (!this.items || this.items.length === 0) return 0;\r\n         return this.calculateSubtotal() * this.taxRate;\r\n     }\r\n \r\n-    // Calculate total\r\n     calculateTotal() {\r\n-        if (!this.items || this.items.length === 0) return 0;\r\n         return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n     }\r\n \r\n-\r\n-    // Update cart count in header\r\n-    // Update cart count in header\r\n-    updateCartCount() {\r\n-        if (!this.items || this.items.length === 0) {\r\n-            const cartCountElement = document.getElementById('cart-count');\r\n-            if (cartCountElement) cartCountElement.textContent = 0;\r\n-            return;\r\n-        }\r\n-\r\n-        // Since we removed quantity, count is simply the number of items in cart\r\n-        const count = this.items.length;\r\n-\r\n-        // Log for debugging\r\n-        console.log('Cart count:', count, this.items);\r\n-\r\n-        const cartCountElement = document.getElementById('cart-count');\r\n-        if (cartCountElement) {\r\n-            cartCountElement.textContent = count;\r\n-        }\r\n-    }\r\n-\r\n-    // Ensure totals are zero if cart is empty\r\n-    ensureEmptyCartTotals() {\r\n-        if (!this.items || this.items.length === 0) {\r\n-            const subtotalEl = document.getElementById('subtotal');\r\n-            const totalEl = document.getElementById('total');\r\n-            const checkoutBtn = document.getElementById('checkout-btn');\r\n-\r\n-            if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n-            if (totalEl) totalEl.textContent = `$0.00`;\r\n-            if (checkoutBtn) checkoutBtn.disabled = true;\r\n-\r\n-            return true; // indicate cart is empty\r\n-        }\r\n-        return false; // cart is not empty\r\n-    }\r\n-\r\n-\r\n-\r\n-    // Update summary\r\n     updateSummary() {\r\n-        if (this.ensureEmptyCartTotals()) return; // cart is empty, totals set to 0\r\n-\r\n-        const subtotal = this.calculateSubtotal();\r\n-        const tax = this.calculateTax();\r\n-        const total = subtotal + tax + this.shippingCost;\r\n-\r\n         const subtotalEl = document.getElementById('subtotal');\r\n         const totalEl = document.getElementById('total');\r\n         const checkoutBtn = document.getElementById('checkout-btn');\r\n \r\n+        const subtotal = this.calculateSubtotal();\r\n+        const total = this.calculateTotal();\r\n+\r\n         if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n         if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n         if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n     }\r\n \r\n-    // Show notification\r\n+    updateCartCount() {\r\n+        const cartCountEl = document.getElementById('cart-count');\r\n+        if (cartCountEl) cartCountEl.textContent = this.items.length;\r\n+    }\r\n+\r\n     showNotification(message) {\r\n         const notification = document.createElement('div');\r\n         notification.className = 'notification';\r\n         notification.textContent = message;\r\n-        notification.style.cssText = `\r\n-            position: fixed;\r\n-            top: 20px;\r\n-            right: 20px;\r\n-            background-color: var(--button-primary);\r\n-            color: white;\r\n-            padding: 1rem 2rem;\r\n-            border-radius: 5px;\r\n-            font-family: 'Inter Medium';\r\n-            z-index: 1000;\r\n-            animation: slideInRight 0.3s ease;\r\n-        `;\r\n         document.body.appendChild(notification);\r\n-\r\n-        setTimeout(() => {\r\n-            notification.style.animation = 'slideOutRight 0.3s ease';\r\n-            setTimeout(() => {\r\n-                if (notification.parentNode) notification.parentNode.removeChild(notification);\r\n-            }, 300);\r\n-        }, 3000);\r\n+        setTimeout(() => notification.remove(), 3000);\r\n     }\r\n \r\n-    // Bind events\r\n     bindEvents() {\r\n-        const clearBtn = document.getElementById('clear-cart');\r\n-        if (clearBtn) clearBtn.addEventListener('click', () => this.clearCart());\r\n-\r\n-        const checkoutBtn = document.getElementById('checkout-btn');\r\n-        if (checkoutBtn) checkoutBtn.addEventListener('click', () => this.proceedToCheckout());\r\n-\r\n-        // Add to cart buttons in recommended section\r\n         document.addEventListener('click', e => {\r\n             if (e.target.classList.contains('add-to-cart-btn')) {\r\n                 const title = e.target.getAttribute('data-title');\r\n-                this.addItem(title, 1);\r\n+                this.addItem(title);\r\n             }\r\n         });\r\n     }\r\n-\r\n-    // Clear cart\r\n-    clearCart() {\r\n-        if (!confirm('Are you sure you want to clear the cart?')) return;\r\n-        this.items = [];\r\n-        this.saveCartToStorage();\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.updateTotalIfEmpty(); // <- call here\r\n-        this.showNotification('Cart cleared');\r\n-    }\r\n-\r\n-\r\n-    // Checkout\r\n-proceedToCheckout() {\r\n-    if (this.items.length === 0) return;\r\n-\r\n-    const paypalContainer = document.getElementById('paypal-button-container');\r\n-    if (!paypalContainer) return;\r\n-\r\n-    // Show PayPal container\r\n-    paypalContainer.style.display = \"flex\";\r\n-\r\n-    // Clear old button\r\n-    paypalContainer.innerHTML = \"\";\r\n-\r\n-    paypal.Buttons({\r\n-        createOrder: (data, actions) => {\r\n-            return actions.order.create({\r\n-                purchase_units: [{\r\n-                    amount: {\r\n-                        value: this.calculateTotal().toFixed(2) // use cart total\r\n-                    }\r\n-                }]\r\n-            });\r\n-        },\r\n-        onApprove: (data, actions) => {\r\n-            return actions.order.capture().then(details => {\r\n-                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-                this.clearCart();\r\n-\r\n-                // Hide the PayPal container\r\n-                paypalContainer.style.display = \"none\";\r\n-\r\n-                // Redirect to thank you page\r\n-                window.location.href = \"thank you.html\";\r\n-            });\r\n-        },\r\n-        onCancel: () => {\r\n-            paypalContainer.style.display = \"none\"; // hide if cancelled\r\n-        },\r\n-        onError: (err) => {\r\n-            console.error(\"PayPal Error:\", err);\r\n-            paypalContainer.style.display = \"none\"; // hide on error\r\n-        }\r\n-    }).render('#paypal-button-container');\r\n }\r\n \r\n-}\r\n-\r\n-\r\n-\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n-\r\n-// CSS animations for notifications\r\n-const style = document.createElement('style');\r\n-style.textContent = `\r\n-    @keyframes slideInRight {\r\n-        from { transform: translateX(100%); opacity: 0; }\r\n-        to { transform: translateX(0); opacity: 1; }\r\n-    }\r\n-    @keyframes slideOutRight {\r\n-        from { transform: translateX(0); opacity: 1; }\r\n-        to { transform: translateX(100%); opacity: 0; }\r\n-    }\r\n-`;\r\n-document.head.appendChild(style);\r\n"
                },
                {
                    "date": 1757250751004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,57 +93,70 @@\n         }\r\n     }\r\n \r\n     // Render cart by matching titles to all-books.json\r\n-    renderCart() {\r\n-        const cartItemsContainer = document.getElementById('cart-items');\r\n-        if (!cartItemsContainer) return;\r\n+renderCart() {\r\n+    const cartItemsContainer = document.getElementById('cart-items');\r\n+    if (!cartItemsContainer) return;\r\n \r\n-        cartItemsContainer.innerHTML = '';\r\n+    // Clear previous items\r\n+    cartItemsContainer.innerHTML = '';\r\n \r\n-        if (!this.items.length) {\r\n-            cartItemsContainer.innerHTML = `\r\n+    // Show empty cart if no items\r\n+    if (!this.items || this.items.length === 0) {\r\n+        cartItemsContainer.innerHTML = `\r\n             <div class=\"empty-cart\">\r\n-                <h3>Your cart is empty</h3>\r\n-                <a href=\"../browse-book.html\">Browse Books</a>\r\n+                <div class=\"empty-cart-content\">\r\n+                    <h3>Your cart is empty</h3>\r\n+                    <p>Add some books to get started!</p>\r\n+                    <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n+                </div>\r\n             </div>`;\r\n-            this.updateSummary();\r\n-            return;\r\n-        }\r\n+        this.updateSummary();\r\n+        return;\r\n+    }\r\n \r\n-        let total = 0;\r\n+    // Render each item\r\n+    this.items.forEach(title => {\r\n+        const book = this.booksData.find(b => b.title === title);\r\n+        if (!book) return;\r\n \r\n-        this.items.forEach(title => {\r\n-            const book = this.booksData.find(b => b.title === title);\r\n-            if (!book) return;\r\n+        const cartItem = document.createElement('div');\r\n+        cartItem.className = 'cart-item';\r\n \r\n-            total += book.price;\r\n+        // Cart item inner HTML\r\n+        cartItem.innerHTML = `\r\n+            <img src=\"${book.image}\" alt=\"${book.title}\" class=\"cart-item-image\">\r\n+            <div class=\"cart-item-details\">\r\n+                <h3 class=\"cart-item-title\">${book.title}</h3>\r\n+                <p class=\"cart-item-author\">by ${book.author}</p>\r\n+                <p class=\"cart-item-price\">$${Number(book.price).toFixed(2)}</p>\r\n+            </div>\r\n+        `;\r\n \r\n-            const cartItem = document.createElement('div');\r\n-            cartItem.className = 'cart-item';\r\n-            cartItem.innerHTML = `\r\n-                <img src=\"${book.image}\" alt=\"${book.title}\" class=\"cart-item-image\">\r\n-                <div class=\"cart-item-details\">\r\n-                    <h3 class=\"cart-item-title\">${book.title}</h3>\r\n-                    <p class=\"cart-item-author\">by ${book.author}</p>\r\n-                    <p class=\"cart-item-price\">$${book.price.toFixed(2)}</p>\r\n-                </div>\r\n-            `;\r\n-            const controls = document.createElement('div');\r\n-            controls.className = 'cart-item-controls';\r\n-            const removeBtn = document.createElement('button');\r\n-            removeBtn.className = 'remove-btn';\r\n-            removeBtn.textContent = 'Remove';\r\n-            removeBtn.addEventListener('click', () => this.removeItem(book.title));\r\n-            controls.appendChild(removeBtn);\r\n-            cartItem.appendChild(controls);\r\n+        // Create controls container for remove button\r\n+        const controls = document.createElement('div');\r\n+        controls.className = 'cart-item-controls';\r\n \r\n-            cartItemsContainer.appendChild(cartItem);\r\n-        });\r\n+        const removeBtn = document.createElement('button');\r\n+        removeBtn.className = 'remove-btn';\r\n+        removeBtn.textContent = 'Remove';\r\n \r\n-        this.updateSummary();\r\n-    }\r\n+        // Remove item on click\r\n+        removeBtn.addEventListener('click', () => this.removeItem(book.title));\r\n \r\n+        controls.appendChild(removeBtn);\r\n+        cartItem.appendChild(controls);\r\n+\r\n+        // Append to container\r\n+        cartItemsContainer.appendChild(cartItem);\r\n+    });\r\n+\r\n+    // Update totals\r\n+    this.updateSummary();\r\n+}\r\n+\r\n+\r\n     calculateSubtotal() {\r\n         return this.items.reduce((sum, title) => {\r\n             const book = this.booksData.find(b => b.title === title);\r\n             return book ? sum + book.price : sum;\r\n"
                },
                {
                    "date": 1757251209043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,26 +93,48 @@\n         }\r\n     }\r\n \r\n     // Render cart by matching titles to all-books.json\r\n-renderCart() {\r\n+async renderCart() {\r\n     const cartItemsContainer = document.getElementById('cart-items');\r\n     if (!cartItemsContainer) return;\r\n \r\n     // Clear previous items\r\n     cartItemsContainer.innerHTML = '';\r\n \r\n+    // Fetch the current user's cart from backend\r\n+    const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n+    if (!currentUser || !currentUser.email) {\r\n+        this.items = [];\r\n+        this.updateSummary(); // totals will show $0.00\r\n+        return;\r\n+    }\r\n+\r\n+    try {\r\n+        const response = await fetch(\"http://127.0.0.1:5000/get-cart\", {\r\n+            method: \"POST\",\r\n+            headers: { \"Content-Type\": \"application/json\" },\r\n+            body: JSON.stringify({ email: currentUser.email })\r\n+        });\r\n+        const result = await response.json();\r\n+\r\n+        this.items = result.cart || []; // array of book titles from DB\r\n+    } catch (error) {\r\n+        console.error(\"Failed to fetch cart from DB:\", error);\r\n+        this.items = [];\r\n+    }\r\n+\r\n     // Show empty cart if no items\r\n-    if (!this.items || this.items.length === 0) {\r\n+    if (!this.items.length) {\r\n         cartItemsContainer.innerHTML = `\r\n             <div class=\"empty-cart\">\r\n                 <div class=\"empty-cart-content\">\r\n                     <h3>Your cart is empty</h3>\r\n                     <p>Add some books to get started!</p>\r\n                     <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n                 </div>\r\n             </div>`;\r\n-        this.updateSummary();\r\n+        this.updateSummary(); // totals will show $0.00\r\n         return;\r\n     }\r\n \r\n     // Render each item\r\n@@ -122,9 +144,8 @@\n \r\n         const cartItem = document.createElement('div');\r\n         cartItem.className = 'cart-item';\r\n \r\n-        // Cart item inner HTML\r\n         cartItem.innerHTML = `\r\n             <img src=\"${book.image}\" alt=\"${book.title}\" class=\"cart-item-image\">\r\n             <div class=\"cart-item-details\">\r\n                 <h3 class=\"cart-item-title\">${book.title}</h3>\r\n@@ -132,27 +153,22 @@\n                 <p class=\"cart-item-price\">$${Number(book.price).toFixed(2)}</p>\r\n             </div>\r\n         `;\r\n \r\n-        // Create controls container for remove button\r\n         const controls = document.createElement('div');\r\n         controls.className = 'cart-item-controls';\r\n \r\n         const removeBtn = document.createElement('button');\r\n         removeBtn.className = 'remove-btn';\r\n         removeBtn.textContent = 'Remove';\r\n-\r\n-        // Remove item on click\r\n         removeBtn.addEventListener('click', () => this.removeItem(book.title));\r\n \r\n         controls.appendChild(removeBtn);\r\n         cartItem.appendChild(controls);\r\n \r\n-        // Append to container\r\n         cartItemsContainer.appendChild(cartItem);\r\n     });\r\n \r\n-    // Update totals\r\n     this.updateSummary();\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1757251226242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,20 +187,27 @@\n         return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n     }\r\n \r\n     updateSummary() {\r\n-        const subtotalEl = document.getElementById('subtotal');\r\n-        const totalEl = document.getElementById('total');\r\n-        const checkoutBtn = document.getElementById('checkout-btn');\r\n+    const subtotalEl = document.getElementById('subtotal');\r\n+    const totalEl = document.getElementById('total');\r\n+    const checkoutBtn = document.getElementById('checkout-btn');\r\n \r\n-        const subtotal = this.calculateSubtotal();\r\n-        const total = this.calculateTotal();\r\n-\r\n-        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n-        if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n-        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n+    if (!this.items || this.items.length === 0) {\r\n+        if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n+        if (totalEl) totalEl.textContent = `$0.00`;\r\n+        if (checkoutBtn) checkoutBtn.disabled = true;\r\n+        return;\r\n     }\r\n \r\n+    const subtotal = this.calculateSubtotal();\r\n+    const total = this.calculateTotal();\r\n+\r\n+    if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n+    if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n+    if (checkoutBtn) checkoutBtn.disabled = false;\r\n+}\r\n+\r\n     updateCartCount() {\r\n         const cartCountEl = document.getElementById('cart-count');\r\n         if (cartCountEl) cartCountEl.textContent = this.items.length;\r\n     }\r\n"
                },
                {
                    "date": 1757253746137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,32 +93,38 @@\n         }\r\n     }\r\n \r\n     // Render cart by matching titles to all-books.json\r\n+// Render cart by fetching from backend and matching titles to all-books.json\r\n async renderCart() {\r\n     const cartItemsContainer = document.getElementById('cart-items');\r\n     if (!cartItemsContainer) return;\r\n \r\n-    // Clear previous items\r\n-    cartItemsContainer.innerHTML = '';\r\n-\r\n-    // Fetch the current user's cart from backend\r\n-    const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n-    if (!currentUser || !currentUser.email) {\r\n+    // If no user email, show empty cart\r\n+    if (!this.currentUserEmail) {\r\n         this.items = [];\r\n-        this.updateSummary(); // totals will show $0.00\r\n+        cartItemsContainer.innerHTML = `\r\n+            <div class=\"empty-cart\">\r\n+                <div class=\"empty-cart-content\">\r\n+                    <h3>Your cart is empty</h3>\r\n+                    <p>Add some books to get started!</p>\r\n+                    <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n+                </div>\r\n+            </div>`;\r\n+        this.updateSummary();\r\n         return;\r\n     }\r\n \r\n+    // Fetch the current user's cart from backend\r\n     try {\r\n         const response = await fetch(\"http://127.0.0.1:5000/get-cart\", {\r\n             method: \"POST\",\r\n             headers: { \"Content-Type\": \"application/json\" },\r\n-            body: JSON.stringify({ email: currentUser.email })\r\n+            body: JSON.stringify({ email: this.currentUserEmail })\r\n         });\r\n+\r\n         const result = await response.json();\r\n-\r\n-        this.items = result.cart || []; // array of book titles from DB\r\n+        this.items = result.cart || [];\r\n     } catch (error) {\r\n         console.error(\"Failed to fetch cart from DB:\", error);\r\n         this.items = [];\r\n     }\r\n@@ -132,13 +138,16 @@\n                     <p>Add some books to get started!</p>\r\n                     <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n                 </div>\r\n             </div>`;\r\n-        this.updateSummary(); // totals will show $0.00\r\n+        this.updateSummary();\r\n         return;\r\n     }\r\n \r\n-    // Render each item\r\n+    // Clear container before rendering items\r\n+    cartItemsContainer.innerHTML = '';\r\n+\r\n+    // Render each book in cart\r\n     this.items.forEach(title => {\r\n         const book = this.booksData.find(b => b.title === title);\r\n         if (!book) return;\r\n \r\n@@ -171,8 +180,9 @@\n     this.updateSummary();\r\n }\r\n \r\n \r\n+\r\n     calculateSubtotal() {\r\n         return this.items.reduce((sum, title) => {\r\n             const book = this.booksData.find(b => b.title === title);\r\n             return book ? sum + book.price : sum;\r\n"
                },
                {
                    "date": 1757253917756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,8 +239,63 @@\n         });\r\n     }\r\n }\r\n \r\n+\r\n+// Checkout\r\n+proceedToCheckout() {\r\n+    if (!this.items || this.items.length === 0) {\r\n+        this.showNotification(\"Your cart is empty. Cannot proceed to checkout.\");\r\n+        return;\r\n+    }\r\n+\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (!paypalContainer) return;\r\n+\r\n+    // Show PayPal container\r\n+    paypalContainer.style.display = \"flex\";\r\n+    paypalContainer.innerHTML = \"\"; // Clear old buttons\r\n+\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: {\r\n+                        value: this.calculateTotal().toFixed(2) // use cart total from backend\r\n+                    }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: (data, actions) => {\r\n+            return actions.order.capture().then(details => {\r\n+                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+\r\n+                // Clear cart after successful transaction\r\n+                this.items = [];\r\n+                this.renderCart();\r\n+                this.updateCartCount();\r\n+                this.updateTotalIfEmpty();\r\n+\r\n+                // Hide PayPal container\r\n+                paypalContainer.style.display = \"none\";\r\n+\r\n+                // Redirect to thank you page\r\n+                window.location.href = \"thank you.html\";\r\n+            });\r\n+        },\r\n+        onCancel: () => {\r\n+            this.showNotification(\"Payment cancelled.\");\r\n+            paypalContainer.style.display = \"none\";\r\n+        },\r\n+        onError: (err) => {\r\n+            console.error(\"PayPal Error:\", err);\r\n+            this.showNotification(\"Payment failed. Please try again.\");\r\n+            paypalContainer.style.display = \"none\";\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n+}\r\n+\r\n+\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1757253924645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,62 +240,10 @@\n     }\r\n }\r\n \r\n \r\n-// Checkout\r\n-proceedToCheckout() {\r\n-    if (!this.items || this.items.length === 0) {\r\n-        this.showNotification(\"Your cart is empty. Cannot proceed to checkout.\");\r\n-        return;\r\n-    }\r\n \r\n-    const paypalContainer = document.getElementById('paypal-button-container');\r\n-    if (!paypalContainer) return;\r\n \r\n-    // Show PayPal container\r\n-    paypalContainer.style.display = \"flex\";\r\n-    paypalContainer.innerHTML = \"\"; // Clear old buttons\r\n-\r\n-    paypal.Buttons({\r\n-        createOrder: (data, actions) => {\r\n-            return actions.order.create({\r\n-                purchase_units: [{\r\n-                    amount: {\r\n-                        value: this.calculateTotal().toFixed(2) // use cart total from backend\r\n-                    }\r\n-                }]\r\n-            });\r\n-        },\r\n-        onApprove: (data, actions) => {\r\n-            return actions.order.capture().then(details => {\r\n-                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-\r\n-                // Clear cart after successful transaction\r\n-                this.items = [];\r\n-                this.renderCart();\r\n-                this.updateCartCount();\r\n-                this.updateTotalIfEmpty();\r\n-\r\n-                // Hide PayPal container\r\n-                paypalContainer.style.display = \"none\";\r\n-\r\n-                // Redirect to thank you page\r\n-                window.location.href = \"thank you.html\";\r\n-            });\r\n-        },\r\n-        onCancel: () => {\r\n-            this.showNotification(\"Payment cancelled.\");\r\n-            paypalContainer.style.display = \"none\";\r\n-        },\r\n-        onError: (err) => {\r\n-            console.error(\"PayPal Error:\", err);\r\n-            this.showNotification(\"Payment failed. Please try again.\");\r\n-            paypalContainer.style.display = \"none\";\r\n-        }\r\n-    }).render('#paypal-button-container');\r\n-}\r\n-\r\n-\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1757253942940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -246,4 +246,60 @@\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n+\r\n+\r\n+\r\n+// Checkout\r\n+proceedToCheckout() {\r\n+    if (!this.items || this.items.length === 0) {\r\n+        this.showNotification(\"Your cart is empty. Cannot proceed to checkout.\");\r\n+        return;\r\n+    }\r\n+\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (!paypalContainer) return;\r\n+\r\n+    // Show PayPal container\r\n+    paypalContainer.style.display = \"flex\";\r\n+    paypalContainer.innerHTML = \"\"; // Clear old buttons\r\n+\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: {\r\n+                        value: this.calculateTotal().toFixed(2) // use cart total from backend\r\n+                    }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: (data, actions) => {\r\n+            return actions.order.capture().then(details => {\r\n+                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+\r\n+                // Clear cart after successful transaction\r\n+                this.items = [];\r\n+                this.renderCart();\r\n+                this.updateCartCount();\r\n+                this.updateTotalIfEmpty();\r\n+\r\n+                // Hide PayPal container\r\n+                paypalContainer.style.display = \"none\";\r\n+\r\n+                // Redirect to thank you page\r\n+                window.location.href = \"thank you.html\";\r\n+            });\r\n+        },\r\n+        onCancel: () => {\r\n+            this.showNotification(\"Payment cancelled.\");\r\n+            paypalContainer.style.display = \"none\";\r\n+        },\r\n+        onError: (err) => {\r\n+            console.error(\"PayPal Error:\", err);\r\n+            this.showNotification(\"Payment failed. Please try again.\");\r\n+            paypalContainer.style.display = \"none\";\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1757253959727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,57 +249,5 @@\n });\r\n \r\n \r\n \r\n-// Checkout\r\n-proceedToCheckout() {\r\n-    if (!this.items || this.items.length === 0) {\r\n-        this.showNotification(\"Your cart is empty. Cannot proceed to checkout.\");\r\n-        return;\r\n-    }\r\n \r\n-    const paypalContainer = document.getElementById('paypal-button-container');\r\n-    if (!paypalContainer) return;\r\n-\r\n-    // Show PayPal container\r\n-    paypalContainer.style.display = \"flex\";\r\n-    paypalContainer.innerHTML = \"\"; // Clear old buttons\r\n-\r\n-    paypal.Buttons({\r\n-        createOrder: (data, actions) => {\r\n-            return actions.order.create({\r\n-                purchase_units: [{\r\n-                    amount: {\r\n-                        value: this.calculateTotal().toFixed(2) // use cart total from backend\r\n-                    }\r\n-                }]\r\n-            });\r\n-        },\r\n-        onApprove: (data, actions) => {\r\n-            return actions.order.capture().then(details => {\r\n-                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-\r\n-                // Clear cart after successful transaction\r\n-                this.items = [];\r\n-                this.renderCart();\r\n-                this.updateCartCount();\r\n-                this.updateTotalIfEmpty();\r\n-\r\n-                // Hide PayPal container\r\n-                paypalContainer.style.display = \"none\";\r\n-\r\n-                // Redirect to thank you page\r\n-                window.location.href = \"thank you.html\";\r\n-            });\r\n-        },\r\n-        onCancel: () => {\r\n-            this.showNotification(\"Payment cancelled.\");\r\n-            paypalContainer.style.display = \"none\";\r\n-        },\r\n-        onError: (err) => {\r\n-            console.error(\"PayPal Error:\", err);\r\n-            this.showNotification(\"Payment failed. Please try again.\");\r\n-            paypalContainer.style.display = \"none\";\r\n-        }\r\n-    }).render('#paypal-button-container');\r\n-}\r\n-\r\n"
                },
                {
                    "date": 1757253976226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,63 @@\n             console.error(\"Failed to add book to backend:\", err);\r\n         }\r\n     }\r\n \r\n+\r\n+    // Checkout\r\n+proceedToCheckout() {\r\n+    if (!this.items || this.items.length === 0) {\r\n+        this.showNotification(\"Your cart is empty. Cannot proceed to checkout.\");\r\n+        return;\r\n+    }\r\n+\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (!paypalContainer) return;\r\n+\r\n+    // Show PayPal container\r\n+    paypalContainer.style.display = \"flex\";\r\n+    paypalContainer.innerHTML = \"\"; // Clear old buttons\r\n+\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: {\r\n+                        value: this.calculateTotal().toFixed(2) // use cart total from backend\r\n+                    }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: (data, actions) => {\r\n+            return actions.order.capture().then(details => {\r\n+                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+\r\n+                // Clear cart after successful transaction\r\n+                this.items = [];\r\n+                this.renderCart();\r\n+                this.updateCartCount();\r\n+                this.updateTotalIfEmpty();\r\n+\r\n+                // Hide PayPal container\r\n+                paypalContainer.style.display = \"none\";\r\n+\r\n+                // Redirect to thank you page\r\n+                window.location.href = \"thank you.html\";\r\n+            });\r\n+        },\r\n+        onCancel: () => {\r\n+            this.showNotification(\"Payment cancelled.\");\r\n+            paypalContainer.style.display = \"none\";\r\n+        },\r\n+        onError: (err) => {\r\n+            console.error(\"PayPal Error:\", err);\r\n+            this.showNotification(\"Payment failed. Please try again.\");\r\n+            paypalContainer.style.display = \"none\";\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n+}\r\n+\r\n+\r\n     // Remove book from backend cart\r\n     async removeItem(title) {\r\n         if (!this.currentUserEmail) return;\r\n \r\n"
                },
                {
                    "date": 1757254002620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,40 @@\n     }).render('#paypal-button-container');\r\n }\r\n \r\n \r\n+// Clear cart (backend)\r\n+async clearCart() {\r\n+    if (!this.items || this.items.length === 0) return;\r\n+\r\n+    if (!confirm('Are you sure you want to clear the cart?')) return;\r\n+\r\n+    try {\r\n+        // Call backend to clear cart in DBCRUD\r\n+        const response = await fetch(\"http://127.0.0.1:5000/clear-cart\", {\r\n+            method: \"POST\",\r\n+            headers: { \"Content-Type\": \"application/json\" },\r\n+            body: JSON.stringify({ email: this.currentUserEmail })\r\n+        });\r\n+        const result = await response.json();\r\n+\r\n+        if (!result.success) {\r\n+            return this.showNotification(\"Failed to clear cart in backend.\");\r\n+        }\r\n+\r\n+        // Clear frontend cart\r\n+        this.items = [];\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.updateTotalIfEmpty();\r\n+        this.showNotification('Cart cleared successfully!');\r\n+    } catch (err) {\r\n+        console.error(\"Failed to clear cart:\", err);\r\n+        this.showNotification(\"Error clearing cart. Try again.\");\r\n+    }\r\n+}\r\n+\r\n+\r\n     // Remove book from backend cart\r\n     async removeItem(title) {\r\n         if (!this.currentUserEmail) return;\r\n \r\n"
                },
                {
                    "date": 1757254136742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,39 +126,9 @@\n }\r\n \r\n \r\n // Clear cart (backend)\r\n-async clearCart() {\r\n-    if (!this.items || this.items.length === 0) return;\r\n \r\n-    if (!confirm('Are you sure you want to clear the cart?')) return;\r\n-\r\n-    try {\r\n-        // Call backend to clear cart in DBCRUD\r\n-        const response = await fetch(\"http://127.0.0.1:5000/clear-cart\", {\r\n-            method: \"POST\",\r\n-            headers: { \"Content-Type\": \"application/json\" },\r\n-            body: JSON.stringify({ email: this.currentUserEmail })\r\n-        });\r\n-        const result = await response.json();\r\n-\r\n-        if (!result.success) {\r\n-            return this.showNotification(\"Failed to clear cart in backend.\");\r\n-        }\r\n-\r\n-        // Clear frontend cart\r\n-        this.items = [];\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.updateTotalIfEmpty();\r\n-        this.showNotification('Cart cleared successfully!');\r\n-    } catch (err) {\r\n-        console.error(\"Failed to clear cart:\", err);\r\n-        this.showNotification(\"Error clearing cart. Try again.\");\r\n-    }\r\n-}\r\n-\r\n-\r\n     // Remove book from backend cart\r\n     async removeItem(title) {\r\n         if (!this.currentUserEmail) return;\r\n \r\n"
                },
                {
                    "date": 1757254143108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -297,10 +297,43 @@\n     }\r\n }\r\n \r\n \r\n+async clearCart() {\r\n+    if (!this.items || this.items.length === 0) return;\r\n \r\n+    if (!confirm('Are you sure you want to clear the cart?')) return;\r\n \r\n+    try {\r\n+        // Call backend to clear cart in DBCRUD\r\n+        const response = await fetch(\"http://127.0.0.1:5000/clear-cart\", {\r\n+            method: \"POST\",\r\n+            headers: { \"Content-Type\": \"application/json\" },\r\n+            body: JSON.stringify({ email: this.currentUserEmail })\r\n+        });\r\n+        const result = await response.json();\r\n+\r\n+        if (!result.success) {\r\n+            return this.showNotification(\"Failed to clear cart in backend.\");\r\n+        }\r\n+\r\n+        // Clear frontend cart\r\n+        this.items = [];\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.updateTotalIfEmpty();\r\n+        this.showNotification('Cart cleared successfully!');\r\n+    } catch (err) {\r\n+        console.error(\"Failed to clear cart:\", err);\r\n+        this.showNotification(\"Error clearing cart. Try again.\");\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1757254178543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,39 @@\n }\r\n \r\n \r\n // Clear cart (backend)\r\n+async clearCart() {\r\n+    if (!this.items || this.items.length === 0) return;\r\n \r\n+    if (!confirm('Are you sure you want to clear the cart?')) return;\r\n+\r\n+    try {\r\n+        // Call backend to clear cart in DBCRUD\r\n+        const response = await fetch(\"http://127.0.0.1:5000/clear-cart\", {\r\n+            method: \"POST\",\r\n+            headers: { \"Content-Type\": \"application/json\" },\r\n+            body: JSON.stringify({ email: this.currentUserEmail })\r\n+        });\r\n+        const result = await response.json();\r\n+\r\n+        if (!result.success) {\r\n+            return this.showNotification(\"Failed to clear cart in backend.\");\r\n+        }\r\n+\r\n+        // Clear frontend cart\r\n+        this.items = [];\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.updateTotalIfEmpty();\r\n+        this.showNotification('Cart cleared successfully!');\r\n+    } catch (err) {\r\n+        console.error(\"Failed to clear cart:\", err);\r\n+        this.showNotification(\"Error clearing cart. Try again.\");\r\n+    }\r\n+}\r\n+\r\n+\r\n     // Remove book from backend cart\r\n     async removeItem(title) {\r\n         if (!this.currentUserEmail) return;\r\n \r\n@@ -286,54 +316,27 @@\n         document.body.appendChild(notification);\r\n         setTimeout(() => notification.remove(), 3000);\r\n     }\r\n \r\n-    bindEvents() {\r\n-        document.addEventListener('click', e => {\r\n-            if (e.target.classList.contains('add-to-cart-btn')) {\r\n-                const title = e.target.getAttribute('data-title');\r\n-                this.addItem(title);\r\n-            }\r\n-        });\r\n-    }\r\n-}\r\n+bindEvents() {\r\n+    const clearBtn = document.getElementById('clear-cart');\r\n+    if (clearBtn) clearBtn.addEventListener('click', () => this.clearCart());\r\n \r\n+    const checkoutBtn = document.getElementById('checkout-btn');\r\n+    if (checkoutBtn) checkoutBtn.addEventListener('click', () => this.proceedToCheckout());\r\n \r\n-async clearCart() {\r\n-    if (!this.items || this.items.length === 0) return;\r\n-\r\n-    if (!confirm('Are you sure you want to clear the cart?')) return;\r\n-\r\n-    try {\r\n-        // Call backend to clear cart in DBCRUD\r\n-        const response = await fetch(\"http://127.0.0.1:5000/clear-cart\", {\r\n-            method: \"POST\",\r\n-            headers: { \"Content-Type\": \"application/json\" },\r\n-            body: JSON.stringify({ email: this.currentUserEmail })\r\n-        });\r\n-        const result = await response.json();\r\n-\r\n-        if (!result.success) {\r\n-            return this.showNotification(\"Failed to clear cart in backend.\");\r\n+    // Add to cart buttons in recommended section\r\n+    document.addEventListener('click', e => {\r\n+        if (e.target.classList.contains('add-to-cart-btn')) {\r\n+            const title = e.target.getAttribute('data-title');\r\n+            this.addItem(title);\r\n         }\r\n-\r\n-        // Clear frontend cart\r\n-        this.items = [];\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.updateTotalIfEmpty();\r\n-        this.showNotification('Cart cleared successfully!');\r\n-    } catch (err) {\r\n-        console.error(\"Failed to clear cart:\", err);\r\n-        this.showNotification(\"Error clearing cart. Try again.\");\r\n-    }\r\n+    });\r\n }\r\n \r\n \r\n \r\n \r\n-\r\n-\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1757254187308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,22 +316,16 @@\n         document.body.appendChild(notification);\r\n         setTimeout(() => notification.remove(), 3000);\r\n     }\r\n \r\n-bindEvents() {\r\n-    const clearBtn = document.getElementById('clear-cart');\r\n-    if (clearBtn) clearBtn.addEventListener('click', () => this.clearCart());\r\n-\r\n-    const checkoutBtn = document.getElementById('checkout-btn');\r\n-    if (checkoutBtn) checkoutBtn.addEventListener('click', () => this.proceedToCheckout());\r\n-\r\n-    // Add to cart buttons in recommended section\r\n-    document.addEventListener('click', e => {\r\n-        if (e.target.classList.contains('add-to-cart-btn')) {\r\n-            const title = e.target.getAttribute('data-title');\r\n-            this.addItem(title);\r\n-        }\r\n-    });\r\n+    bindEvents() {\r\n+        document.addEventListener('click', e => {\r\n+            if (e.target.classList.contains('add-to-cart-btn')) {\r\n+                const title = e.target.getAttribute('data-title');\r\n+                this.addItem(title);\r\n+            }\r\n+        });\r\n+    }\r\n }\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1757254762015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,51 @@\n         }\r\n     }).render('#paypal-button-container');\r\n }\r\n \r\n+async updateTotalIfEmpty() {\r\n+    const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n+    if (!currentUser || !currentUser.email) {\r\n+        console.log('No user logged in');\r\n+        return;\r\n+    }\r\n \r\n+    try {\r\n+        // Fetch cart from backend\r\n+        const response = await fetch('http://127.0.0.1:5000/get-cart', {\r\n+            method: 'POST',\r\n+            headers: { 'Content-Type': 'application/json' },\r\n+            body: JSON.stringify({ email: currentUser.email })\r\n+        });\r\n+        const result = await response.json();\r\n+        const cartItems = result.cart || [];\r\n+\r\n+        const subtotalEl = document.getElementById('subtotal');\r\n+        const totalEl = document.getElementById('total');\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n+\r\n+        if (cartItems.length === 0) {\r\n+            console.log('Cart empty detected from backend');\r\n+            if (subtotalEl) subtotalEl.textContent = '$0.00';\r\n+            if (totalEl) totalEl.textContent = '$0.00';\r\n+            if (checkoutBtn) checkoutBtn.disabled = true;\r\n+        } else {\r\n+            // Optionally, you can recalc total from your booksData if you want\r\n+            let total = 0;\r\n+            cartItems.forEach(title => {\r\n+                const book = this.booksData.find(b => b.title === title);\r\n+                if (book) total += book.price;\r\n+            });\r\n+            if (subtotalEl) subtotalEl.textContent = `$${total.toFixed(2)}`;\r\n+            if (totalEl) totalEl.textContent = `$${(total + total * this.taxRate + this.shippingCost).toFixed(2)}`;\r\n+            if (checkoutBtn) checkoutBtn.disabled = false;\r\n+        }\r\n+    } catch (err) {\r\n+        console.error('Error fetching cart from backend:', err);\r\n+    }\r\n+}\r\n+\r\n+\r\n // Clear cart (backend)\r\n async clearCart() {\r\n     if (!this.items || this.items.length === 0) return;\r\n \r\n@@ -316,21 +358,29 @@\n         document.body.appendChild(notification);\r\n         setTimeout(() => notification.remove(), 3000);\r\n     }\r\n \r\n-    bindEvents() {\r\n-        document.addEventListener('click', e => {\r\n-            if (e.target.classList.contains('add-to-cart-btn')) {\r\n-                const title = e.target.getAttribute('data-title');\r\n-                this.addItem(title);\r\n-            }\r\n-        });\r\n-    }\r\n+bindEvents() {\r\n+    const clearBtn = document.getElementById('clear-cart');\r\n+    if (clearBtn) clearBtn.addEventListener('click', () => this.clearCart());\r\n+\r\n+    const checkoutBtn = document.getElementById('checkout-btn');\r\n+    if (checkoutBtn) checkoutBtn.addEventListener('click', () => this.proceedToCheckout());\r\n+\r\n+    // Add to cart buttons in recommended section\r\n+    document.addEventListener('click', e => {\r\n+        if (e.target.classList.contains('add-to-cart-btn')) {\r\n+            const title = e.target.getAttribute('data-title');\r\n+            this.addItem(title);\r\n+        }\r\n+    });\r\n }\r\n \r\n+}\r\n \r\n \r\n \r\n+\r\n // Initialize cart\r\n document.addEventListener('DOMContentLoaded', () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1757560187745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,53 @@\n class ShoppingCart {\r\n     constructor() {\r\n         const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n-        this.currentUserEmail = currentUser?.email || null; // email for backend\r\n-        this.items = []; // will fetch from backend\r\n+        this.currentUserEmail = currentUser?.email || null;\r\n+        this.items = [];       // titles\r\n+        this.booksData = [];   // fetch from backend\r\n         this.shippingCost = 5.99;\r\n         this.taxRate = 0.08;\r\n-        this.booksData = [];\r\n \r\n         this.init();\r\n     }\r\n \r\n     async init() {\r\n-        await this.loadBooksData();\r\n-        await this.loadUserCart(); // fetch cart from backend\r\n+        await this.loadBooksDataFromBackend();\r\n+        await this.loadUserCart();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.bindEvents();\r\n     }\r\n \r\n-    async loadBooksData() {\r\n+    // Fetch all books from backend instead of JSON\r\n+    async loadBooksDataFromBackend() {\r\n         try {\r\n-            const response = await fetch('all-books.json');\r\n-            this.booksData = await response.json();\r\n+            const response = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n+            const data = await response.json();\r\n+            this.booksData = data || [];\r\n         } catch (err) {\r\n-            console.error('Error loading all-books.json:', err);\r\n+            console.error(\"Failed to load books from backend:\", err);\r\n+            this.booksData = [];\r\n         }\r\n     }\r\n \r\n-    // Fetch cart from backend\r\n     async loadUserCart() {\r\n         if (!this.currentUserEmail) return;\r\n+\r\n         try {\r\n             const response = await fetch(\"http://127.0.0.1:5000/get-cart\", {\r\n                 method: \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n                 body: JSON.stringify({ email: this.currentUserEmail })\r\n             });\r\n             const result = await response.json();\r\n-            if (result.success) {\r\n-                this.items = result.cart || []; // array of titles\r\n-            } else {\r\n-                this.items = [];\r\n-            }\r\n+            this.items = result.cart || [];\r\n         } catch (err) {\r\n-            console.error('Failed to fetch cart from backend:', err);\r\n+            console.error(\"Failed to fetch user cart:\", err);\r\n             this.items = [];\r\n         }\r\n     }\r\n \r\n-    // Add book to backend cart\r\n     async addItem(title) {\r\n         if (!this.currentUserEmail) return alert(\"Please log in first.\");\r\n         if (this.items.includes(title)) return alert(\"This book is already in your cart!\");\r\n \r\n@@ -66,142 +64,12 @@\n             this.renderCart();\r\n             this.updateCartCount();\r\n             this.showNotification(`${title} added to cart!`);\r\n         } catch (err) {\r\n-            console.error(\"Failed to add book to backend:\", err);\r\n+            console.error(\"Failed to add book:\", err);\r\n         }\r\n     }\r\n \r\n-\r\n-    // Checkout\r\n-proceedToCheckout() {\r\n-    if (!this.items || this.items.length === 0) {\r\n-        this.showNotification(\"Your cart is empty. Cannot proceed to checkout.\");\r\n-        return;\r\n-    }\r\n-\r\n-    const paypalContainer = document.getElementById('paypal-button-container');\r\n-    if (!paypalContainer) return;\r\n-\r\n-    // Show PayPal container\r\n-    paypalContainer.style.display = \"flex\";\r\n-    paypalContainer.innerHTML = \"\"; // Clear old buttons\r\n-\r\n-    paypal.Buttons({\r\n-        createOrder: (data, actions) => {\r\n-            return actions.order.create({\r\n-                purchase_units: [{\r\n-                    amount: {\r\n-                        value: this.calculateTotal().toFixed(2) // use cart total from backend\r\n-                    }\r\n-                }]\r\n-            });\r\n-        },\r\n-        onApprove: (data, actions) => {\r\n-            return actions.order.capture().then(details => {\r\n-                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n-\r\n-                // Clear cart after successful transaction\r\n-                this.items = [];\r\n-                this.renderCart();\r\n-                this.updateCartCount();\r\n-                this.updateTotalIfEmpty();\r\n-\r\n-                // Hide PayPal container\r\n-                paypalContainer.style.display = \"none\";\r\n-\r\n-                // Redirect to thank you page\r\n-                window.location.href = \"thank you.html\";\r\n-            });\r\n-        },\r\n-        onCancel: () => {\r\n-            this.showNotification(\"Payment cancelled.\");\r\n-            paypalContainer.style.display = \"none\";\r\n-        },\r\n-        onError: (err) => {\r\n-            console.error(\"PayPal Error:\", err);\r\n-            this.showNotification(\"Payment failed. Please try again.\");\r\n-            paypalContainer.style.display = \"none\";\r\n-        }\r\n-    }).render('#paypal-button-container');\r\n-}\r\n-\r\n-async updateTotalIfEmpty() {\r\n-    const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n-    if (!currentUser || !currentUser.email) {\r\n-        console.log('No user logged in');\r\n-        return;\r\n-    }\r\n-\r\n-    try {\r\n-        // Fetch cart from backend\r\n-        const response = await fetch('http://127.0.0.1:5000/get-cart', {\r\n-            method: 'POST',\r\n-            headers: { 'Content-Type': 'application/json' },\r\n-            body: JSON.stringify({ email: currentUser.email })\r\n-        });\r\n-        const result = await response.json();\r\n-        const cartItems = result.cart || [];\r\n-\r\n-        const subtotalEl = document.getElementById('subtotal');\r\n-        const totalEl = document.getElementById('total');\r\n-        const checkoutBtn = document.getElementById('checkout-btn');\r\n-\r\n-        if (cartItems.length === 0) {\r\n-            console.log('Cart empty detected from backend');\r\n-            if (subtotalEl) subtotalEl.textContent = '$0.00';\r\n-            if (totalEl) totalEl.textContent = '$0.00';\r\n-            if (checkoutBtn) checkoutBtn.disabled = true;\r\n-        } else {\r\n-            // Optionally, you can recalc total from your booksData if you want\r\n-            let total = 0;\r\n-            cartItems.forEach(title => {\r\n-                const book = this.booksData.find(b => b.title === title);\r\n-                if (book) total += book.price;\r\n-            });\r\n-            if (subtotalEl) subtotalEl.textContent = `$${total.toFixed(2)}`;\r\n-            if (totalEl) totalEl.textContent = `$${(total + total * this.taxRate + this.shippingCost).toFixed(2)}`;\r\n-            if (checkoutBtn) checkoutBtn.disabled = false;\r\n-        }\r\n-    } catch (err) {\r\n-        console.error('Error fetching cart from backend:', err);\r\n-    }\r\n-}\r\n-\r\n-\r\n-// Clear cart (backend)\r\n-async clearCart() {\r\n-    if (!this.items || this.items.length === 0) return;\r\n-\r\n-    if (!confirm('Are you sure you want to clear the cart?')) return;\r\n-\r\n-    try {\r\n-        // Call backend to clear cart in DBCRUD\r\n-        const response = await fetch(\"http://127.0.0.1:5000/clear-cart\", {\r\n-            method: \"POST\",\r\n-            headers: { \"Content-Type\": \"application/json\" },\r\n-            body: JSON.stringify({ email: this.currentUserEmail })\r\n-        });\r\n-        const result = await response.json();\r\n-\r\n-        if (!result.success) {\r\n-            return this.showNotification(\"Failed to clear cart in backend.\");\r\n-        }\r\n-\r\n-        // Clear frontend cart\r\n-        this.items = [];\r\n-        this.renderCart();\r\n-        this.updateCartCount();\r\n-        this.updateTotalIfEmpty();\r\n-        this.showNotification('Cart cleared successfully!');\r\n-    } catch (err) {\r\n-        console.error(\"Failed to clear cart:\", err);\r\n-        this.showNotification(\"Error clearing cart. Try again.\");\r\n-    }\r\n-}\r\n-\r\n-\r\n-    // Remove book from backend cart\r\n     async removeItem(title) {\r\n         if (!this.currentUserEmail) return;\r\n \r\n         try {\r\n@@ -217,174 +85,132 @@\n             this.renderCart();\r\n             this.updateCartCount();\r\n             this.showNotification(`Removed \"${title}\" from cart`);\r\n         } catch (err) {\r\n-            console.error(\"Failed to remove book from backend:\", err);\r\n+            console.error(\"Failed to remove book:\", err);\r\n         }\r\n     }\r\n \r\n-    // Render cart by matching titles to all-books.json\r\n-// Render cart by fetching from backend and matching titles to all-books.json\r\n-async renderCart() {\r\n-    const cartItemsContainer = document.getElementById('cart-items');\r\n-    if (!cartItemsContainer) return;\r\n+    async clearCart() {\r\n+        if (!this.items.length) return;\r\n+        if (!confirm(\"Are you sure you want to clear the cart?\")) return;\r\n \r\n-    // If no user email, show empty cart\r\n-    if (!this.currentUserEmail) {\r\n-        this.items = [];\r\n-        cartItemsContainer.innerHTML = `\r\n-            <div class=\"empty-cart\">\r\n-                <div class=\"empty-cart-content\">\r\n-                    <h3>Your cart is empty</h3>\r\n-                    <p>Add some books to get started!</p>\r\n-                    <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n-                </div>\r\n-            </div>`;\r\n-        this.updateSummary();\r\n-        return;\r\n+        try {\r\n+            const response = await fetch(\"http://127.0.0.1:5000/clear-cart\", {\r\n+                method: \"POST\",\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify({ email: this.currentUserEmail })\r\n+            });\r\n+            const result = await response.json();\r\n+            if (!result.success) return this.showNotification(\"Failed to clear cart.\");\r\n+\r\n+            this.items = [];\r\n+            this.renderCart();\r\n+            this.updateCartCount();\r\n+            this.updateSummary();\r\n+            this.showNotification(\"Cart cleared successfully!\");\r\n+        } catch (err) {\r\n+            console.error(\"Failed to clear cart:\", err);\r\n+        }\r\n     }\r\n \r\n-    // Fetch the current user's cart from backend\r\n-    try {\r\n-        const response = await fetch(\"http://127.0.0.1:5000/get-cart\", {\r\n-            method: \"POST\",\r\n-            headers: { \"Content-Type\": \"application/json\" },\r\n-            body: JSON.stringify({ email: this.currentUserEmail })\r\n-        });\r\n+    async renderCart() {\r\n+        const container = document.getElementById(\"cart-items\");\r\n+        if (!container) return;\r\n \r\n-        const result = await response.json();\r\n-        this.items = result.cart || [];\r\n-    } catch (error) {\r\n-        console.error(\"Failed to fetch cart from DB:\", error);\r\n-        this.items = [];\r\n-    }\r\n-\r\n-    // Show empty cart if no items\r\n-    if (!this.items.length) {\r\n-        cartItemsContainer.innerHTML = `\r\n-            <div class=\"empty-cart\">\r\n-                <div class=\"empty-cart-content\">\r\n-                    <h3>Your cart is empty</h3>\r\n-                    <p>Add some books to get started!</p>\r\n-                    <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n-                </div>\r\n+        if (!this.items.length) {\r\n+            container.innerHTML = `<div class=\"empty-cart\">\r\n+                <h3>Your cart is empty</h3>\r\n+                <p>Add some books to get started!</p>\r\n+                <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n             </div>`;\r\n-        this.updateSummary();\r\n-        return;\r\n-    }\r\n+            this.updateSummary();\r\n+            return;\r\n+        }\r\n \r\n-    // Clear container before rendering items\r\n-    cartItemsContainer.innerHTML = '';\r\n+        container.innerHTML = \"\";\r\n+        this.items.forEach(title => {\r\n+            const book = this.booksData.find(b => b.title === title);\r\n+            if (!book) return;\r\n \r\n-    // Render each book in cart\r\n-    this.items.forEach(title => {\r\n-        const book = this.booksData.find(b => b.title === title);\r\n-        if (!book) return;\r\n+            const cartItem = document.createElement(\"div\");\r\n+            cartItem.className = \"cart-item\";\r\n+            cartItem.innerHTML = `\r\n+                <img src=\"${book.image}\" alt=\"${book.title}\" class=\"cart-item-image\">\r\n+                <div class=\"cart-item-details\">\r\n+                    <h3>${book.title}</h3>\r\n+                    <p>by ${book.author}</p>\r\n+                    <p>$${Number(book.price).toFixed(2)}</p>\r\n+                </div>\r\n+            `;\r\n \r\n-        const cartItem = document.createElement('div');\r\n-        cartItem.className = 'cart-item';\r\n+            const controls = document.createElement(\"div\");\r\n+            controls.className = \"cart-item-controls\";\r\n+            const removeBtn = document.createElement(\"button\");\r\n+            removeBtn.textContent = \"Remove\";\r\n+            removeBtn.className = \"remove-btn\";\r\n+            removeBtn.addEventListener(\"click\", () => this.removeItem(book.title));\r\n \r\n-        cartItem.innerHTML = `\r\n-            <img src=\"${book.image}\" alt=\"${book.title}\" class=\"cart-item-image\">\r\n-            <div class=\"cart-item-details\">\r\n-                <h3 class=\"cart-item-title\">${book.title}</h3>\r\n-                <p class=\"cart-item-author\">by ${book.author}</p>\r\n-                <p class=\"cart-item-price\">$${Number(book.price).toFixed(2)}</p>\r\n-            </div>\r\n-        `;\r\n+            controls.appendChild(removeBtn);\r\n+            cartItem.appendChild(controls);\r\n+            container.appendChild(cartItem);\r\n+        });\r\n \r\n-        const controls = document.createElement('div');\r\n-        controls.className = 'cart-item-controls';\r\n+        this.updateSummary();\r\n+    }\r\n \r\n-        const removeBtn = document.createElement('button');\r\n-        removeBtn.className = 'remove-btn';\r\n-        removeBtn.textContent = 'Remove';\r\n-        removeBtn.addEventListener('click', () => this.removeItem(book.title));\r\n-\r\n-        controls.appendChild(removeBtn);\r\n-        cartItem.appendChild(controls);\r\n-\r\n-        cartItemsContainer.appendChild(cartItem);\r\n-    });\r\n-\r\n-    this.updateSummary();\r\n-}\r\n-\r\n-\r\n-\r\n     calculateSubtotal() {\r\n         return this.items.reduce((sum, title) => {\r\n             const book = this.booksData.find(b => b.title === title);\r\n-            return book ? sum + book.price : sum;\r\n+            return book ? sum + Number(book.price) : sum;\r\n         }, 0);\r\n     }\r\n \r\n-    calculateTax() {\r\n-        return this.calculateSubtotal() * this.taxRate;\r\n-    }\r\n+    calculateTax() { return this.calculateSubtotal() * this.taxRate; }\r\n+    calculateTotal() { return this.calculateSubtotal() + this.calculateTax() + this.shippingCost; }\r\n \r\n-    calculateTotal() {\r\n-        return this.calculateSubtotal() + this.calculateTax() + this.shippingCost;\r\n-    }\r\n-\r\n     updateSummary() {\r\n-    const subtotalEl = document.getElementById('subtotal');\r\n-    const totalEl = document.getElementById('total');\r\n-    const checkoutBtn = document.getElementById('checkout-btn');\r\n+        const subtotalEl = document.getElementById('subtotal');\r\n+        const totalEl = document.getElementById('total');\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n \r\n-    if (!this.items || this.items.length === 0) {\r\n-        if (subtotalEl) subtotalEl.textContent = `$0.00`;\r\n-        if (totalEl) totalEl.textContent = `$0.00`;\r\n-        if (checkoutBtn) checkoutBtn.disabled = true;\r\n-        return;\r\n+        const subtotal = this.calculateSubtotal();\r\n+        const total = this.calculateTotal();\r\n+\r\n+        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n+        if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n+        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n     }\r\n \r\n-    const subtotal = this.calculateSubtotal();\r\n-    const total = this.calculateTotal();\r\n-\r\n-    if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n-    if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n-    if (checkoutBtn) checkoutBtn.disabled = false;\r\n-}\r\n-\r\n     updateCartCount() {\r\n-        const cartCountEl = document.getElementById('cart-count');\r\n-        if (cartCountEl) cartCountEl.textContent = this.items.length;\r\n+        const el = document.getElementById(\"cart-count\");\r\n+        if (el) el.textContent = this.items.length;\r\n     }\r\n \r\n     showNotification(message) {\r\n-        const notification = document.createElement('div');\r\n-        notification.className = 'notification';\r\n+        const notification = document.createElement(\"div\");\r\n+        notification.className = \"notification\";\r\n         notification.textContent = message;\r\n         document.body.appendChild(notification);\r\n         setTimeout(() => notification.remove(), 3000);\r\n     }\r\n \r\n-bindEvents() {\r\n-    const clearBtn = document.getElementById('clear-cart');\r\n-    if (clearBtn) clearBtn.addEventListener('click', () => this.clearCart());\r\n+    bindEvents() {\r\n+        const clearBtn = document.getElementById(\"clear-cart\");\r\n+        if (clearBtn) clearBtn.addEventListener(\"click\", () => this.clearCart());\r\n \r\n-    const checkoutBtn = document.getElementById('checkout-btn');\r\n-    if (checkoutBtn) checkoutBtn.addEventListener('click', () => this.proceedToCheckout());\r\n+        const checkoutBtn = document.getElementById(\"checkout-btn\");\r\n+        if (checkoutBtn) checkoutBtn.addEventListener(\"click\", () => this.proceedToCheckout());\r\n \r\n-    // Add to cart buttons in recommended section\r\n-    document.addEventListener('click', e => {\r\n-        if (e.target.classList.contains('add-to-cart-btn')) {\r\n-            const title = e.target.getAttribute('data-title');\r\n-            this.addItem(title);\r\n-        }\r\n-    });\r\n+        document.addEventListener(\"click\", e => {\r\n+            if (e.target.classList.contains(\"add-to-cart-btn\")) {\r\n+                const title = e.target.dataset.title;\r\n+                this.addItem(title);\r\n+            }\r\n+        });\r\n+    }\r\n }\r\n \r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// Initialize cart\r\n-document.addEventListener('DOMContentLoaded', () => {\r\n+// Initialize\r\n+document.addEventListener(\"DOMContentLoaded\", () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n-\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1757560333231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,25 +29,26 @@\n             this.booksData = [];\r\n         }\r\n     }\r\n \r\n-    async loadUserCart() {\r\n-        if (!this.currentUserEmail) return;\r\n+async loadUserCart() {\r\n+    if (!this.currentUserEmail) return;\r\n \r\n-        try {\r\n-            const response = await fetch(\"http://127.0.0.1:5000/get-cart\", {\r\n-                method: \"POST\",\r\n-                headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify({ email: this.currentUserEmail })\r\n-            });\r\n-            const result = await response.json();\r\n-            this.items = result.cart || [];\r\n-        } catch (err) {\r\n-            console.error(\"Failed to fetch user cart:\", err);\r\n-            this.items = [];\r\n-        }\r\n+    try {\r\n+        const response = await fetch(\"http://127.0.0.1:5000/get-cart\", {\r\n+            method: \"POST\",\r\n+            headers: { \"Content-Type\": \"application/json\" },\r\n+            body: JSON.stringify({ email: this.currentUserEmail })\r\n+        });\r\n+        const result = await response.json();\r\n+        this.items = result.cart || []; // now it's an array of book objects\r\n+    } catch (err) {\r\n+        console.error(\"Failed to fetch user cart:\", err);\r\n+        this.items = [];\r\n     }\r\n+}\r\n \r\n+\r\n     async addItem(title) {\r\n         if (!this.currentUserEmail) return alert(\"Please log in first.\");\r\n         if (this.items.includes(title)) return alert(\"This book is already in your cart!\");\r\n \r\n"
                },
                {
                    "date": 1757560601615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,92 +1,78 @@\n class ShoppingCart {\r\n     constructor() {\r\n         const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n         this.currentUserEmail = currentUser?.email || null;\r\n-        this.items = [];       // titles\r\n-        this.booksData = [];   // fetch from backend\r\n+        this.items = [];       // array of book objects now\r\n         this.shippingCost = 5.99;\r\n         this.taxRate = 0.08;\r\n \r\n         this.init();\r\n     }\r\n \r\n     async init() {\r\n-        await this.loadBooksDataFromBackend();\r\n         await this.loadUserCart();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.bindEvents();\r\n     }\r\n \r\n-    // Fetch all books from backend instead of JSON\r\n-    async loadBooksDataFromBackend() {\r\n+    async loadUserCart() {\r\n+        if (!this.currentUserEmail) return;\r\n+\r\n         try {\r\n-            const response = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n-            const data = await response.json();\r\n-            this.booksData = data || [];\r\n+            const response = await fetch(\"http://127.0.0.1:5000/get-cart\", {\r\n+                method: \"POST\",\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify({ email: this.currentUserEmail })\r\n+            });\r\n+            const result = await response.json();\r\n+            this.items = result.cart || []; // cart is now full book objects\r\n         } catch (err) {\r\n-            console.error(\"Failed to load books from backend:\", err);\r\n-            this.booksData = [];\r\n+            console.error(\"Failed to fetch user cart:\", err);\r\n+            this.items = [];\r\n         }\r\n     }\r\n \r\n-async loadUserCart() {\r\n-    if (!this.currentUserEmail) return;\r\n+    async addItem(book) {\r\n+        if (!this.currentUserEmail) return alert(\"Please log in first.\");\r\n \r\n-    try {\r\n-        const response = await fetch(\"http://127.0.0.1:5000/get-cart\", {\r\n-            method: \"POST\",\r\n-            headers: { \"Content-Type\": \"application/json\" },\r\n-            body: JSON.stringify({ email: this.currentUserEmail })\r\n-        });\r\n-        const result = await response.json();\r\n-        this.items = result.cart || []; // now it's an array of book objects\r\n-    } catch (err) {\r\n-        console.error(\"Failed to fetch user cart:\", err);\r\n-        this.items = [];\r\n-    }\r\n-}\r\n+        if (this.items.some(b => b.id === book.id)) return alert(\"This book is already in your cart!\");\r\n \r\n-\r\n-    async addItem(title) {\r\n-        if (!this.currentUserEmail) return alert(\"Please log in first.\");\r\n-        if (this.items.includes(title)) return alert(\"This book is already in your cart!\");\r\n-\r\n         try {\r\n             const response = await fetch(\"http://127.0.0.1:5000/add-to-cart\", {\r\n                 method: \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify({ email: this.currentUserEmail, title })\r\n+                body: JSON.stringify({ email: this.currentUserEmail, title: book.title })\r\n             });\r\n             const result = await response.json();\r\n             if (!result.success) return alert(result.message);\r\n \r\n-            this.items.push(title);\r\n+            this.items.push(book);\r\n             this.renderCart();\r\n             this.updateCartCount();\r\n-            this.showNotification(`${title} added to cart!`);\r\n+            this.showNotification(`${book.title} added to cart!`);\r\n         } catch (err) {\r\n             console.error(\"Failed to add book:\", err);\r\n         }\r\n     }\r\n \r\n-    async removeItem(title) {\r\n+    async removeItem(bookId) {\r\n         if (!this.currentUserEmail) return;\r\n \r\n         try {\r\n             const response = await fetch(\"http://127.0.0.1:5000/remove-from-cart\", {\r\n                 method: \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify({ email: this.currentUserEmail, title })\r\n+                body: JSON.stringify({ email: this.currentUserEmail, bookId })\r\n             });\r\n             const result = await response.json();\r\n             if (!result.success) return console.warn(result.message);\r\n \r\n-            this.items = this.items.filter(item => item !== title);\r\n+            this.items = this.items.filter(item => item.id !== bookId);\r\n             this.renderCart();\r\n             this.updateCartCount();\r\n-            this.showNotification(`Removed \"${title}\" from cart`);\r\n+            this.showNotification(`Removed \"${result.removedTitle}\" from cart`);\r\n         } catch (err) {\r\n             console.error(\"Failed to remove book:\", err);\r\n         }\r\n     }\r\n@@ -113,9 +99,9 @@\n             console.error(\"Failed to clear cart:\", err);\r\n         }\r\n     }\r\n \r\n-    async renderCart() {\r\n+    renderCart() {\r\n         const container = document.getElementById(\"cart-items\");\r\n         if (!container) return;\r\n \r\n         if (!this.items.length) {\r\n@@ -128,12 +114,9 @@\n             return;\r\n         }\r\n \r\n         container.innerHTML = \"\";\r\n-        this.items.forEach(title => {\r\n-            const book = this.booksData.find(b => b.title === title);\r\n-            if (!book) return;\r\n-\r\n+        this.items.forEach(book => {\r\n             const cartItem = document.createElement(\"div\");\r\n             cartItem.className = \"cart-item\";\r\n             cartItem.innerHTML = `\r\n                 <img src=\"${book.image}\" alt=\"${book.title}\" class=\"cart-item-image\">\r\n@@ -145,12 +128,13 @@\n             `;\r\n \r\n             const controls = document.createElement(\"div\");\r\n             controls.className = \"cart-item-controls\";\r\n+\r\n             const removeBtn = document.createElement(\"button\");\r\n             removeBtn.textContent = \"Remove\";\r\n             removeBtn.className = \"remove-btn\";\r\n-            removeBtn.addEventListener(\"click\", () => this.removeItem(book.title));\r\n+            removeBtn.addEventListener(\"click\", () => this.removeItem(book.id));\r\n \r\n             controls.appendChild(removeBtn);\r\n             cartItem.appendChild(controls);\r\n             container.appendChild(cartItem);\r\n@@ -159,12 +143,9 @@\n         this.updateSummary();\r\n     }\r\n \r\n     calculateSubtotal() {\r\n-        return this.items.reduce((sum, title) => {\r\n-            const book = this.booksData.find(b => b.title === title);\r\n-            return book ? sum + Number(book.price) : sum;\r\n-        }, 0);\r\n+        return this.items.reduce((sum, book) => sum + Number(book.price), 0);\r\n     }\r\n \r\n     calculateTax() { return this.calculateSubtotal() * this.taxRate; }\r\n     calculateTotal() { return this.calculateSubtotal() + this.calculateTax() + this.shippingCost; }\r\n@@ -203,15 +184,15 @@\n         if (checkoutBtn) checkoutBtn.addEventListener(\"click\", () => this.proceedToCheckout());\r\n \r\n         document.addEventListener(\"click\", e => {\r\n             if (e.target.classList.contains(\"add-to-cart-btn\")) {\r\n-                const title = e.target.dataset.title;\r\n-                this.addItem(title);\r\n+                const bookId = e.target.dataset.id;\r\n+                const book = this.booksData.find(b => b.id == bookId);\r\n+                if (book) this.addItem(book);\r\n             }\r\n         });\r\n     }\r\n }\r\n \r\n-// Initialize\r\n document.addEventListener(\"DOMContentLoaded\", () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1757560673283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,36 @@\n class ShoppingCart {\r\n     constructor() {\r\n         const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n         this.currentUserEmail = currentUser?.email || null;\r\n-        this.items = [];       // array of book objects now\r\n+        this.items = [];       // titles\r\n+        this.booksData = [];   // fetch from backend\r\n         this.shippingCost = 5.99;\r\n         this.taxRate = 0.08;\r\n \r\n         this.init();\r\n     }\r\n \r\n     async init() {\r\n+        await this.loadBooksDataFromBackend();\r\n         await this.loadUserCart();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.bindEvents();\r\n     }\r\n \r\n+    // Fetch all books from backend instead of JSON\r\n+    async loadBooksDataFromBackend() {\r\n+        try {\r\n+            const response = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n+            const data = await response.json();\r\n+            this.booksData = data || [];\r\n+        } catch (err) {\r\n+            console.error(\"Failed to load books from backend:\", err);\r\n+            this.booksData = [];\r\n+        }\r\n+    }\r\n+\r\n     async loadUserCart() {\r\n         if (!this.currentUserEmail) return;\r\n \r\n         try {\r\n@@ -25,54 +39,54 @@\n                 headers: { \"Content-Type\": \"application/json\" },\r\n                 body: JSON.stringify({ email: this.currentUserEmail })\r\n             });\r\n             const result = await response.json();\r\n-            this.items = result.cart || []; // cart is now full book objects\r\n+            this.items = result.cart || []; // now it's an array of book objects\r\n         } catch (err) {\r\n             console.error(\"Failed to fetch user cart:\", err);\r\n             this.items = [];\r\n         }\r\n     }\r\n \r\n-    async addItem(book) {\r\n+\r\n+    async addItem(title) {\r\n         if (!this.currentUserEmail) return alert(\"Please log in first.\");\r\n+        if (this.items.includes(title)) return alert(\"This book is already in your cart!\");\r\n \r\n-        if (this.items.some(b => b.id === book.id)) return alert(\"This book is already in your cart!\");\r\n-\r\n         try {\r\n             const response = await fetch(\"http://127.0.0.1:5000/add-to-cart\", {\r\n                 method: \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify({ email: this.currentUserEmail, title: book.title })\r\n+                body: JSON.stringify({ email: this.currentUserEmail, title })\r\n             });\r\n             const result = await response.json();\r\n             if (!result.success) return alert(result.message);\r\n \r\n-            this.items.push(book);\r\n+            this.items.push(title);\r\n             this.renderCart();\r\n             this.updateCartCount();\r\n-            this.showNotification(`${book.title} added to cart!`);\r\n+            this.showNotification(`${title} added to cart!`);\r\n         } catch (err) {\r\n             console.error(\"Failed to add book:\", err);\r\n         }\r\n     }\r\n \r\n-    async removeItem(bookId) {\r\n+    async removeItem(title) {\r\n         if (!this.currentUserEmail) return;\r\n \r\n         try {\r\n             const response = await fetch(\"http://127.0.0.1:5000/remove-from-cart\", {\r\n                 method: \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify({ email: this.currentUserEmail, bookId })\r\n+                body: JSON.stringify({ email: this.currentUserEmail, title })\r\n             });\r\n             const result = await response.json();\r\n             if (!result.success) return console.warn(result.message);\r\n \r\n-            this.items = this.items.filter(item => item.id !== bookId);\r\n+            this.items = this.items.filter(item => item !== title);\r\n             this.renderCart();\r\n             this.updateCartCount();\r\n-            this.showNotification(`Removed \"${result.removedTitle}\" from cart`);\r\n+            this.showNotification(`Removed \"${title}\" from cart`);\r\n         } catch (err) {\r\n             console.error(\"Failed to remove book:\", err);\r\n         }\r\n     }\r\n@@ -99,9 +113,9 @@\n             console.error(\"Failed to clear cart:\", err);\r\n         }\r\n     }\r\n \r\n-    renderCart() {\r\n+    async renderCart() {\r\n         const container = document.getElementById(\"cart-items\");\r\n         if (!container) return;\r\n \r\n         if (!this.items.length) {\r\n@@ -114,9 +128,12 @@\n             return;\r\n         }\r\n \r\n         container.innerHTML = \"\";\r\n-        this.items.forEach(book => {\r\n+        this.items.forEach(title => {\r\n+            const book = this.booksData.find(b => b.title === title);\r\n+            if (!book) return;\r\n+\r\n             const cartItem = document.createElement(\"div\");\r\n             cartItem.className = \"cart-item\";\r\n             cartItem.innerHTML = `\r\n                 <img src=\"${book.image}\" alt=\"${book.title}\" class=\"cart-item-image\">\r\n@@ -128,13 +145,12 @@\n             `;\r\n \r\n             const controls = document.createElement(\"div\");\r\n             controls.className = \"cart-item-controls\";\r\n-\r\n             const removeBtn = document.createElement(\"button\");\r\n             removeBtn.textContent = \"Remove\";\r\n             removeBtn.className = \"remove-btn\";\r\n-            removeBtn.addEventListener(\"click\", () => this.removeItem(book.id));\r\n+            removeBtn.addEventListener(\"click\", () => this.removeItem(book.title));\r\n \r\n             controls.appendChild(removeBtn);\r\n             cartItem.appendChild(controls);\r\n             container.appendChild(cartItem);\r\n@@ -143,9 +159,12 @@\n         this.updateSummary();\r\n     }\r\n \r\n     calculateSubtotal() {\r\n-        return this.items.reduce((sum, book) => sum + Number(book.price), 0);\r\n+        return this.items.reduce((sum, title) => {\r\n+            const book = this.booksData.find(b => b.title === title);\r\n+            return book ? sum + Number(book.price) : sum;\r\n+        }, 0);\r\n     }\r\n \r\n     calculateTax() { return this.calculateSubtotal() * this.taxRate; }\r\n     calculateTotal() { return this.calculateSubtotal() + this.calculateTax() + this.shippingCost; }\r\n@@ -184,15 +203,15 @@\n         if (checkoutBtn) checkoutBtn.addEventListener(\"click\", () => this.proceedToCheckout());\r\n \r\n         document.addEventListener(\"click\", e => {\r\n             if (e.target.classList.contains(\"add-to-cart-btn\")) {\r\n-                const bookId = e.target.dataset.id;\r\n-                const book = this.booksData.find(b => b.id == bookId);\r\n-                if (book) this.addItem(book);\r\n+                const title = e.target.dataset.title;\r\n+                this.addItem(title);\r\n             }\r\n         });\r\n     }\r\n }\r\n \r\n+// Initialize\r\n document.addEventListener(\"DOMContentLoaded\", () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1757560707463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,22 @@\n class ShoppingCart {\r\n     constructor() {\r\n         const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n         this.currentUserEmail = currentUser?.email || null;\r\n-        this.items = [];       // titles\r\n-        this.booksData = [];   // fetch from backend\r\n+        this.items = [];       // array of book objects now\r\n         this.shippingCost = 5.99;\r\n         this.taxRate = 0.08;\r\n \r\n         this.init();\r\n     }\r\n \r\n     async init() {\r\n-        await this.loadBooksDataFromBackend();\r\n         await this.loadUserCart();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.bindEvents();\r\n     }\r\n \r\n-    // Fetch all books from backend instead of JSON\r\n-    async loadBooksDataFromBackend() {\r\n-        try {\r\n-            const response = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n-            const data = await response.json();\r\n-            this.booksData = data || [];\r\n-        } catch (err) {\r\n-            console.error(\"Failed to load books from backend:\", err);\r\n-            this.booksData = [];\r\n-        }\r\n-    }\r\n-\r\n     async loadUserCart() {\r\n         if (!this.currentUserEmail) return;\r\n \r\n         try {\r\n@@ -39,54 +25,54 @@\n                 headers: { \"Content-Type\": \"application/json\" },\r\n                 body: JSON.stringify({ email: this.currentUserEmail })\r\n             });\r\n             const result = await response.json();\r\n-            this.items = result.cart || []; // now it's an array of book objects\r\n+            this.items = result.cart || []; // cart is now full book objects\r\n         } catch (err) {\r\n             console.error(\"Failed to fetch user cart:\", err);\r\n             this.items = [];\r\n         }\r\n     }\r\n \r\n-\r\n-    async addItem(title) {\r\n+    async addItem(book) {\r\n         if (!this.currentUserEmail) return alert(\"Please log in first.\");\r\n-        if (this.items.includes(title)) return alert(\"This book is already in your cart!\");\r\n \r\n+        if (this.items.some(b => b.id === book.id)) return alert(\"This book is already in your cart!\");\r\n+\r\n         try {\r\n             const response = await fetch(\"http://127.0.0.1:5000/add-to-cart\", {\r\n                 method: \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify({ email: this.currentUserEmail, title })\r\n+                body: JSON.stringify({ email: this.currentUserEmail, title: book.title })\r\n             });\r\n             const result = await response.json();\r\n             if (!result.success) return alert(result.message);\r\n \r\n-            this.items.push(title);\r\n+            this.items.push(book);\r\n             this.renderCart();\r\n             this.updateCartCount();\r\n-            this.showNotification(`${title} added to cart!`);\r\n+            this.showNotification(`${book.title} added to cart!`);\r\n         } catch (err) {\r\n             console.error(\"Failed to add book:\", err);\r\n         }\r\n     }\r\n \r\n-    async removeItem(title) {\r\n+    async removeItem(bookId) {\r\n         if (!this.currentUserEmail) return;\r\n \r\n         try {\r\n             const response = await fetch(\"http://127.0.0.1:5000/remove-from-cart\", {\r\n                 method: \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify({ email: this.currentUserEmail, title })\r\n+                body: JSON.stringify({ email: this.currentUserEmail, bookId })\r\n             });\r\n             const result = await response.json();\r\n             if (!result.success) return console.warn(result.message);\r\n \r\n-            this.items = this.items.filter(item => item !== title);\r\n+            this.items = this.items.filter(item => item.id !== bookId);\r\n             this.renderCart();\r\n             this.updateCartCount();\r\n-            this.showNotification(`Removed \"${title}\" from cart`);\r\n+            this.showNotification(`Removed \"${result.removedTitle}\" from cart`);\r\n         } catch (err) {\r\n             console.error(\"Failed to remove book:\", err);\r\n         }\r\n     }\r\n@@ -113,9 +99,9 @@\n             console.error(\"Failed to clear cart:\", err);\r\n         }\r\n     }\r\n \r\n-    async renderCart() {\r\n+    renderCart() {\r\n         const container = document.getElementById(\"cart-items\");\r\n         if (!container) return;\r\n \r\n         if (!this.items.length) {\r\n@@ -128,12 +114,9 @@\n             return;\r\n         }\r\n \r\n         container.innerHTML = \"\";\r\n-        this.items.forEach(title => {\r\n-            const book = this.booksData.find(b => b.title === title);\r\n-            if (!book) return;\r\n-\r\n+        this.items.forEach(book => {\r\n             const cartItem = document.createElement(\"div\");\r\n             cartItem.className = \"cart-item\";\r\n             cartItem.innerHTML = `\r\n                 <img src=\"${book.image}\" alt=\"${book.title}\" class=\"cart-item-image\">\r\n@@ -145,12 +128,13 @@\n             `;\r\n \r\n             const controls = document.createElement(\"div\");\r\n             controls.className = \"cart-item-controls\";\r\n+\r\n             const removeBtn = document.createElement(\"button\");\r\n             removeBtn.textContent = \"Remove\";\r\n             removeBtn.className = \"remove-btn\";\r\n-            removeBtn.addEventListener(\"click\", () => this.removeItem(book.title));\r\n+            removeBtn.addEventListener(\"click\", () => this.removeItem(book.id));\r\n \r\n             controls.appendChild(removeBtn);\r\n             cartItem.appendChild(controls);\r\n             container.appendChild(cartItem);\r\n@@ -159,12 +143,9 @@\n         this.updateSummary();\r\n     }\r\n \r\n     calculateSubtotal() {\r\n-        return this.items.reduce((sum, title) => {\r\n-            const book = this.booksData.find(b => b.title === title);\r\n-            return book ? sum + Number(book.price) : sum;\r\n-        }, 0);\r\n+        return this.items.reduce((sum, book) => sum + Number(book.price), 0);\r\n     }\r\n \r\n     calculateTax() { return this.calculateSubtotal() * this.taxRate; }\r\n     calculateTotal() { return this.calculateSubtotal() + this.calculateTax() + this.shippingCost; }\r\n@@ -203,15 +184,15 @@\n         if (checkoutBtn) checkoutBtn.addEventListener(\"click\", () => this.proceedToCheckout());\r\n \r\n         document.addEventListener(\"click\", e => {\r\n             if (e.target.classList.contains(\"add-to-cart-btn\")) {\r\n-                const title = e.target.dataset.title;\r\n-                this.addItem(title);\r\n+                const bookId = e.target.dataset.id;\r\n+                const book = this.booksData.find(b => b.id == bookId);\r\n+                if (book) this.addItem(book);\r\n             }\r\n         });\r\n     }\r\n }\r\n \r\n-// Initialize\r\n document.addEventListener(\"DOMContentLoaded\", () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1757560851716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,36 @@\n class ShoppingCart {\r\n     constructor() {\r\n         const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n         this.currentUserEmail = currentUser?.email || null;\r\n-        this.items = [];       // array of book objects now\r\n+        this.items = [];       // titles\r\n+        this.booksData = [];   // fetch from backend\r\n         this.shippingCost = 5.99;\r\n         this.taxRate = 0.08;\r\n \r\n         this.init();\r\n     }\r\n \r\n     async init() {\r\n+        await this.loadBooksDataFromBackend();\r\n         await this.loadUserCart();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.bindEvents();\r\n     }\r\n \r\n+    // Fetch all books from backend instead of JSON\r\n+    async loadBooksDataFromBackend() {\r\n+        try {\r\n+            const response = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n+            const data = await response.json();\r\n+            this.booksData = data || [];\r\n+        } catch (err) {\r\n+            console.error(\"Failed to load books from backend:\", err);\r\n+            this.booksData = [];\r\n+        }\r\n+    }\r\n+\r\n     async loadUserCart() {\r\n         if (!this.currentUserEmail) return;\r\n \r\n         try {\r\n@@ -25,54 +39,54 @@\n                 headers: { \"Content-Type\": \"application/json\" },\r\n                 body: JSON.stringify({ email: this.currentUserEmail })\r\n             });\r\n             const result = await response.json();\r\n-            this.items = result.cart || []; // cart is now full book objects\r\n+            this.items = result.cart || []; // now it's an array of book objects\r\n         } catch (err) {\r\n             console.error(\"Failed to fetch user cart:\", err);\r\n             this.items = [];\r\n         }\r\n     }\r\n \r\n-    async addItem(book) {\r\n+\r\n+    async addItem(title) {\r\n         if (!this.currentUserEmail) return alert(\"Please log in first.\");\r\n+        if (this.items.includes(title)) return alert(\"This book is already in your cart!\");\r\n \r\n-        if (this.items.some(b => b.id === book.id)) return alert(\"This book is already in your cart!\");\r\n-\r\n         try {\r\n             const response = await fetch(\"http://127.0.0.1:5000/add-to-cart\", {\r\n                 method: \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify({ email: this.currentUserEmail, title: book.title })\r\n+                body: JSON.stringify({ email: this.currentUserEmail, title })\r\n             });\r\n             const result = await response.json();\r\n             if (!result.success) return alert(result.message);\r\n \r\n-            this.items.push(book);\r\n+            this.items.push(title);\r\n             this.renderCart();\r\n             this.updateCartCount();\r\n-            this.showNotification(`${book.title} added to cart!`);\r\n+            this.showNotification(`${title} added to cart!`);\r\n         } catch (err) {\r\n             console.error(\"Failed to add book:\", err);\r\n         }\r\n     }\r\n \r\n-    async removeItem(bookId) {\r\n+    async removeItem(title) {\r\n         if (!this.currentUserEmail) return;\r\n \r\n         try {\r\n             const response = await fetch(\"http://127.0.0.1:5000/remove-from-cart\", {\r\n                 method: \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify({ email: this.currentUserEmail, bookId })\r\n+                body: JSON.stringify({ email: this.currentUserEmail, title })\r\n             });\r\n             const result = await response.json();\r\n             if (!result.success) return console.warn(result.message);\r\n \r\n-            this.items = this.items.filter(item => item.id !== bookId);\r\n+            this.items = this.items.filter(item => item !== title);\r\n             this.renderCart();\r\n             this.updateCartCount();\r\n-            this.showNotification(`Removed \"${result.removedTitle}\" from cart`);\r\n+            this.showNotification(`Removed \"${title}\" from cart`);\r\n         } catch (err) {\r\n             console.error(\"Failed to remove book:\", err);\r\n         }\r\n     }\r\n@@ -99,9 +113,9 @@\n             console.error(\"Failed to clear cart:\", err);\r\n         }\r\n     }\r\n \r\n-    renderCart() {\r\n+    async renderCart() {\r\n         const container = document.getElementById(\"cart-items\");\r\n         if (!container) return;\r\n \r\n         if (!this.items.length) {\r\n@@ -114,9 +128,12 @@\n             return;\r\n         }\r\n \r\n         container.innerHTML = \"\";\r\n-        this.items.forEach(book => {\r\n+        this.items.forEach(title => {\r\n+            const book = this.booksData.find(b => b.title === title);\r\n+            if (!book) return;\r\n+\r\n             const cartItem = document.createElement(\"div\");\r\n             cartItem.className = \"cart-item\";\r\n             cartItem.innerHTML = `\r\n                 <img src=\"${book.image}\" alt=\"${book.title}\" class=\"cart-item-image\">\r\n@@ -128,13 +145,12 @@\n             `;\r\n \r\n             const controls = document.createElement(\"div\");\r\n             controls.className = \"cart-item-controls\";\r\n-\r\n             const removeBtn = document.createElement(\"button\");\r\n             removeBtn.textContent = \"Remove\";\r\n             removeBtn.className = \"remove-btn\";\r\n-            removeBtn.addEventListener(\"click\", () => this.removeItem(book.id));\r\n+            removeBtn.addEventListener(\"click\", () => this.removeItem(book.title));\r\n \r\n             controls.appendChild(removeBtn);\r\n             cartItem.appendChild(controls);\r\n             container.appendChild(cartItem);\r\n@@ -143,9 +159,12 @@\n         this.updateSummary();\r\n     }\r\n \r\n     calculateSubtotal() {\r\n-        return this.items.reduce((sum, book) => sum + Number(book.price), 0);\r\n+        return this.items.reduce((sum, title) => {\r\n+            const book = this.booksData.find(b => b.title === title);\r\n+            return book ? sum + Number(book.price) : sum;\r\n+        }, 0);\r\n     }\r\n \r\n     calculateTax() { return this.calculateSubtotal() * this.taxRate; }\r\n     calculateTotal() { return this.calculateSubtotal() + this.calculateTax() + this.shippingCost; }\r\n@@ -184,15 +203,15 @@\n         if (checkoutBtn) checkoutBtn.addEventListener(\"click\", () => this.proceedToCheckout());\r\n \r\n         document.addEventListener(\"click\", e => {\r\n             if (e.target.classList.contains(\"add-to-cart-btn\")) {\r\n-                const bookId = e.target.dataset.id;\r\n-                const book = this.booksData.find(b => b.id == bookId);\r\n-                if (book) this.addItem(book);\r\n+                const title = e.target.dataset.title;\r\n+                this.addItem(title);\r\n             }\r\n         });\r\n     }\r\n }\r\n \r\n+// Initialize\r\n document.addEventListener(\"DOMContentLoaded\", () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1757560857026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,22 @@\n class ShoppingCart {\r\n     constructor() {\r\n         const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n         this.currentUserEmail = currentUser?.email || null;\r\n-        this.items = [];       // titles\r\n-        this.booksData = [];   // fetch from backend\r\n+        this.items = [];       // array of book objects now\r\n         this.shippingCost = 5.99;\r\n         this.taxRate = 0.08;\r\n \r\n         this.init();\r\n     }\r\n \r\n     async init() {\r\n-        await this.loadBooksDataFromBackend();\r\n         await this.loadUserCart();\r\n         this.renderCart();\r\n         this.updateCartCount();\r\n         this.bindEvents();\r\n     }\r\n \r\n-    // Fetch all books from backend instead of JSON\r\n-    async loadBooksDataFromBackend() {\r\n-        try {\r\n-            const response = await fetch(\"http://127.0.0.1:5000/get-books\");\r\n-            const data = await response.json();\r\n-            this.booksData = data || [];\r\n-        } catch (err) {\r\n-            console.error(\"Failed to load books from backend:\", err);\r\n-            this.booksData = [];\r\n-        }\r\n-    }\r\n-\r\n     async loadUserCart() {\r\n         if (!this.currentUserEmail) return;\r\n \r\n         try {\r\n@@ -39,54 +25,54 @@\n                 headers: { \"Content-Type\": \"application/json\" },\r\n                 body: JSON.stringify({ email: this.currentUserEmail })\r\n             });\r\n             const result = await response.json();\r\n-            this.items = result.cart || []; // now it's an array of book objects\r\n+            this.items = result.cart || []; // cart is now full book objects\r\n         } catch (err) {\r\n             console.error(\"Failed to fetch user cart:\", err);\r\n             this.items = [];\r\n         }\r\n     }\r\n \r\n-\r\n-    async addItem(title) {\r\n+    async addItem(book) {\r\n         if (!this.currentUserEmail) return alert(\"Please log in first.\");\r\n-        if (this.items.includes(title)) return alert(\"This book is already in your cart!\");\r\n \r\n+        if (this.items.some(b => b.id === book.id)) return alert(\"This book is already in your cart!\");\r\n+\r\n         try {\r\n             const response = await fetch(\"http://127.0.0.1:5000/add-to-cart\", {\r\n                 method: \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify({ email: this.currentUserEmail, title })\r\n+                body: JSON.stringify({ email: this.currentUserEmail, title: book.title })\r\n             });\r\n             const result = await response.json();\r\n             if (!result.success) return alert(result.message);\r\n \r\n-            this.items.push(title);\r\n+            this.items.push(book);\r\n             this.renderCart();\r\n             this.updateCartCount();\r\n-            this.showNotification(`${title} added to cart!`);\r\n+            this.showNotification(`${book.title} added to cart!`);\r\n         } catch (err) {\r\n             console.error(\"Failed to add book:\", err);\r\n         }\r\n     }\r\n \r\n-    async removeItem(title) {\r\n+    async removeItem(bookId) {\r\n         if (!this.currentUserEmail) return;\r\n \r\n         try {\r\n             const response = await fetch(\"http://127.0.0.1:5000/remove-from-cart\", {\r\n                 method: \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify({ email: this.currentUserEmail, title })\r\n+                body: JSON.stringify({ email: this.currentUserEmail, bookId })\r\n             });\r\n             const result = await response.json();\r\n             if (!result.success) return console.warn(result.message);\r\n \r\n-            this.items = this.items.filter(item => item !== title);\r\n+            this.items = this.items.filter(item => item.id !== bookId);\r\n             this.renderCart();\r\n             this.updateCartCount();\r\n-            this.showNotification(`Removed \"${title}\" from cart`);\r\n+            this.showNotification(`Removed \"${result.removedTitle}\" from cart`);\r\n         } catch (err) {\r\n             console.error(\"Failed to remove book:\", err);\r\n         }\r\n     }\r\n@@ -113,9 +99,9 @@\n             console.error(\"Failed to clear cart:\", err);\r\n         }\r\n     }\r\n \r\n-    async renderCart() {\r\n+    renderCart() {\r\n         const container = document.getElementById(\"cart-items\");\r\n         if (!container) return;\r\n \r\n         if (!this.items.length) {\r\n@@ -128,12 +114,9 @@\n             return;\r\n         }\r\n \r\n         container.innerHTML = \"\";\r\n-        this.items.forEach(title => {\r\n-            const book = this.booksData.find(b => b.title === title);\r\n-            if (!book) return;\r\n-\r\n+        this.items.forEach(book => {\r\n             const cartItem = document.createElement(\"div\");\r\n             cartItem.className = \"cart-item\";\r\n             cartItem.innerHTML = `\r\n                 <img src=\"${book.image}\" alt=\"${book.title}\" class=\"cart-item-image\">\r\n@@ -145,12 +128,13 @@\n             `;\r\n \r\n             const controls = document.createElement(\"div\");\r\n             controls.className = \"cart-item-controls\";\r\n+\r\n             const removeBtn = document.createElement(\"button\");\r\n             removeBtn.textContent = \"Remove\";\r\n             removeBtn.className = \"remove-btn\";\r\n-            removeBtn.addEventListener(\"click\", () => this.removeItem(book.title));\r\n+            removeBtn.addEventListener(\"click\", () => this.removeItem(book.id));\r\n \r\n             controls.appendChild(removeBtn);\r\n             cartItem.appendChild(controls);\r\n             container.appendChild(cartItem);\r\n@@ -159,12 +143,9 @@\n         this.updateSummary();\r\n     }\r\n \r\n     calculateSubtotal() {\r\n-        return this.items.reduce((sum, title) => {\r\n-            const book = this.booksData.find(b => b.title === title);\r\n-            return book ? sum + Number(book.price) : sum;\r\n-        }, 0);\r\n+        return this.items.reduce((sum, book) => sum + Number(book.price), 0);\r\n     }\r\n \r\n     calculateTax() { return this.calculateSubtotal() * this.taxRate; }\r\n     calculateTotal() { return this.calculateSubtotal() + this.calculateTax() + this.shippingCost; }\r\n@@ -203,15 +184,15 @@\n         if (checkoutBtn) checkoutBtn.addEventListener(\"click\", () => this.proceedToCheckout());\r\n \r\n         document.addEventListener(\"click\", e => {\r\n             if (e.target.classList.contains(\"add-to-cart-btn\")) {\r\n-                const title = e.target.dataset.title;\r\n-                this.addItem(title);\r\n+                const bookId = e.target.dataset.id;\r\n+                const book = this.booksData.find(b => b.id == bookId);\r\n+                if (book) this.addItem(book);\r\n             }\r\n         });\r\n     }\r\n }\r\n \r\n-// Initialize\r\n document.addEventListener(\"DOMContentLoaded\", () => {\r\n     window.cart = new ShoppingCart();\r\n });\r\n"
                },
                {
                    "date": 1757561114571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,21 +149,28 @@\n \r\n     calculateTax() { return this.calculateSubtotal() * this.taxRate; }\r\n     calculateTotal() { return this.calculateSubtotal() + this.calculateTax() + this.shippingCost; }\r\n \r\n-    updateSummary() {\r\n-        const subtotalEl = document.getElementById('subtotal');\r\n-        const totalEl = document.getElementById('total');\r\n-        const checkoutBtn = document.getElementById('checkout-btn');\r\n+updateSummary() {\r\n+    const subtotalEl = document.getElementById('subtotal');\r\n+    const totalEl = document.getElementById('total');\r\n+    const checkoutBtn = document.getElementById('checkout-btn');\r\n \r\n-        const subtotal = this.calculateSubtotal();\r\n-        const total = this.calculateTotal();\r\n-\r\n-        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n-        if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n-        if (checkoutBtn) checkoutBtn.disabled = this.items.length === 0;\r\n+    if (!this.items || this.items.length === 0) {\r\n+        if (subtotalEl) subtotalEl.textContent = \"$0.00\";\r\n+        if (totalEl) totalEl.textContent = \"$0.00\";\r\n+        if (checkoutBtn) checkoutBtn.disabled = true;\r\n+        return;\r\n     }\r\n \r\n+    const subtotal = this.calculateSubtotal();\r\n+    const total = this.calculateTotal();\r\n+\r\n+    if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n+    if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n+    if (checkoutBtn) checkoutBtn.disabled = false;\r\n+}\r\n+\r\n     updateCartCount() {\r\n         const el = document.getElementById(\"cart-count\");\r\n         if (el) el.textContent = this.items.length;\r\n     }\r\n"
                },
                {
                    "date": 1757561384871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,27 +149,27 @@\n \r\n     calculateTax() { return this.calculateSubtotal() * this.taxRate; }\r\n     calculateTotal() { return this.calculateSubtotal() + this.calculateTax() + this.shippingCost; }\r\n \r\n-updateSummary() {\r\n-    const subtotalEl = document.getElementById('subtotal');\r\n-    const totalEl = document.getElementById('total');\r\n-    const checkoutBtn = document.getElementById('checkout-btn');\r\n+    updateSummary() {\r\n+        const subtotalEl = document.getElementById('subtotal');\r\n+        const totalEl = document.getElementById('total');\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n \r\n-    if (!this.items || this.items.length === 0) {\r\n-        if (subtotalEl) subtotalEl.textContent = \"$0.00\";\r\n-        if (totalEl) totalEl.textContent = \"$0.00\";\r\n-        if (checkoutBtn) checkoutBtn.disabled = true;\r\n-        return;\r\n-    }\r\n+        if (!this.items || this.items.length === 0) {\r\n+            if (subtotalEl) subtotalEl.textContent = \"$0.00\";\r\n+            if (totalEl) totalEl.textContent = \"$0.00\";\r\n+            if (checkoutBtn) checkoutBtn.disabled = true;\r\n+            return;\r\n+        }\r\n \r\n-    const subtotal = this.calculateSubtotal();\r\n-    const total = this.calculateTotal();\r\n+        const subtotal = this.calculateSubtotal();\r\n+        const total = this.calculateTotal();\r\n \r\n-    if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n-    if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n-    if (checkoutBtn) checkoutBtn.disabled = false;\r\n-}\r\n+        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n+        if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n+        if (checkoutBtn) checkoutBtn.disabled = false;\r\n+    }\r\n \r\n     updateCartCount() {\r\n         const el = document.getElementById(\"cart-count\");\r\n         if (el) el.textContent = this.items.length;\r\n@@ -183,11 +183,15 @@\n         setTimeout(() => notification.remove(), 3000);\r\n     }\r\n \r\n     bindEvents() {\r\n-        const clearBtn = document.getElementById(\"clear-cart\");\r\n-        if (clearBtn) clearBtn.addEventListener(\"click\", () => this.clearCart());\r\n-\r\n+           const clearBtn = document.getElementById(\"clear-cart\");\r\n+    if (clearBtn) {\r\n+        clearBtn.addEventListener(\"click\", (e) => {\r\n+            e.preventDefault(); // ✅ prevent default form/button behavior\r\n+            this.clearCart();\r\n+        });\r\n+    }\r\n         const checkoutBtn = document.getElementById(\"checkout-btn\");\r\n         if (checkoutBtn) checkoutBtn.addEventListener(\"click\", () => this.proceedToCheckout());\r\n \r\n         document.addEventListener(\"click\", e => {\r\n"
                },
                {
                    "date": 1757561430915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,12 +183,15 @@\n         setTimeout(() => notification.remove(), 3000);\r\n     }\r\n \r\n     bindEvents() {\r\n-           const clearBtn = document.getElementById(\"clear-cart\");\r\n+        const clearBtn = document.getElementById(\"clear-cart\");\r\n     if (clearBtn) {\r\n-        clearBtn.addEventListener(\"click\", (e) => {\r\n-            e.preventDefault(); // ✅ prevent default form/button behavior\r\n+        // Remove all existing click listeners first\r\n+        clearBtn.replaceWith(clearBtn.cloneNode(true));\r\n+        const newClearBtn = document.getElementById(\"clear-cart\");\r\n+        newClearBtn.addEventListener(\"click\", (e) => {\r\n+            e.preventDefault();\r\n             this.clearCart();\r\n         });\r\n     }\r\n         const checkoutBtn = document.getElementById(\"checkout-btn\");\r\n"
                },
                {
                    "date": 1757562997082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,8 +99,60 @@\n             console.error(\"Failed to clear cart:\", err);\r\n         }\r\n     }\r\n \r\n+    proceedToCheckout() {\r\n+    if (!this.items || this.items.length === 0) {\r\n+        this.showNotification(\"Your cart is empty. Cannot proceed to checkout.\");\r\n+        return;\r\n+    }\r\n+\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (!paypalContainer) return;\r\n+\r\n+    paypalContainer.style.display = \"flex\";\r\n+    paypalContainer.innerHTML = \"\"; // clear old buttons\r\n+\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: {\r\n+                        value: this.calculateTotal().toFixed(2)\r\n+                    }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: (data, actions) => {\r\n+            return actions.order.capture().then(details => {\r\n+                alert(`Transaction completed by ${details.payer.name.given_name}`);\r\n+\r\n+                // Clear cart after payment\r\n+                this.items = [];\r\n+                this.renderCart();\r\n+                this.updateCartCount();\r\n+                this.updateTotalIfEmpty();\r\n+\r\n+                // Hide PayPal buttons\r\n+                paypalContainer.style.display = \"none\";\r\n+\r\n+                // Redirect to thank you page\r\n+                window.location.href = \"thank you.html\";\r\n+            });\r\n+        },\r\n+        onCancel: () => {\r\n+            this.showNotification(\"Payment cancelled.\");\r\n+            paypalContainer.style.display = \"none\";\r\n+        },\r\n+        onError: (err) => {\r\n+            console.error(\"PayPal Error:\", err);\r\n+            this.showNotification(\"Payment failed. Please try again.\");\r\n+            paypalContainer.style.display = \"none\";\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n+}\r\n+\r\n+\r\n     renderCart() {\r\n         const container = document.getElementById(\"cart-items\");\r\n         if (!container) return;\r\n \r\n@@ -184,17 +236,17 @@\n     }\r\n \r\n     bindEvents() {\r\n         const clearBtn = document.getElementById(\"clear-cart\");\r\n-    if (clearBtn) {\r\n-        // Remove all existing click listeners first\r\n-        clearBtn.replaceWith(clearBtn.cloneNode(true));\r\n-        const newClearBtn = document.getElementById(\"clear-cart\");\r\n-        newClearBtn.addEventListener(\"click\", (e) => {\r\n-            e.preventDefault();\r\n-            this.clearCart();\r\n-        });\r\n-    }\r\n+        if (clearBtn) {\r\n+            // Remove all existing click listeners first\r\n+            clearBtn.replaceWith(clearBtn.cloneNode(true));\r\n+            const newClearBtn = document.getElementById(\"clear-cart\");\r\n+            newClearBtn.addEventListener(\"click\", (e) => {\r\n+                e.preventDefault();\r\n+                this.clearCart();\r\n+            });\r\n+        }\r\n         const checkoutBtn = document.getElementById(\"checkout-btn\");\r\n         if (checkoutBtn) checkoutBtn.addEventListener(\"click\", () => this.proceedToCheckout());\r\n \r\n         document.addEventListener(\"click\", e => {\r\n"
                },
                {
                    "date": 1757563054786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,6 +234,6 @@\n         document.body.appendChild(notification);\r\n         setTimeout(() => notification.remove(), 3000);\r\n     }\r\n \r\n-    ShoppingCart();\r\n+   ();\r\n });\r\n"
                },
                {
                    "date": 1757565226508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,274 @@\n+class ShoppingCart {\r\n+    constructor() {\r\n+        const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n+        this.currentUserEmail = currentUser?.email || null;\r\n+        this.items = [];       // array of book objects now\r\n+        this.shippingCost = 5.99;\r\n+        this.taxRate = 0.08;\r\n+\r\n+        this.init();\r\n+    }\r\n+\r\n+    async init() {\r\n+        await this.loadUserCart();\r\n+        this.renderCart();\r\n+        this.updateCartCount();\r\n+        this.bindEvents();\r\n+    }\r\n+\r\n+    async loadUserCart() {\r\n+        if (!this.currentUserEmail) return;\r\n+\r\n+        try {\r\n+            const response = await fetch(\"http://127.0.0.1:5000/get-cart\", {\r\n+                method: \"POST\",\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify({ email: this.currentUserEmail })\r\n+            });\r\n+            const result = await response.json();\r\n+            this.items = result.cart || []; // cart is now full book objects\r\n+        } catch (err) {\r\n+            console.error(\"Failed to fetch user cart:\", err);\r\n+            this.items = [];\r\n+        }\r\n+    }\r\n+\r\n+    async addItem(book) {\r\n+        if (!this.currentUserEmail) return alert(\"Please log in first.\");\r\n+\r\n+        if (this.items.some(b => b.id === book.id)) return alert(\"This book is already in your cart!\");\r\n+\r\n+        try {\r\n+            const response = await fetch(\"http://127.0.0.1:5000/add-to-cart\", {\r\n+                method: \"POST\",\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify({ email: this.currentUserEmail, title: book.title })\r\n+            });\r\n+            const result = await response.json();\r\n+            if (!result.success) return alert(result.message);\r\n+\r\n+            this.items.push(book);\r\n+            this.renderCart();\r\n+            this.updateCartCount();\r\n+            this.showNotification(`${book.title} added to cart!`);\r\n+        } catch (err) {\r\n+            console.error(\"Failed to add book:\", err);\r\n+        }\r\n+    }\r\n+\r\n+    async removeItem(bookId) {\r\n+        if (!this.currentUserEmail) return;\r\n+\r\n+        try {\r\n+            const response = await fetch(\"http://127.0.0.1:5000/remove-from-cart\", {\r\n+                method: \"POST\",\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify({ email: this.currentUserEmail, bookId })\r\n+            });\r\n+            const result = await response.json();\r\n+            if (!result.success) return console.warn(result.message);\r\n+\r\n+            this.items = this.items.filter(item => item.id !== bookId);\r\n+            this.renderCart();\r\n+            this.updateCartCount();\r\n+            this.showNotification(`Removed \"${result.removedTitle}\" from cart`);\r\n+        } catch (err) {\r\n+            console.error(\"Failed to remove book:\", err);\r\n+        }\r\n+    }\r\n+\r\n+    async clearCart() {\r\n+        if (!this.items.length) return;\r\n+        if (!confirm(\"Are you sure you want to clear the cart?\")) return;\r\n+\r\n+        try {\r\n+            const response = await fetch(\"http://127.0.0.1:5000/clear-cart\", {\r\n+                method: \"POST\",\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify({ email: this.currentUserEmail })\r\n+            });\r\n+            const result = await response.json();\r\n+            if (!result.success) return this.showNotification(\"Failed to clear cart.\");\r\n+\r\n+            this.items = [];\r\n+            this.renderCart();\r\n+            this.updateCartCount();\r\n+            this.updateSummary();\r\n+            this.showNotification(\"Cart cleared successfully!\");\r\n+        } catch (err) {\r\n+            console.error(\"Failed to clear cart:\", err);\r\n+        }\r\n+    }\r\n+\r\n+proceedToCheckout() {\r\n+    if (!this.items || this.items.length === 0) {\r\n+        this.showNotification(\"Your cart is empty. Cannot proceed to checkout.\");\r\n+        return;\r\n+    }\r\n+\r\n+    const paypalContainer = document.getElementById('paypal-button-container');\r\n+    if (!paypalContainer) return;\r\n+\r\n+    paypalContainer.style.display = \"flex\";\r\n+    paypalContainer.innerHTML = \"\";\r\n+\r\n+    paypal.Buttons({\r\n+        createOrder: (data, actions) => {\r\n+            // Total can be any backend-calculated value if you want\r\n+            let total = this.items.reduce((sum, book) => sum + Number(book.price), 0);\r\n+            return actions.order.create({\r\n+                purchase_units: [{\r\n+                    amount: { value: total.toFixed(2) }\r\n+                }]\r\n+            });\r\n+        },\r\n+        onApprove: async (data, actions) => {\r\n+            await actions.order.capture();\r\n+\r\n+            // ✅ After successful payment, tell backend to move cart → Paid_Book\r\n+            try {\r\n+                const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n+                const res = await fetch('http://127.0.0.1:5000/pay-cart', {\r\n+                    method: 'POST',\r\n+                    headers: { 'Content-Type': 'application/json' },\r\n+                    body: JSON.stringify({ email: currentUser.email })\r\n+                });\r\n+                const result = await res.json();\r\n+                if (result.success) {\r\n+                    this.items = [];\r\n+                    this.renderCart();\r\n+                    this.updateCartCount();\r\n+                    this.showNotification(\"Payment successful! Cart moved to paid books.\");\r\n+                    window.location.href = \"thank-you.html\";\r\n+                } else {\r\n+                    this.showNotification(\"Error updating paid books: \" + result.message);\r\n+                }\r\n+            } catch (err) {\r\n+                console.error(\"Error updating paid books:\", err);\r\n+                this.showNotification(\"Payment succeeded but failed to update paid books.\");\r\n+            }\r\n+        },\r\n+        onCancel: () => {\r\n+            this.showNotification(\"Payment cancelled.\");\r\n+            paypalContainer.style.display = \"none\";\r\n+        },\r\n+        onError: (err) => {\r\n+            console.error(\"PayPal error:\", err);\r\n+            this.showNotification(\"Payment failed. Please try again.\");\r\n+            paypalContainer.style.display = \"none\";\r\n+        }\r\n+    }).render('#paypal-button-container');\r\n+}\r\n+\r\n+\r\n+\r\n+    renderCart() {\r\n+        const container = document.getElementById(\"cart-items\");\r\n+        if (!container) return;\r\n+\r\n+        if (!this.items.length) {\r\n+            container.innerHTML = `<div class=\"empty-cart\">\r\n+                <h3>Your cart is empty</h3>\r\n+                <p>Add some books to get started!</p>\r\n+                <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n+            </div>`;\r\n+            this.updateSummary();\r\n+            return;\r\n+        }\r\n+\r\n+        container.innerHTML = \"\";\r\n+        this.items.forEach(book => {\r\n+            const cartItem = document.createElement(\"div\");\r\n+            cartItem.className = \"cart-item\";\r\n+            cartItem.innerHTML = `\r\n+                <img src=\"${book.image}\" alt=\"${book.title}\" class=\"cart-item-image\">\r\n+                <div class=\"cart-item-details\">\r\n+                    <h3>${book.title}</h3>\r\n+                    <p>by ${book.author}</p>\r\n+                    <p>$${Number(book.price).toFixed(2)}</p>\r\n+                </div>\r\n+            `;\r\n+\r\n+            const controls = document.createElement(\"div\");\r\n+            controls.className = \"cart-item-controls\";\r\n+\r\n+            const removeBtn = document.createElement(\"button\");\r\n+            removeBtn.textContent = \"Remove\";\r\n+            removeBtn.className = \"remove-btn\";\r\n+            removeBtn.addEventListener(\"click\", () => this.removeItem(book.id));\r\n+\r\n+            controls.appendChild(removeBtn);\r\n+            cartItem.appendChild(controls);\r\n+            container.appendChild(cartItem);\r\n+        });\r\n+\r\n+        this.updateSummary();\r\n+    }\r\n+\r\n+    calculateSubtotal() {\r\n+        return this.items.reduce((sum, book) => sum + Number(book.price), 0);\r\n+    }\r\n+\r\n+    calculateTax() { return this.calculateSubtotal() * this.taxRate; }\r\n+    calculateTotal() { return this.calculateSubtotal() + this.calculateTax() + this.shippingCost; }\r\n+\r\n+    updateSummary() {\r\n+        const subtotalEl = document.getElementById('subtotal');\r\n+        const totalEl = document.getElementById('total');\r\n+        const checkoutBtn = document.getElementById('checkout-btn');\r\n+\r\n+        if (!this.items || this.items.length === 0) {\r\n+            if (subtotalEl) subtotalEl.textContent = \"$0.00\";\r\n+            if (totalEl) totalEl.textContent = \"$0.00\";\r\n+            if (checkoutBtn) checkoutBtn.disabled = true;\r\n+            return;\r\n+        }\r\n+\r\n+        const subtotal = this.calculateSubtotal();\r\n+        const total = this.calculateTotal();\r\n+\r\n+        if (subtotalEl) subtotalEl.textContent = `$${subtotal.toFixed(2)}`;\r\n+        if (totalEl) totalEl.textContent = `$${total.toFixed(2)}`;\r\n+        if (checkoutBtn) checkoutBtn.disabled = false;\r\n+    }\r\n+\r\n+    updateCartCount() {\r\n+        const el = document.getElementById(\"cart-count\");\r\n+        if (el) el.textContent = this.items.length;\r\n+    }\r\n+\r\n+    showNotification(message) {\r\n+        const notification = document.createElement(\"div\");\r\n+        notification.className = \"notification\";\r\n+        notification.textContent = message;\r\n+        document.body.appendChild(notification);\r\n+        setTimeout(() => notification.remove(), 3000);\r\n+    }\r\n+\r\n+    bindEvents() {\r\n+        const clearBtn = document.getElementById(\"clear-cart\");\r\n+        if (clearBtn) {\r\n+            // Remove all existing click listeners first\r\n+            clearBtn.replaceWith(clearBtn.cloneNode(true));\r\n+            const newClearBtn = document.getElementById(\"clear-cart\");\r\n+            newClearBtn.addEventListener(\"click\", (e) => {\r\n+                e.preventDefault();\r\n+                this.clearCart();\r\n+            });\r\n+        }\r\n+        const checkoutBtn = document.getElementById(\"checkout-btn\");\r\n+        if (checkoutBtn) checkoutBtn.addEventListener(\"click\", () => this.proceedToCheckout());\r\n+\r\n+        document.addEventListener(\"click\", e => {\r\n+            if (e.target.classList.contains(\"add-to-cart-btn\")) {\r\n+                const bookId = e.target.dataset.id;\r\n+                const book = this.booksData.find(b => b.id == bookId);\r\n+                if (book) this.addItem(book);\r\n+            }\r\n+        });\r\n+    }\r\n+}\r\n+\r\n+document.addEventListener(\"DOMContentLoaded\", () => {\r\n+    window.cart = new ShoppingCart();\r\n+});\r\n"
                }
            ],
            "date": 1756807735778,
            "name": "Commit-0",
            "content": "// Cart functionality for Herbert Schildt Book Store\r\nclass ShoppingCart {\r\n    constructor() {\r\n        this.items = this.loadCartFromStorage();\r\n        this.shippingCost = 5.99;\r\n        this.taxRate = 0.08; // 8% tax rate\r\n        \r\n        // Sample book data for demonstration\r\n        this.bookData = {\r\n            'java-complete': {\r\n                id: 'java-complete',\r\n                title: 'Java: The Complete Reference',\r\n                author: 'Herbert Schildt',\r\n                price: 49.99,\r\n                image: '../img/books/Java Complete.jpg'\r\n            },\r\n            'c-complete': {\r\n                id: 'c-complete',\r\n                title: 'C: The Complete Reference',\r\n                author: 'Herbert Schildt',\r\n                price: 45.99,\r\n                image: '../img/books/C,_The_Complete_Reference.jpg'\r\n            },\r\n            'cpp-complete': {\r\n                id: 'cpp-complete',\r\n                title: 'C++: The Complete Reference',\r\n                author: 'Herbert Schildt',\r\n                price: 47.99,\r\n                image: '../img/books/c++ complete.jpg'\r\n            },\r\n            'java-cookbook': {\r\n                id: 'java-cookbook',\r\n                title: 'Java Cookbook',\r\n                author: 'Herbert Schildt',\r\n                price: 42.99,\r\n                image: '../img/books/java cookbook.jpg'\r\n            },\r\n            'java2': {\r\n                id: 'java2',\r\n                title: 'Java 2: The Complete Reference',\r\n                author: 'Herbert Schildt',\r\n                price: 44.99,\r\n                image: '../img/books/Java2.jpg'\r\n            }\r\n        };\r\n        \r\n        this.init();\r\n    }\r\n    \r\n    init() {\r\n        this.renderCart();\r\n        this.updateCartCount();\r\n        this.bindEvents();\r\n        this.addSampleItems(); // Add some sample items for demonstration\r\n    }\r\n    \r\n    // Add sample items for demonstration\r\n    addSampleItems() {\r\n        if (this.items.length === 0) {\r\n            this.addItem('java-complete', 1);\r\n            this.addItem('c-complete', 1);\r\n        }\r\n    }\r\n    \r\n    // Load cart from localStorage\r\n    loadCartFromStorage() {\r\n        try {\r\n            const saved = localStorage.getItem('herbertSchildtCart');\r\n            return saved ? JSON.parse(saved) : [];\r\n        } catch (error) {\r\n            console.error('Error loading cart from storage:', error);\r\n            return [];\r\n        }\r\n    }\r\n    \r\n    // Save cart to localStorage\r\n    saveCartToStorage() {\r\n        try {\r\n            localStorage.setItem('herbertSchildtCart', JSON.stringify(this.items));\r\n        } catch (error) {\r\n            console.error('Error saving cart to storage:', error);\r\n        }\r\n    }\r\n    \r\n    // Add item to cart\r\n    addItem(bookId, quantity = 1) {\r\n        const book = this.bookData[bookId];\r\n        if (!book) {\r\n            console.error('Book not found:', bookId);\r\n            return;\r\n        }\r\n        \r\n        const existingItem = this.items.find(item => item.id === bookId);\r\n        \r\n        if (existingItem) {\r\n            existingItem.quantity += quantity;\r\n        } else {\r\n            this.items.push({\r\n                id: bookId,\r\n                title: book.title,\r\n                author: book.author,\r\n                price: book.price,\r\n                image: book.image,\r\n                quantity: quantity\r\n            });\r\n        }\r\n        \r\n        this.saveCartToStorage();\r\n        this.renderCart();\r\n        this.updateCartCount();\r\n        this.showNotification(`${book.title} added to cart!`);\r\n    }\r\n    \r\n    // Remove item from cart\r\n    removeItem(bookId) {\r\n        this.items = this.items.filter(item => item.id !== bookId);\r\n        this.saveCartToStorage();\r\n        this.renderCart();\r\n        this.updateCartCount();\r\n        this.showNotification('Item removed from cart');\r\n    }\r\n    \r\n    // Update item quantity\r\n    updateQuantity(bookId, newQuantity) {\r\n        if (newQuantity <= 0) {\r\n            this.removeItem(bookId);\r\n            return;\r\n        }\r\n        \r\n        const item = this.items.find(item => item.id === bookId);\r\n        if (item) {\r\n            item.quantity = newQuantity;\r\n            this.saveCartToStorage();\r\n            this.renderCart();\r\n            this.updateCartCount();\r\n        }\r\n    }\r\n    \r\n    // Clear entire cart\r\n    clearCart() {\r\n        if (this.items.length === 0) return;\r\n        \r\n        if (confirm('Are you sure you want to clear all items from your cart?')) {\r\n            this.items = [];\r\n            this.saveCartToStorage();\r\n            this.renderCart();\r\n            this.updateCartCount();\r\n            this.showNotification('Cart cleared');\r\n        }\r\n    }\r\n    \r\n    // Calculate subtotal\r\n    calculateSubtotal() {\r\n        return this.items.reduce((total, item) => total + (item.price * item.quantity), 0);\r\n    }\r\n    \r\n    // Calculate tax\r\n    calculateTax() {\r\n        return this.calculateSubtotal() * this.taxRate;\r\n    }\r\n    \r\n    // Calculate total\r\n    calculateTotal() {\r\n        const subtotal = this.calculateSubtotal();\r\n        const tax = this.calculateTax();\r\n        return subtotal + tax + this.shippingCost;\r\n    }\r\n    \r\n    // Update cart count in header\r\n    updateCartCount() {\r\n        const count = this.items.reduce((total, item) => total + item.quantity, 0);\r\n        const cartCountElement = document.getElementById('cart-count');\r\n        if (cartCountElement) {\r\n            cartCountElement.textContent = count;\r\n        }\r\n    }\r\n    \r\n    // Render cart items\r\n    renderCart() {\r\n        const cartItemsContainer = document.getElementById('cart-items');\r\n        if (!cartItemsContainer) return;\r\n        \r\n        if (this.items.length === 0) {\r\n            cartItemsContainer.innerHTML = `\r\n                <div class=\"empty-cart\">\r\n                    <div class=\"empty-cart-content\">\r\n                        <img src=\"../img/books/Java Complete.jpg\" alt=\"Empty Cart\" class=\"empty-cart-image\">\r\n                        <h3>Your cart is empty</h3>\r\n                        <p>Add some books to get started!</p>\r\n                        <a href=\"../browse-book.html\" class=\"browse-btn\">Browse Books</a>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        } else {\r\n            cartItemsContainer.innerHTML = this.items.map(item => `\r\n                <div class=\"cart-item\" data-book-id=\"${item.id}\">\r\n                    <img src=\"${item.image}\" alt=\"${item.title}\" class=\"cart-item-image\">\r\n                    <div class=\"cart-item-details\">\r\n                        <h3 class=\"cart-item-title\">${item.title}</h3>\r\n                        <p class=\"cart-item-author\">by ${item.author}</p>\r\n                        <p class=\"cart-item-price\">$${item.price.toFixed(2)}</p>\r\n                    </div>\r\n                    <div class=\"cart-item-controls\">\r\n                        <div class=\"quantity-controls\">\r\n                            <button class=\"quantity-btn\" onclick=\"cart.updateQuantity('${item.id}', ${item.quantity - 1})\">-</button>\r\n                            <input type=\"number\" class=\"quantity-input\" value=\"${item.quantity}\" min=\"1\" \r\n                                   onchange=\"cart.updateQuantity('${item.id}', parseInt(this.value))\">\r\n                            <button class=\"quantity-btn\" onclick=\"cart.updateQuantity('${item.id}', ${item.quantity + 1})\">+</button>\r\n                        </div>\r\n                        <button class=\"remove-btn\" onclick=\"cart.removeItem('${item.id}')\">Remove</button>\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n        \r\n        this.updateSummary();\r\n    }\r\n    \r\n    // Update order summary\r\nupdateSummary() {\r\n    const subtotal = this.calculateSubtotal();\r\n\r\n    // Update subtotal element\r\n    document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;\r\n\r\n    // Enable/disable checkout button\r\n    const checkoutBtn = document.getElementById('checkout-btn');\r\n    if (checkoutBtn) {\r\n        checkoutBtn.disabled = this.items.length === 0;\r\n    }\r\n}\r\n\r\n    // Show notification\r\n    showNotification(message) {\r\n        // Create notification element\r\n        const notification = document.createElement('div');\r\n        notification.className = 'notification';\r\n        notification.textContent = message;\r\n        notification.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            background-color: var(--button-primary);\r\n            color: white;\r\n            padding: 1rem 2rem;\r\n            border-radius: 5px;\r\n            font-family: 'Inter Medium';\r\n            z-index: 1000;\r\n            animation: slideInRight 0.3s ease;\r\n        `;\r\n        \r\n        document.body.appendChild(notification);\r\n        \r\n        // Remove notification after 3 seconds\r\n        setTimeout(() => {\r\n            notification.style.animation = 'slideOutRight 0.3s ease';\r\n            setTimeout(() => {\r\n                if (notification.parentNode) {\r\n                    notification.parentNode.removeChild(notification);\r\n                }\r\n            }, 300);\r\n        }, 3000);\r\n    }\r\n    \r\n    // Bind event listeners\r\n    bindEvents() {\r\n        // Clear cart button\r\n        const clearCartBtn = document.getElementById('clear-cart');\r\n        if (clearCartBtn) {\r\n            clearCartBtn.addEventListener('click', () => this.clearCart());\r\n        }\r\n        \r\n        // Checkout button\r\n        const checkoutBtn = document.getElementById('checkout-btn');\r\n        if (checkoutBtn) {\r\n            checkoutBtn.addEventListener('click', () => this.proceedToCheckout());\r\n        }\r\n        \r\n        // Add to cart buttons in recommended section\r\n        document.addEventListener('click', (e) => {\r\n            if (e.target.classList.contains('add-to-cart-btn')) {\r\n                const bookId = e.target.getAttribute('data-book-id');\r\n                this.addItem(bookId, 1);\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Proceed to checkout (placeholder)\r\n    proceedToCheckout() {\r\n        if (this.items.length === 0) return;\r\n        \r\n        // In a real application, this would redirect to a checkout page\r\n        // For now, we'll show an alert\r\n        alert(`Proceeding to checkout with ${this.items.length} item(s). Total: $${this.calculateTotal().toFixed(2)}`);\r\n        \r\n        // You can integrate this with your groupmate's checkout system\r\n        console.log('Checkout data:', {\r\n            items: this.items,\r\n            subtotal: this.calculateSubtotal(),\r\n            tax: this.calculateTax(),\r\n            shipping: this.shippingCost,\r\n            total: this.calculateTotal()\r\n        });\r\n    }\r\n    \r\n    // Get cart data for integration with other pages\r\n    getCartData() {\r\n        return {\r\n            items: this.items,\r\n            subtotal: this.calculateSubtotal(),\r\n            tax: this.calculateTax(),\r\n            shipping: this.shippingCost,\r\n            total: this.calculateTotal(),\r\n            itemCount: this.items.reduce((total, item) => total + item.quantity, 0)\r\n        };\r\n    }\r\n}\r\n\r\n// Initialize cart when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    window.cart = new ShoppingCart();\r\n});\r\n\r\n// Add CSS animations for notifications\r\nconst style = document.createElement('style');\r\nstyle.textContent = `\r\n    @keyframes slideInRight {\r\n        from {\r\n            transform: translateX(100%);\r\n            opacity: 0;\r\n        }\r\n        to {\r\n            transform: translateX(0);\r\n            opacity: 1;\r\n        }\r\n    }\r\n    \r\n    @keyframes slideOutRight {\r\n        from {\r\n            transform: translateX(0);\r\n            opacity: 1;\r\n        }\r\n        to {\r\n            transform: translateX(100%);\r\n            opacity: 0;\r\n        }\r\n    }\r\n`;\r\ndocument.head.appendChild(style);\r\n\r\n// Export for use in other pages\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = ShoppingCart;\r\n}\r\n"
        }
    ]
}